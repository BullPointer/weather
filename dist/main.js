(()=>{var t={426:(e,t,n)=>{"use strict";n.d(t,{Z:()=>f});var r=n(537),o=n.n(r),i=n(645),a=n.n(i),s=n(667),c=n.n(s),l=new URL(n(74),n.b),u=a()(o()),d=c()(l);u.push([e.id,"* {\n    margin: 0;\n    padding: 0;\n    box-sizing: border-box;\n}\nbody {\n    min-height: 100vh;\n}\n.container {\n    width: 100%;\n    min-height: calc(70vh + 100vh);\n    padding-bottom: 30px;\n    background: url("+d+") no-repeat fixed center;\n}\n.container .content {\n    display: flex;\n    flex-direction: row;\n    justify-content: space-evenly;\n\n}\n.container .content .left-weather {\n    display: flex;\n    flex-direction: column;\n}\n.container .content .left-weather .leftCloud {\n    width: 120px;\n    height: 120px;\n}\n.container .content .left-weather, .right-weather {\n    margin-top: 30px;\n}\n.container .content .left-weather .left {\n    margin-bottom: 30px;\n}\n.container .content .left-weather .search-box{\n    width: 300px;\n    display: flex;\n    border-bottom: 1px solid rgb(44, 44, 97);\n}\n.container .content .left-weather input[type='search'] {\n    padding: 10px 0;\n    outline: none;\n    font-size: 20px;\n    border: none;\n    background: transparent;\n}\n.container .content .left-weather .title {\n    font-size: 40px;\n    font-family: system-ui, -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\n    color: rgb(196, 92, 92);\n}\n.container .content .left-weather .date {\n    font-size: 20px;\n    font-family: 'Times New Roman', Times, serif;\n    color: rgb(27, 4, 4);\n    opacity: 0.7;\n}\n.container .content .left-weather .place {\n    font-size: 30px;\n    font-weight: bold;\n    font-family: 'Gill Sans', 'Gill Sans MT', Calibri, 'Trebuchet MS', sans-serif;\n    color: rgb(88, 33, 33);\n}\n.container .content .right-weather .right {\n    margin-bottom: 10px;\n}\n.container .content .left-weather .leftDegree, .right-weather .rightDegree {\n    height: 50px;\n    display: flex;\n    align-items: center;\n    justify-content: left;\n    margin-bottom: 20px;\n}\n.container .content .left-weather .leftDegree .imgSvg, .right-weather .rightDegree .imgSvg {\n    opacity: 0.7;\n}\n.container .content .left-weather .leftDegree .degree {\n    margin: 0 20px 0 0;\n    font-size: 60px;\n    font-weight: bold;\n    font-family: 'Times New Roman', Times, serif;\n    color: black;\n    opacity: 0.7;\n}\n\n.container .content .right-weather .right .more-msg {\n    font-size: 18px;\n    font-family: Cambria, Cochin, Georgia, Times, 'Times New Roman', serif;\n    font-style: italic;\n}\n.container .content .right-weather .right .in-degree {\n    font-size: 40px;\n    opacity: 0.7;\n}\n\n@media only screen and (max-width: 700px) {\n    .container .content {\n        display: flex;\n        flex-direction: column;\n        align-items: center;\n        color: rgb(100, 84, 84);\n    }\n    .container .content .left-weather .date {\n        color: white;\n    }\n    .container .content .left-weather .date {\n        opacity: 1;\n    }\n    .container .content .left-weather .leftDegree .imgSvg, .right-weather .rightDegree .imgSvg {\n        opacity: 1;\n    }\n    .container .content .left-weather .leftDegree .degree {\n        opacity: 1;\n    }\n    .container .content .right-weather .right .in-degree {\n        opacity: 1;\n    }\n}","",{version:3,sources:["webpack://./src/style.css"],names:[],mappings:"AAAA;IACI,SAAS;IACT,UAAU;IACV,sBAAsB;AAC1B;AACA;IACI,iBAAiB;AACrB;AACA;IACI,WAAW;IACX,8BAA8B;IAC9B,oBAAoB;IACpB,0EAAmE;AACvE;AACA;IACI,aAAa;IACb,mBAAmB;IACnB,6BAA6B;;AAEjC;AACA;IACI,aAAa;IACb,sBAAsB;AAC1B;AACA;IACI,YAAY;IACZ,aAAa;AACjB;AACA;IACI,gBAAgB;AACpB;AACA;IACI,mBAAmB;AACvB;AACA;IACI,YAAY;IACZ,aAAa;IACb,wCAAwC;AAC5C;AACA;IACI,eAAe;IACf,aAAa;IACb,eAAe;IACf,YAAY;IACZ,uBAAuB;AAC3B;AACA;IACI,eAAe;IACf,mJAAmJ;IACnJ,uBAAuB;AAC3B;AACA;IACI,eAAe;IACf,4CAA4C;IAC5C,oBAAoB;IACpB,YAAY;AAChB;AACA;IACI,eAAe;IACf,iBAAiB;IACjB,6EAA6E;IAC7E,sBAAsB;AAC1B;AACA;IACI,mBAAmB;AACvB;AACA;IACI,YAAY;IACZ,aAAa;IACb,mBAAmB;IACnB,qBAAqB;IACrB,mBAAmB;AACvB;AACA;IACI,YAAY;AAChB;AACA;IACI,kBAAkB;IAClB,eAAe;IACf,iBAAiB;IACjB,4CAA4C;IAC5C,YAAY;IACZ,YAAY;AAChB;;AAEA;IACI,eAAe;IACf,sEAAsE;IACtE,kBAAkB;AACtB;AACA;IACI,eAAe;IACf,YAAY;AAChB;;AAEA;IACI;QACI,aAAa;QACb,sBAAsB;QACtB,mBAAmB;QACnB,uBAAuB;IAC3B;IACA;QACI,YAAY;IAChB;IACA;QACI,UAAU;IACd;IACA;QACI,UAAU;IACd;IACA;QACI,UAAU;IACd;IACA;QACI,UAAU;IACd;AACJ",sourcesContent:["* {\n    margin: 0;\n    padding: 0;\n    box-sizing: border-box;\n}\nbody {\n    min-height: 100vh;\n}\n.container {\n    width: 100%;\n    min-height: calc(70vh + 100vh);\n    padding-bottom: 30px;\n    background: url('./image/backgroundImg.jpg') no-repeat fixed center;\n}\n.container .content {\n    display: flex;\n    flex-direction: row;\n    justify-content: space-evenly;\n\n}\n.container .content .left-weather {\n    display: flex;\n    flex-direction: column;\n}\n.container .content .left-weather .leftCloud {\n    width: 120px;\n    height: 120px;\n}\n.container .content .left-weather, .right-weather {\n    margin-top: 30px;\n}\n.container .content .left-weather .left {\n    margin-bottom: 30px;\n}\n.container .content .left-weather .search-box{\n    width: 300px;\n    display: flex;\n    border-bottom: 1px solid rgb(44, 44, 97);\n}\n.container .content .left-weather input[type='search'] {\n    padding: 10px 0;\n    outline: none;\n    font-size: 20px;\n    border: none;\n    background: transparent;\n}\n.container .content .left-weather .title {\n    font-size: 40px;\n    font-family: system-ui, -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\n    color: rgb(196, 92, 92);\n}\n.container .content .left-weather .date {\n    font-size: 20px;\n    font-family: 'Times New Roman', Times, serif;\n    color: rgb(27, 4, 4);\n    opacity: 0.7;\n}\n.container .content .left-weather .place {\n    font-size: 30px;\n    font-weight: bold;\n    font-family: 'Gill Sans', 'Gill Sans MT', Calibri, 'Trebuchet MS', sans-serif;\n    color: rgb(88, 33, 33);\n}\n.container .content .right-weather .right {\n    margin-bottom: 10px;\n}\n.container .content .left-weather .leftDegree, .right-weather .rightDegree {\n    height: 50px;\n    display: flex;\n    align-items: center;\n    justify-content: left;\n    margin-bottom: 20px;\n}\n.container .content .left-weather .leftDegree .imgSvg, .right-weather .rightDegree .imgSvg {\n    opacity: 0.7;\n}\n.container .content .left-weather .leftDegree .degree {\n    margin: 0 20px 0 0;\n    font-size: 60px;\n    font-weight: bold;\n    font-family: 'Times New Roman', Times, serif;\n    color: black;\n    opacity: 0.7;\n}\n\n.container .content .right-weather .right .more-msg {\n    font-size: 18px;\n    font-family: Cambria, Cochin, Georgia, Times, 'Times New Roman', serif;\n    font-style: italic;\n}\n.container .content .right-weather .right .in-degree {\n    font-size: 40px;\n    opacity: 0.7;\n}\n\n@media only screen and (max-width: 700px) {\n    .container .content {\n        display: flex;\n        flex-direction: column;\n        align-items: center;\n        color: rgb(100, 84, 84);\n    }\n    .container .content .left-weather .date {\n        color: white;\n    }\n    .container .content .left-weather .date {\n        opacity: 1;\n    }\n    .container .content .left-weather .leftDegree .imgSvg, .right-weather .rightDegree .imgSvg {\n        opacity: 1;\n    }\n    .container .content .left-weather .leftDegree .degree {\n        opacity: 1;\n    }\n    .container .content .right-weather .right .in-degree {\n        opacity: 1;\n    }\n}"],sourceRoot:""}]);const f=u},523:(e,t,n)=>{"use strict";n.d(t,{Z:()=>s});var r=n(537),o=n.n(r),i=n(645),a=n.n(i)()(o());a.push([e.id,"\n.container .box .button {\n    padding: 8px;\n    margin: 30px 20px 20px 20px;\n    font-size: large;\n    font-weight: 600;\n    border: 3px solid rgb(138, 131, 131);\n    border-radius: 5px;\n    background: transparent;\n    color: rgb(122, 84, 84);\n}\n.container .box .weatherDisplay {\n    height: 100%;\n    display: flex; \n    flex-direction: row;\n    gap: 10px;\n    justify-content: space-evenly;\n}\n.container .box .weatherDisplay .forcast .day {\n    margin-top: 20px;\n    font-size: large;\n    font-family: 'Trebuchet MS', 'Lucida Sans Unicode', 'Lucida Grande', 'Lucida Sans', Arial, sans-serif;\n\n}\n.container .box .weatherDisplay .accord {\n    display: flex;\n    flex-direction: row;\n    padding: 5px 0;\n}\n.container .box .weatherDisplay .forcast .accord .min-degree {\n    font-size: 13px;\n    font-weight: 200;\n}\n.container .box .weatherDisplay .forcast .accord .avg-degree {\n    font-size: 17px;\n    font-weight: 600;\n}\n.container .box .weatherDisplay .forcast .accord .max-degree {\n    font-size: 20px;\n    font-weight: bold;\n}\n.container .box .weatherDisplay .forcast .accord .cloud-icon {\n    width: 5px;\n    margin: 0;\n    padding: 0;\n    font-size: 5px;\n}\n\n@media only screen and (max-width: 700px) {\n    .container .box .weatherDisplay {\n        display: flex; \n        flex-direction: column;\n        align-items: center;\n        color: white;\n    }\n    .container .box .button {\n        padding: 4px;\n        margin: 30px 0px 20px 10px;\n        font-size: large;\n\n    }    \n}","",{version:3,sources:["webpack://./src/style2.css"],names:[],mappings:";AACA;IACI,YAAY;IACZ,2BAA2B;IAC3B,gBAAgB;IAChB,gBAAgB;IAChB,oCAAoC;IACpC,kBAAkB;IAClB,uBAAuB;IACvB,uBAAuB;AAC3B;AACA;IACI,YAAY;IACZ,aAAa;IACb,mBAAmB;IACnB,SAAS;IACT,6BAA6B;AACjC;AACA;IACI,gBAAgB;IAChB,gBAAgB;IAChB,qGAAqG;;AAEzG;AACA;IACI,aAAa;IACb,mBAAmB;IACnB,cAAc;AAClB;AACA;IACI,eAAe;IACf,gBAAgB;AACpB;AACA;IACI,eAAe;IACf,gBAAgB;AACpB;AACA;IACI,eAAe;IACf,iBAAiB;AACrB;AACA;IACI,UAAU;IACV,SAAS;IACT,UAAU;IACV,cAAc;AAClB;;AAEA;IACI;QACI,aAAa;QACb,sBAAsB;QACtB,mBAAmB;QACnB,YAAY;IAChB;IACA;QACI,YAAY;QACZ,0BAA0B;QAC1B,gBAAgB;;IAEpB;AACJ",sourcesContent:["\n.container .box .button {\n    padding: 8px;\n    margin: 30px 20px 20px 20px;\n    font-size: large;\n    font-weight: 600;\n    border: 3px solid rgb(138, 131, 131);\n    border-radius: 5px;\n    background: transparent;\n    color: rgb(122, 84, 84);\n}\n.container .box .weatherDisplay {\n    height: 100%;\n    display: flex; \n    flex-direction: row;\n    gap: 10px;\n    justify-content: space-evenly;\n}\n.container .box .weatherDisplay .forcast .day {\n    margin-top: 20px;\n    font-size: large;\n    font-family: 'Trebuchet MS', 'Lucida Sans Unicode', 'Lucida Grande', 'Lucida Sans', Arial, sans-serif;\n\n}\n.container .box .weatherDisplay .accord {\n    display: flex;\n    flex-direction: row;\n    padding: 5px 0;\n}\n.container .box .weatherDisplay .forcast .accord .min-degree {\n    font-size: 13px;\n    font-weight: 200;\n}\n.container .box .weatherDisplay .forcast .accord .avg-degree {\n    font-size: 17px;\n    font-weight: 600;\n}\n.container .box .weatherDisplay .forcast .accord .max-degree {\n    font-size: 20px;\n    font-weight: bold;\n}\n.container .box .weatherDisplay .forcast .accord .cloud-icon {\n    width: 5px;\n    margin: 0;\n    padding: 0;\n    font-size: 5px;\n}\n\n@media only screen and (max-width: 700px) {\n    .container .box .weatherDisplay {\n        display: flex; \n        flex-direction: column;\n        align-items: center;\n        color: white;\n    }\n    .container .box .button {\n        padding: 4px;\n        margin: 30px 0px 20px 10px;\n        font-size: large;\n\n    }    \n}"],sourceRoot:""}]);const s=a},306:(e,t,n)=>{"use strict";n.d(t,{Z:()=>s});var r=n(537),o=n.n(r),i=n(645),a=n.n(i)()(o());a.push([e.id,".container .box .weatherDisplay .loopContainer{\n    display: none;\n}\n.container .box .weatherDisplay .active{\n    display: contents;\n}\n\n.container .box .left-arrow, .right-arrow {\n    display: none;\n    padding: 8px;\n    margin: 30px 20px 20px 20px;\n    font-size: 25px;\n    font-weight: 600;\n    border: none;\n    border-radius: 5px;\n    background: transparent;\n    color: rgb(122, 84, 84);\n}\n.container .box .left-arrow:hover, .right-arrow:hover {\n    border: 3px solid rgb(138, 131, 131);\n    border-radius: 100%;\n}\n.container .box .arrow {\n    display: inline-block;\n}\n\n\n.container .box .weatherDisplay .day-forcast{\n    overflow-x: hidden;\n}\n.container .box .weatherDisplay .day-forcast .day {\n    margin-top: 20px;\n    font-size: large;\n    font-family: 'Trebuchet MS', 'Lucida Sans Unicode', 'Lucida Grande', 'Lucida Sans', Arial, sans-serif;\n\n}\n.container .box .weatherDisplay .day-forcast .accord {\n    display: flex;\n    flex-direction: row;\n    padding: 5px 0;\n}\n.container .box .weatherDisplay .day-forcast .accord .min-degree {\n    font-size: 13px;\n    font-weight: 200;\n}\n.container .box .weatherDisplay .day-forcast .accord .avg-degree {\n    font-size: 17px;\n    font-weight: 600;\n}\n.container .box .weatherDisplay .day-forcast .accord .max-degree {\n    font-size: 20px;\n    font-weight: bold;\n}\n.container .box .weatherDisplay .day-forcast .accord .cloud-icon {\n    width: 5px;\n    margin: 0;\n    padding: 0;\n    font-size: 5px;\n}\n.container .error-box {\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    position: fixed;\n    top: 0;\n    right: 0;\n    width: 500px;\n    height: 50px;\n    font-size: 25px;\n    font-family: cursive;\n    color: white;\n    background: rgb(131, 151, 158);\n    z-index: 100;\n    animation: showError 2s ease-in-out 0s normal;\n}\n.container .error-msg{\n    visibility: visible;\n    animation: showErrorMsg 1s ease-in-out 0s normal;\n}\n\n.container .active {\n    display: none;\n}\n@keyframes showError {\n    0% {\n        opacity: 0.2;\n    }\n    80% {\n        opacity: 0.8;\n    }\n}\n@keyframes showErrorMsg {\n    0% {\n        transform: rotateX(10deg);\n    }\n    100% {\n        transform: rotateX(100deg);\n\n    }\n}\n\n@media only screen and (max-width: 700px) {\n    .container .box .weatherDisplay .active{\n        display: flex;\n        flex-direction: column;\n    }\n    .container .box .left-arrow, .right-arrow {\n        padding: 3px;\n        margin: 30px 8px 20px 8px;\n    }\n    .container .error-box {\n        width: 100%;\n        height: 50px;\n    }\n}","",{version:3,sources:["webpack://./src/style3.css"],names:[],mappings:"AAAA;IACI,aAAa;AACjB;AACA;IACI,iBAAiB;AACrB;;AAEA;IACI,aAAa;IACb,YAAY;IACZ,2BAA2B;IAC3B,eAAe;IACf,gBAAgB;IAChB,YAAY;IACZ,kBAAkB;IAClB,uBAAuB;IACvB,uBAAuB;AAC3B;AACA;IACI,oCAAoC;IACpC,mBAAmB;AACvB;AACA;IACI,qBAAqB;AACzB;;;AAGA;IACI,kBAAkB;AACtB;AACA;IACI,gBAAgB;IAChB,gBAAgB;IAChB,qGAAqG;;AAEzG;AACA;IACI,aAAa;IACb,mBAAmB;IACnB,cAAc;AAClB;AACA;IACI,eAAe;IACf,gBAAgB;AACpB;AACA;IACI,eAAe;IACf,gBAAgB;AACpB;AACA;IACI,eAAe;IACf,iBAAiB;AACrB;AACA;IACI,UAAU;IACV,SAAS;IACT,UAAU;IACV,cAAc;AAClB;AACA;IACI,aAAa;IACb,uBAAuB;IACvB,mBAAmB;IACnB,eAAe;IACf,MAAM;IACN,QAAQ;IACR,YAAY;IACZ,YAAY;IACZ,eAAe;IACf,oBAAoB;IACpB,YAAY;IACZ,8BAA8B;IAC9B,YAAY;IACZ,6CAA6C;AACjD;AACA;IACI,mBAAmB;IACnB,gDAAgD;AACpD;;AAEA;IACI,aAAa;AACjB;AACA;IACI;QACI,YAAY;IAChB;IACA;QACI,YAAY;IAChB;AACJ;AACA;IACI;QACI,yBAAyB;IAC7B;IACA;QACI,0BAA0B;;IAE9B;AACJ;;AAEA;IACI;QACI,aAAa;QACb,sBAAsB;IAC1B;IACA;QACI,YAAY;QACZ,yBAAyB;IAC7B;IACA;QACI,WAAW;QACX,YAAY;IAChB;AACJ",sourcesContent:[".container .box .weatherDisplay .loopContainer{\n    display: none;\n}\n.container .box .weatherDisplay .active{\n    display: contents;\n}\n\n.container .box .left-arrow, .right-arrow {\n    display: none;\n    padding: 8px;\n    margin: 30px 20px 20px 20px;\n    font-size: 25px;\n    font-weight: 600;\n    border: none;\n    border-radius: 5px;\n    background: transparent;\n    color: rgb(122, 84, 84);\n}\n.container .box .left-arrow:hover, .right-arrow:hover {\n    border: 3px solid rgb(138, 131, 131);\n    border-radius: 100%;\n}\n.container .box .arrow {\n    display: inline-block;\n}\n\n\n.container .box .weatherDisplay .day-forcast{\n    overflow-x: hidden;\n}\n.container .box .weatherDisplay .day-forcast .day {\n    margin-top: 20px;\n    font-size: large;\n    font-family: 'Trebuchet MS', 'Lucida Sans Unicode', 'Lucida Grande', 'Lucida Sans', Arial, sans-serif;\n\n}\n.container .box .weatherDisplay .day-forcast .accord {\n    display: flex;\n    flex-direction: row;\n    padding: 5px 0;\n}\n.container .box .weatherDisplay .day-forcast .accord .min-degree {\n    font-size: 13px;\n    font-weight: 200;\n}\n.container .box .weatherDisplay .day-forcast .accord .avg-degree {\n    font-size: 17px;\n    font-weight: 600;\n}\n.container .box .weatherDisplay .day-forcast .accord .max-degree {\n    font-size: 20px;\n    font-weight: bold;\n}\n.container .box .weatherDisplay .day-forcast .accord .cloud-icon {\n    width: 5px;\n    margin: 0;\n    padding: 0;\n    font-size: 5px;\n}\n.container .error-box {\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    position: fixed;\n    top: 0;\n    right: 0;\n    width: 500px;\n    height: 50px;\n    font-size: 25px;\n    font-family: cursive;\n    color: white;\n    background: rgb(131, 151, 158);\n    z-index: 100;\n    animation: showError 2s ease-in-out 0s normal;\n}\n.container .error-msg{\n    visibility: visible;\n    animation: showErrorMsg 1s ease-in-out 0s normal;\n}\n\n.container .active {\n    display: none;\n}\n@keyframes showError {\n    0% {\n        opacity: 0.2;\n    }\n    80% {\n        opacity: 0.8;\n    }\n}\n@keyframes showErrorMsg {\n    0% {\n        transform: rotateX(10deg);\n    }\n    100% {\n        transform: rotateX(100deg);\n\n    }\n}\n\n@media only screen and (max-width: 700px) {\n    .container .box .weatherDisplay .active{\n        display: flex;\n        flex-direction: column;\n    }\n    .container .box .left-arrow, .right-arrow {\n        padding: 3px;\n        margin: 30px 8px 20px 8px;\n    }\n    .container .error-box {\n        width: 100%;\n        height: 50px;\n    }\n}"],sourceRoot:""}]);const s=a},645:e=>{"use strict";e.exports=function(e){var t=[];return t.toString=function(){return this.map((function(t){var n="",r=void 0!==t[5];return t[4]&&(n+="@supports (".concat(t[4],") {")),t[2]&&(n+="@media ".concat(t[2]," {")),r&&(n+="@layer".concat(t[5].length>0?" ".concat(t[5]):""," {")),n+=e(t),r&&(n+="}"),t[2]&&(n+="}"),t[4]&&(n+="}"),n})).join("")},t.i=function(e,n,r,o,i){"string"==typeof e&&(e=[[null,e,void 0]]);var a={};if(r)for(var s=0;s<this.length;s++){var c=this[s][0];null!=c&&(a[c]=!0)}for(var l=0;l<e.length;l++){var u=[].concat(e[l]);r&&a[u[0]]||(void 0!==i&&(void 0===u[5]||(u[1]="@layer".concat(u[5].length>0?" ".concat(u[5]):""," {").concat(u[1],"}")),u[5]=i),n&&(u[2]?(u[1]="@media ".concat(u[2]," {").concat(u[1],"}"),u[2]=n):u[2]=n),o&&(u[4]?(u[1]="@supports (".concat(u[4],") {").concat(u[1],"}"),u[4]=o):u[4]="".concat(o)),t.push(u))}},t}},667:e=>{"use strict";e.exports=function(e,t){return t||(t={}),e?(e=String(e.__esModule?e.default:e),/^['"].*['"]$/.test(e)&&(e=e.slice(1,-1)),t.hash&&(e+=t.hash),/["'() \t\n]|(%20)/.test(e)||t.needQuotes?'"'.concat(e.replace(/"/g,'\\"').replace(/\n/g,"\\n"),'"'):e):e}},537:e=>{"use strict";e.exports=function(e){var t=e[1],n=e[3];if(!n)return t;if("function"==typeof btoa){var r=btoa(unescape(encodeURIComponent(JSON.stringify(n)))),o="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(r),i="/*# ".concat(o," */");return[t].concat([i]).join("\n")}return[t].join("\n")}},484:function(e){e.exports=function(){"use strict";var e=6e4,t=36e5,n="millisecond",r="second",o="minute",i="hour",a="day",s="week",c="month",l="quarter",u="year",d="date",f="Invalid Date",p=/^(\d{4})[-/]?(\d{1,2})?[-/]?(\d{0,2})[Tt\s]*(\d{1,2})?:?(\d{1,2})?:?(\d{1,2})?[.:]?(\d+)?$/,h=/\[([^\]]+)]|Y{1,4}|M{1,4}|D{1,2}|d{1,4}|H{1,2}|h{1,2}|a|A|m{1,2}|s{1,2}|Z{1,2}|SSS/g,A={name:"en",weekdays:"Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"),months:"January_February_March_April_May_June_July_August_September_October_November_December".split("_"),ordinal:function(e){var t=["th","st","nd","rd"],n=e%100;return"["+e+(t[(n-20)%10]||t[n]||t[0])+"]"}},m=function(e,t,n){var r=String(e);return!r||r.length>=t?e:""+Array(t+1-r.length).join(n)+e},g={s:m,z:function(e){var t=-e.utcOffset(),n=Math.abs(t),r=Math.floor(n/60),o=n%60;return(t<=0?"+":"-")+m(r,2,"0")+":"+m(o,2,"0")},m:function e(t,n){if(t.date()<n.date())return-e(n,t);var r=12*(n.year()-t.year())+(n.month()-t.month()),o=t.clone().add(r,c),i=n-o<0,a=t.clone().add(r+(i?-1:1),c);return+(-(r+(n-o)/(i?o-a:a-o))||0)},a:function(e){return e<0?Math.ceil(e)||0:Math.floor(e)},p:function(e){return{M:c,y:u,w:s,d:a,D:d,h:i,m:o,s:r,ms:n,Q:l}[e]||String(e||"").toLowerCase().replace(/s$/,"")},u:function(e){return void 0===e}},y="en",C={};C[y]=A;var w=function(e){return e instanceof I},b=function e(t,n,r){var o;if(!t)return y;if("string"==typeof t){var i=t.toLowerCase();C[i]&&(o=i),n&&(C[i]=n,o=i);var a=t.split("-");if(!o&&a.length>1)return e(a[0])}else{var s=t.name;C[s]=t,o=s}return!r&&o&&(y=o),o||!r&&y},x=function(e,t){if(w(e))return e.clone();var n="object"==typeof t?t:{};return n.date=e,n.args=arguments,new I(n)},v=g;v.l=b,v.i=w,v.w=function(e,t){return x(e,{locale:t.$L,utc:t.$u,x:t.$x,$offset:t.$offset})};var I=function(){function A(e){this.$L=b(e.locale,null,!0),this.parse(e)}var m=A.prototype;return m.parse=function(e){this.$d=function(e){var t=e.date,n=e.utc;if(null===t)return new Date(NaN);if(v.u(t))return new Date;if(t instanceof Date)return new Date(t);if("string"==typeof t&&!/Z$/i.test(t)){var r=t.match(p);if(r){var o=r[2]-1||0,i=(r[7]||"0").substring(0,3);return n?new Date(Date.UTC(r[1],o,r[3]||1,r[4]||0,r[5]||0,r[6]||0,i)):new Date(r[1],o,r[3]||1,r[4]||0,r[5]||0,r[6]||0,i)}}return new Date(t)}(e),this.$x=e.x||{},this.init()},m.init=function(){var e=this.$d;this.$y=e.getFullYear(),this.$M=e.getMonth(),this.$D=e.getDate(),this.$W=e.getDay(),this.$H=e.getHours(),this.$m=e.getMinutes(),this.$s=e.getSeconds(),this.$ms=e.getMilliseconds()},m.$utils=function(){return v},m.isValid=function(){return!(this.$d.toString()===f)},m.isSame=function(e,t){var n=x(e);return this.startOf(t)<=n&&n<=this.endOf(t)},m.isAfter=function(e,t){return x(e)<this.startOf(t)},m.isBefore=function(e,t){return this.endOf(t)<x(e)},m.$g=function(e,t,n){return v.u(e)?this[t]:this.set(n,e)},m.unix=function(){return Math.floor(this.valueOf()/1e3)},m.valueOf=function(){return this.$d.getTime()},m.startOf=function(e,t){var n=this,l=!!v.u(t)||t,f=v.p(e),p=function(e,t){var r=v.w(n.$u?Date.UTC(n.$y,t,e):new Date(n.$y,t,e),n);return l?r:r.endOf(a)},h=function(e,t){return v.w(n.toDate()[e].apply(n.toDate("s"),(l?[0,0,0,0]:[23,59,59,999]).slice(t)),n)},A=this.$W,m=this.$M,g=this.$D,y="set"+(this.$u?"UTC":"");switch(f){case u:return l?p(1,0):p(31,11);case c:return l?p(1,m):p(0,m+1);case s:var C=this.$locale().weekStart||0,w=(A<C?A+7:A)-C;return p(l?g-w:g+(6-w),m);case a:case d:return h(y+"Hours",0);case i:return h(y+"Minutes",1);case o:return h(y+"Seconds",2);case r:return h(y+"Milliseconds",3);default:return this.clone()}},m.endOf=function(e){return this.startOf(e,!1)},m.$set=function(e,t){var s,l=v.p(e),f="set"+(this.$u?"UTC":""),p=(s={},s[a]=f+"Date",s[d]=f+"Date",s[c]=f+"Month",s[u]=f+"FullYear",s[i]=f+"Hours",s[o]=f+"Minutes",s[r]=f+"Seconds",s[n]=f+"Milliseconds",s)[l],h=l===a?this.$D+(t-this.$W):t;if(l===c||l===u){var A=this.clone().set(d,1);A.$d[p](h),A.init(),this.$d=A.set(d,Math.min(this.$D,A.daysInMonth())).$d}else p&&this.$d[p](h);return this.init(),this},m.set=function(e,t){return this.clone().$set(e,t)},m.get=function(e){return this[v.p(e)]()},m.add=function(n,l){var d,f=this;n=Number(n);var p=v.p(l),h=function(e){var t=x(f);return v.w(t.date(t.date()+Math.round(e*n)),f)};if(p===c)return this.set(c,this.$M+n);if(p===u)return this.set(u,this.$y+n);if(p===a)return h(1);if(p===s)return h(7);var A=(d={},d[o]=e,d[i]=t,d[r]=1e3,d)[p]||1,m=this.$d.getTime()+n*A;return v.w(m,this)},m.subtract=function(e,t){return this.add(-1*e,t)},m.format=function(e){var t=this,n=this.$locale();if(!this.isValid())return n.invalidDate||f;var r=e||"YYYY-MM-DDTHH:mm:ssZ",o=v.z(this),i=this.$H,a=this.$m,s=this.$M,c=n.weekdays,l=n.months,u=function(e,n,o,i){return e&&(e[n]||e(t,r))||o[n].slice(0,i)},d=function(e){return v.s(i%12||12,e,"0")},p=n.meridiem||function(e,t,n){var r=e<12?"AM":"PM";return n?r.toLowerCase():r},A={YY:String(this.$y).slice(-2),YYYY:this.$y,M:s+1,MM:v.s(s+1,2,"0"),MMM:u(n.monthsShort,s,l,3),MMMM:u(l,s),D:this.$D,DD:v.s(this.$D,2,"0"),d:String(this.$W),dd:u(n.weekdaysMin,this.$W,c,2),ddd:u(n.weekdaysShort,this.$W,c,3),dddd:c[this.$W],H:String(i),HH:v.s(i,2,"0"),h:d(1),hh:d(2),a:p(i,a,!0),A:p(i,a,!1),m:String(a),mm:v.s(a,2,"0"),s:String(this.$s),ss:v.s(this.$s,2,"0"),SSS:v.s(this.$ms,3,"0"),Z:o};return r.replace(h,(function(e,t){return t||A[e]||o.replace(":","")}))},m.utcOffset=function(){return 15*-Math.round(this.$d.getTimezoneOffset()/15)},m.diff=function(n,d,f){var p,h=v.p(d),A=x(n),m=(A.utcOffset()-this.utcOffset())*e,g=this-A,y=v.m(this,A);return y=(p={},p[u]=y/12,p[c]=y,p[l]=y/3,p[s]=(g-m)/6048e5,p[a]=(g-m)/864e5,p[i]=g/t,p[o]=g/e,p[r]=g/1e3,p)[h]||g,f?y:v.a(y)},m.daysInMonth=function(){return this.endOf(c).$D},m.$locale=function(){return C[this.$L]},m.locale=function(e,t){if(!e)return this.$L;var n=this.clone(),r=b(e,t,!0);return r&&(n.$L=r),n},m.clone=function(){return v.w(this.$d,this)},m.toDate=function(){return new Date(this.valueOf())},m.toJSON=function(){return this.isValid()?this.toISOString():null},m.toISOString=function(){return this.$d.toISOString()},m.toString=function(){return this.$d.toUTCString()},A}(),B=I.prototype;return x.prototype=B,[["$ms",n],["$s",r],["$m",o],["$H",i],["$W",a],["$M",c],["$y",u],["$D",d]].forEach((function(e){B[e[1]]=function(t){return this.$g(t,e[0],e[1])}})),x.extend=function(e,t){return e.$i||(e(t,I,x),e.$i=!0),x},x.locale=b,x.isDayjs=w,x.unix=function(e){return x(1e3*e)},x.en=C[y],x.Ls=C,x.p={},x}()},379:e=>{"use strict";var t=[];function n(e){for(var n=-1,r=0;r<t.length;r++)if(t[r].identifier===e){n=r;break}return n}function r(e,r){for(var i={},a=[],s=0;s<e.length;s++){var c=e[s],l=r.base?c[0]+r.base:c[0],u=i[l]||0,d="".concat(l," ").concat(u);i[l]=u+1;var f=n(d),p={css:c[1],media:c[2],sourceMap:c[3],supports:c[4],layer:c[5]};if(-1!==f)t[f].references++,t[f].updater(p);else{var h=o(p,r);r.byIndex=s,t.splice(s,0,{identifier:d,updater:h,references:1})}a.push(d)}return a}function o(e,t){var n=t.domAPI(t);return n.update(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap&&t.supports===e.supports&&t.layer===e.layer)return;n.update(e=t)}else n.remove()}}e.exports=function(e,o){var i=r(e=e||[],o=o||{});return function(e){e=e||[];for(var a=0;a<i.length;a++){var s=n(i[a]);t[s].references--}for(var c=r(e,o),l=0;l<i.length;l++){var u=n(i[l]);0===t[u].references&&(t[u].updater(),t.splice(u,1))}i=c}}},569:e=>{"use strict";var t={};e.exports=function(e,n){var r=function(e){if(void 0===t[e]){var n=document.querySelector(e);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(e){n=null}t[e]=n}return t[e]}(e);if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(n)}},216:e=>{"use strict";e.exports=function(e){var t=document.createElement("style");return e.setAttributes(t,e.attributes),e.insert(t,e.options),t}},565:(e,t,n)=>{"use strict";e.exports=function(e){var t=n.nc;t&&e.setAttribute("nonce",t)}},795:e=>{"use strict";e.exports=function(e){if("undefined"==typeof document)return{update:function(){},remove:function(){}};var t=e.insertStyleElement(e);return{update:function(n){!function(e,t,n){var r="";n.supports&&(r+="@supports (".concat(n.supports,") {")),n.media&&(r+="@media ".concat(n.media," {"));var o=void 0!==n.layer;o&&(r+="@layer".concat(n.layer.length>0?" ".concat(n.layer):""," {")),r+=n.css,o&&(r+="}"),n.media&&(r+="}"),n.supports&&(r+="}");var i=n.sourceMap;i&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(i))))," */")),t.styleTagTransform(r,e,t.options)}(t,e,n)},remove:function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(t)}}}},589:e=>{"use strict";e.exports=function(e,t){if(t.styleSheet)t.styleSheet.cssText=e;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(e))}}},74:(e,t,n)=>{"use strict";e.exports=n.p+"3582a46336266fb7996a.jpg"}},n={};function r(e){var o=n[e];if(void 0!==o)return o.exports;var i=n[e]={id:e,exports:{}};return t[e].call(i.exports,i,i.exports,r),i.exports}r.m=t,r.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return r.d(t,{a:t}),t},r.d=(e,t)=>{for(var n in t)r.o(t,n)&&!r.o(e,n)&&Object.defineProperty(e,n,{enumerable:!0,get:t[n]})},r.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),r.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),(()=>{var e;r.g.importScripts&&(e=r.g.location+"");var t=r.g.document;if(!e&&t&&(t.currentScript&&(e=t.currentScript.src),!e)){var n=t.getElementsByTagName("script");if(n.length)for(var o=n.length-1;o>-1&&!e;)e=n[o--].src}if(!e)throw new Error("Automatic publicPath is not supported in this browser");e=e.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),r.p=e})(),r.b=document.baseURI||self.location.href,r.nc=void 0,(()=>{"use strict";var t=r(379),n=r.n(t),o=r(795),i=r.n(o),a=r(569),s=r.n(a),c=r(565),l=r.n(c),u=r(216),d=r.n(u),f=r(589),p=r.n(f),h=r(426),A={};A.styleTagTransform=p(),A.setAttributes=l(),A.insert=s().bind(null,"head"),A.domAPI=i(),A.insertStyleElement=d(),n()(h.Z,A),h.Z&&h.Z.locals&&h.Z.locals;var m=r(523),g={};g.styleTagTransform=p(),g.setAttributes=l(),g.insert=s().bind(null,"head"),g.domAPI=i(),g.insertStyleElement=d(),n()(m.Z,g),m.Z&&m.Z.locals&&m.Z.locals;var y=r(306),C={};function w(e,t){return function(){return e.apply(t,arguments)}}C.styleTagTransform=p(),C.setAttributes=l(),C.insert=s().bind(null,"head"),C.domAPI=i(),C.insertStyleElement=d(),n()(y.Z,C),y.Z&&y.Z.locals&&y.Z.locals;const{toString:b}=Object.prototype,{getPrototypeOf:x}=Object,v=(I=Object.create(null),e=>{const t=b.call(e);return I[t]||(I[t]=t.slice(8,-1).toLowerCase())});var I;const B=e=>(e=e.toLowerCase(),t=>v(t)===e),S=e=>t=>typeof t===e,{isArray:E}=Array,O=S("undefined"),D=B("ArrayBuffer"),T=S("string"),R=S("function"),L=S("number"),j=e=>null!==e&&"object"==typeof e,N=e=>{if("object"!==v(e))return!1;const t=x(e);return!(null!==t&&t!==Object.prototype&&null!==Object.getPrototypeOf(t)||Symbol.toStringTag in e||Symbol.iterator in e)},k=B("Date"),M=B("File"),U=B("Blob"),$=B("FileList"),_=B("URLSearchParams");function F(e,t,{allOwnKeys:n=!1}={}){if(null==e)return;let r,o;if("object"!=typeof e&&(e=[e]),E(e))for(r=0,o=e.length;r<o;r++)t.call(null,e[r],r,e);else{const o=n?Object.getOwnPropertyNames(e):Object.keys(e),i=o.length;let a;for(r=0;r<i;r++)a=o[r],t.call(null,e[a],a,e)}}function P(e,t){t=t.toLowerCase();const n=Object.keys(e);let r,o=n.length;for(;o-- >0;)if(r=n[o],t===r.toLowerCase())return r;return null}const z="undefined"!=typeof globalThis?globalThis:"undefined"!=typeof self?self:"undefined"!=typeof window?window:global,q=e=>!O(e)&&e!==z,Y=(H="undefined"!=typeof Uint8Array&&x(Uint8Array),e=>H&&e instanceof H);var H;const Z=B("HTMLFormElement"),J=(({hasOwnProperty:e})=>(t,n)=>e.call(t,n))(Object.prototype),Q=B("RegExp"),W=(e,t)=>{const n=Object.getOwnPropertyDescriptors(e),r={};F(n,((n,o)=>{!1!==t(n,o,e)&&(r[o]=n)})),Object.defineProperties(e,r)},G="abcdefghijklmnopqrstuvwxyz",V="0123456789",K={DIGIT:V,ALPHA:G,ALPHA_DIGIT:G+G.toUpperCase()+V},X=B("AsyncFunction"),ee={isArray:E,isArrayBuffer:D,isBuffer:function(e){return null!==e&&!O(e)&&null!==e.constructor&&!O(e.constructor)&&R(e.constructor.isBuffer)&&e.constructor.isBuffer(e)},isFormData:e=>{let t;return e&&("function"==typeof FormData&&e instanceof FormData||R(e.append)&&("formdata"===(t=v(e))||"object"===t&&R(e.toString)&&"[object FormData]"===e.toString()))},isArrayBufferView:function(e){let t;return t="undefined"!=typeof ArrayBuffer&&ArrayBuffer.isView?ArrayBuffer.isView(e):e&&e.buffer&&D(e.buffer),t},isString:T,isNumber:L,isBoolean:e=>!0===e||!1===e,isObject:j,isPlainObject:N,isUndefined:O,isDate:k,isFile:M,isBlob:U,isRegExp:Q,isFunction:R,isStream:e=>j(e)&&R(e.pipe),isURLSearchParams:_,isTypedArray:Y,isFileList:$,forEach:F,merge:function e(){const{caseless:t}=q(this)&&this||{},n={},r=(r,o)=>{const i=t&&P(n,o)||o;N(n[i])&&N(r)?n[i]=e(n[i],r):N(r)?n[i]=e({},r):E(r)?n[i]=r.slice():n[i]=r};for(let e=0,t=arguments.length;e<t;e++)arguments[e]&&F(arguments[e],r);return n},extend:(e,t,n,{allOwnKeys:r}={})=>(F(t,((t,r)=>{n&&R(t)?e[r]=w(t,n):e[r]=t}),{allOwnKeys:r}),e),trim:e=>e.trim?e.trim():e.replace(/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g,""),stripBOM:e=>(65279===e.charCodeAt(0)&&(e=e.slice(1)),e),inherits:(e,t,n,r)=>{e.prototype=Object.create(t.prototype,r),e.prototype.constructor=e,Object.defineProperty(e,"super",{value:t.prototype}),n&&Object.assign(e.prototype,n)},toFlatObject:(e,t,n,r)=>{let o,i,a;const s={};if(t=t||{},null==e)return t;do{for(o=Object.getOwnPropertyNames(e),i=o.length;i-- >0;)a=o[i],r&&!r(a,e,t)||s[a]||(t[a]=e[a],s[a]=!0);e=!1!==n&&x(e)}while(e&&(!n||n(e,t))&&e!==Object.prototype);return t},kindOf:v,kindOfTest:B,endsWith:(e,t,n)=>{e=String(e),(void 0===n||n>e.length)&&(n=e.length),n-=t.length;const r=e.indexOf(t,n);return-1!==r&&r===n},toArray:e=>{if(!e)return null;if(E(e))return e;let t=e.length;if(!L(t))return null;const n=new Array(t);for(;t-- >0;)n[t]=e[t];return n},forEachEntry:(e,t)=>{const n=(e&&e[Symbol.iterator]).call(e);let r;for(;(r=n.next())&&!r.done;){const n=r.value;t.call(e,n[0],n[1])}},matchAll:(e,t)=>{let n;const r=[];for(;null!==(n=e.exec(t));)r.push(n);return r},isHTMLForm:Z,hasOwnProperty:J,hasOwnProp:J,reduceDescriptors:W,freezeMethods:e=>{W(e,((t,n)=>{if(R(e)&&-1!==["arguments","caller","callee"].indexOf(n))return!1;const r=e[n];R(r)&&(t.enumerable=!1,"writable"in t?t.writable=!1:t.set||(t.set=()=>{throw Error("Can not rewrite read-only method '"+n+"'")}))}))},toObjectSet:(e,t)=>{const n={},r=e=>{e.forEach((e=>{n[e]=!0}))};return E(e)?r(e):r(String(e).split(t)),n},toCamelCase:e=>e.toLowerCase().replace(/[-_\s]([a-z\d])(\w*)/g,(function(e,t,n){return t.toUpperCase()+n})),noop:()=>{},toFiniteNumber:(e,t)=>(e=+e,Number.isFinite(e)?e:t),findKey:P,global:z,isContextDefined:q,ALPHABET:K,generateString:(e=16,t=K.ALPHA_DIGIT)=>{let n="";const{length:r}=t;for(;e--;)n+=t[Math.random()*r|0];return n},isSpecCompliantForm:function(e){return!!(e&&R(e.append)&&"FormData"===e[Symbol.toStringTag]&&e[Symbol.iterator])},toJSONObject:e=>{const t=new Array(10),n=(e,r)=>{if(j(e)){if(t.indexOf(e)>=0)return;if(!("toJSON"in e)){t[r]=e;const o=E(e)?[]:{};return F(e,((e,t)=>{const i=n(e,r+1);!O(i)&&(o[t]=i)})),t[r]=void 0,o}}return e};return n(e,0)},isAsyncFn:X,isThenable:e=>e&&(j(e)||R(e))&&R(e.then)&&R(e.catch)};function te(e,t,n,r,o){Error.call(this),Error.captureStackTrace?Error.captureStackTrace(this,this.constructor):this.stack=(new Error).stack,this.message=e,this.name="AxiosError",t&&(this.code=t),n&&(this.config=n),r&&(this.request=r),o&&(this.response=o)}ee.inherits(te,Error,{toJSON:function(){return{message:this.message,name:this.name,description:this.description,number:this.number,fileName:this.fileName,lineNumber:this.lineNumber,columnNumber:this.columnNumber,stack:this.stack,config:ee.toJSONObject(this.config),code:this.code,status:this.response&&this.response.status?this.response.status:null}}});const ne=te.prototype,re={};["ERR_BAD_OPTION_VALUE","ERR_BAD_OPTION","ECONNABORTED","ETIMEDOUT","ERR_NETWORK","ERR_FR_TOO_MANY_REDIRECTS","ERR_DEPRECATED","ERR_BAD_RESPONSE","ERR_BAD_REQUEST","ERR_CANCELED","ERR_NOT_SUPPORT","ERR_INVALID_URL"].forEach((e=>{re[e]={value:e}})),Object.defineProperties(te,re),Object.defineProperty(ne,"isAxiosError",{value:!0}),te.from=(e,t,n,r,o,i)=>{const a=Object.create(ne);return ee.toFlatObject(e,a,(function(e){return e!==Error.prototype}),(e=>"isAxiosError"!==e)),te.call(a,e.message,t,n,r,o),a.cause=e,a.name=e.name,i&&Object.assign(a,i),a};const oe=te;function ie(e){return ee.isPlainObject(e)||ee.isArray(e)}function ae(e){return ee.endsWith(e,"[]")?e.slice(0,-2):e}function se(e,t,n){return e?e.concat(t).map((function(e,t){return e=ae(e),!n&&t?"["+e+"]":e})).join(n?".":""):t}const ce=ee.toFlatObject(ee,{},null,(function(e){return/^is[A-Z]/.test(e)})),le=function(e,t,n){if(!ee.isObject(e))throw new TypeError("target must be an object");t=t||new FormData;const r=(n=ee.toFlatObject(n,{metaTokens:!0,dots:!1,indexes:!1},!1,(function(e,t){return!ee.isUndefined(t[e])}))).metaTokens,o=n.visitor||l,i=n.dots,a=n.indexes,s=(n.Blob||"undefined"!=typeof Blob&&Blob)&&ee.isSpecCompliantForm(t);if(!ee.isFunction(o))throw new TypeError("visitor must be a function");function c(e){if(null===e)return"";if(ee.isDate(e))return e.toISOString();if(!s&&ee.isBlob(e))throw new oe("Blob is not supported. Use a Buffer instead.");return ee.isArrayBuffer(e)||ee.isTypedArray(e)?s&&"function"==typeof Blob?new Blob([e]):Buffer.from(e):e}function l(e,n,o){let s=e;if(e&&!o&&"object"==typeof e)if(ee.endsWith(n,"{}"))n=r?n:n.slice(0,-2),e=JSON.stringify(e);else if(ee.isArray(e)&&function(e){return ee.isArray(e)&&!e.some(ie)}(e)||(ee.isFileList(e)||ee.endsWith(n,"[]"))&&(s=ee.toArray(e)))return n=ae(n),s.forEach((function(e,r){!ee.isUndefined(e)&&null!==e&&t.append(!0===a?se([n],r,i):null===a?n:n+"[]",c(e))})),!1;return!!ie(e)||(t.append(se(o,n,i),c(e)),!1)}const u=[],d=Object.assign(ce,{defaultVisitor:l,convertValue:c,isVisitable:ie});if(!ee.isObject(e))throw new TypeError("data must be an object");return function e(n,r){if(!ee.isUndefined(n)){if(-1!==u.indexOf(n))throw Error("Circular reference detected in "+r.join("."));u.push(n),ee.forEach(n,(function(n,i){!0===(!(ee.isUndefined(n)||null===n)&&o.call(t,n,ee.isString(i)?i.trim():i,r,d))&&e(n,r?r.concat(i):[i])})),u.pop()}}(e),t};function ue(e){const t={"!":"%21","'":"%27","(":"%28",")":"%29","~":"%7E","%20":"+","%00":"\0"};return encodeURIComponent(e).replace(/[!'()~]|%20|%00/g,(function(e){return t[e]}))}function de(e,t){this._pairs=[],e&&le(e,this,t)}const fe=de.prototype;fe.append=function(e,t){this._pairs.push([e,t])},fe.toString=function(e){const t=e?function(t){return e.call(this,t,ue)}:ue;return this._pairs.map((function(e){return t(e[0])+"="+t(e[1])}),"").join("&")};const pe=de;function he(e){return encodeURIComponent(e).replace(/%3A/gi,":").replace(/%24/g,"$").replace(/%2C/gi,",").replace(/%20/g,"+").replace(/%5B/gi,"[").replace(/%5D/gi,"]")}function Ae(e,t,n){if(!t)return e;const r=n&&n.encode||he,o=n&&n.serialize;let i;if(i=o?o(t,n):ee.isURLSearchParams(t)?t.toString():new pe(t,n).toString(r),i){const t=e.indexOf("#");-1!==t&&(e=e.slice(0,t)),e+=(-1===e.indexOf("?")?"?":"&")+i}return e}const me=class{constructor(){this.handlers=[]}use(e,t,n){return this.handlers.push({fulfilled:e,rejected:t,synchronous:!!n&&n.synchronous,runWhen:n?n.runWhen:null}),this.handlers.length-1}eject(e){this.handlers[e]&&(this.handlers[e]=null)}clear(){this.handlers&&(this.handlers=[])}forEach(e){ee.forEach(this.handlers,(function(t){null!==t&&e(t)}))}},ge={silentJSONParsing:!0,forcedJSONParsing:!0,clarifyTimeoutError:!1},ye={isBrowser:!0,classes:{URLSearchParams:"undefined"!=typeof URLSearchParams?URLSearchParams:pe,FormData:"undefined"!=typeof FormData?FormData:null,Blob:"undefined"!=typeof Blob?Blob:null},isStandardBrowserEnv:(()=>{let e;return("undefined"==typeof navigator||"ReactNative"!==(e=navigator.product)&&"NativeScript"!==e&&"NS"!==e)&&"undefined"!=typeof window&&"undefined"!=typeof document})(),isStandardBrowserWebWorkerEnv:"undefined"!=typeof WorkerGlobalScope&&self instanceof WorkerGlobalScope&&"function"==typeof self.importScripts,protocols:["http","https","file","blob","url","data"]},Ce=function(e){function t(e,n,r,o){let i=e[o++];const a=Number.isFinite(+i),s=o>=e.length;return i=!i&&ee.isArray(r)?r.length:i,s?(ee.hasOwnProp(r,i)?r[i]=[r[i],n]:r[i]=n,!a):(r[i]&&ee.isObject(r[i])||(r[i]=[]),t(e,n,r[i],o)&&ee.isArray(r[i])&&(r[i]=function(e){const t={},n=Object.keys(e);let r;const o=n.length;let i;for(r=0;r<o;r++)i=n[r],t[i]=e[i];return t}(r[i])),!a)}if(ee.isFormData(e)&&ee.isFunction(e.entries)){const n={};return ee.forEachEntry(e,((e,r)=>{t(function(e){return ee.matchAll(/\w+|\[(\w*)]/g,e).map((e=>"[]"===e[0]?"":e[1]||e[0]))}(e),r,n,0)})),n}return null},we={"Content-Type":void 0},be={transitional:ge,adapter:["xhr","http"],transformRequest:[function(e,t){const n=t.getContentType()||"",r=n.indexOf("application/json")>-1,o=ee.isObject(e);if(o&&ee.isHTMLForm(e)&&(e=new FormData(e)),ee.isFormData(e))return r&&r?JSON.stringify(Ce(e)):e;if(ee.isArrayBuffer(e)||ee.isBuffer(e)||ee.isStream(e)||ee.isFile(e)||ee.isBlob(e))return e;if(ee.isArrayBufferView(e))return e.buffer;if(ee.isURLSearchParams(e))return t.setContentType("application/x-www-form-urlencoded;charset=utf-8",!1),e.toString();let i;if(o){if(n.indexOf("application/x-www-form-urlencoded")>-1)return function(e,t){return le(e,new ye.classes.URLSearchParams,Object.assign({visitor:function(e,t,n,r){return ye.isNode&&ee.isBuffer(e)?(this.append(t,e.toString("base64")),!1):r.defaultVisitor.apply(this,arguments)}},t))}(e,this.formSerializer).toString();if((i=ee.isFileList(e))||n.indexOf("multipart/form-data")>-1){const t=this.env&&this.env.FormData;return le(i?{"files[]":e}:e,t&&new t,this.formSerializer)}}return o||r?(t.setContentType("application/json",!1),function(e,t,n){if(ee.isString(e))try{return(0,JSON.parse)(e),ee.trim(e)}catch(e){if("SyntaxError"!==e.name)throw e}return(0,JSON.stringify)(e)}(e)):e}],transformResponse:[function(e){const t=this.transitional||be.transitional,n=t&&t.forcedJSONParsing,r="json"===this.responseType;if(e&&ee.isString(e)&&(n&&!this.responseType||r)){const n=!(t&&t.silentJSONParsing)&&r;try{return JSON.parse(e)}catch(e){if(n){if("SyntaxError"===e.name)throw oe.from(e,oe.ERR_BAD_RESPONSE,this,null,this.response);throw e}}}return e}],timeout:0,xsrfCookieName:"XSRF-TOKEN",xsrfHeaderName:"X-XSRF-TOKEN",maxContentLength:-1,maxBodyLength:-1,env:{FormData:ye.classes.FormData,Blob:ye.classes.Blob},validateStatus:function(e){return e>=200&&e<300},headers:{common:{Accept:"application/json, text/plain, */*"}}};ee.forEach(["delete","get","head"],(function(e){be.headers[e]={}})),ee.forEach(["post","put","patch"],(function(e){be.headers[e]=ee.merge(we)}));const xe=be,ve=ee.toObjectSet(["age","authorization","content-length","content-type","etag","expires","from","host","if-modified-since","if-unmodified-since","last-modified","location","max-forwards","proxy-authorization","referer","retry-after","user-agent"]),Ie=Symbol("internals");function Be(e){return e&&String(e).trim().toLowerCase()}function Se(e){return!1===e||null==e?e:ee.isArray(e)?e.map(Se):String(e)}function Ee(e,t,n,r,o){return ee.isFunction(r)?r.call(this,t,n):(o&&(t=n),ee.isString(t)?ee.isString(r)?-1!==t.indexOf(r):ee.isRegExp(r)?r.test(t):void 0:void 0)}class Oe{constructor(e){e&&this.set(e)}set(e,t,n){const r=this;function o(e,t,n){const o=Be(t);if(!o)throw new Error("header name must be a non-empty string");const i=ee.findKey(r,o);(!i||void 0===r[i]||!0===n||void 0===n&&!1!==r[i])&&(r[i||t]=Se(e))}const i=(e,t)=>ee.forEach(e,((e,n)=>o(e,n,t)));return ee.isPlainObject(e)||e instanceof this.constructor?i(e,t):ee.isString(e)&&(e=e.trim())&&!/^[-_a-zA-Z0-9^`|~,!#$%&'*+.]+$/.test(e.trim())?i((e=>{const t={};let n,r,o;return e&&e.split("\n").forEach((function(e){o=e.indexOf(":"),n=e.substring(0,o).trim().toLowerCase(),r=e.substring(o+1).trim(),!n||t[n]&&ve[n]||("set-cookie"===n?t[n]?t[n].push(r):t[n]=[r]:t[n]=t[n]?t[n]+", "+r:r)})),t})(e),t):null!=e&&o(t,e,n),this}get(e,t){if(e=Be(e)){const n=ee.findKey(this,e);if(n){const e=this[n];if(!t)return e;if(!0===t)return function(e){const t=Object.create(null),n=/([^\s,;=]+)\s*(?:=\s*([^,;]+))?/g;let r;for(;r=n.exec(e);)t[r[1]]=r[2];return t}(e);if(ee.isFunction(t))return t.call(this,e,n);if(ee.isRegExp(t))return t.exec(e);throw new TypeError("parser must be boolean|regexp|function")}}}has(e,t){if(e=Be(e)){const n=ee.findKey(this,e);return!(!n||void 0===this[n]||t&&!Ee(0,this[n],n,t))}return!1}delete(e,t){const n=this;let r=!1;function o(e){if(e=Be(e)){const o=ee.findKey(n,e);!o||t&&!Ee(0,n[o],o,t)||(delete n[o],r=!0)}}return ee.isArray(e)?e.forEach(o):o(e),r}clear(e){const t=Object.keys(this);let n=t.length,r=!1;for(;n--;){const o=t[n];e&&!Ee(0,this[o],o,e,!0)||(delete this[o],r=!0)}return r}normalize(e){const t=this,n={};return ee.forEach(this,((r,o)=>{const i=ee.findKey(n,o);if(i)return t[i]=Se(r),void delete t[o];const a=e?function(e){return e.trim().toLowerCase().replace(/([a-z\d])(\w*)/g,((e,t,n)=>t.toUpperCase()+n))}(o):String(o).trim();a!==o&&delete t[o],t[a]=Se(r),n[a]=!0})),this}concat(...e){return this.constructor.concat(this,...e)}toJSON(e){const t=Object.create(null);return ee.forEach(this,((n,r)=>{null!=n&&!1!==n&&(t[r]=e&&ee.isArray(n)?n.join(", "):n)})),t}[Symbol.iterator](){return Object.entries(this.toJSON())[Symbol.iterator]()}toString(){return Object.entries(this.toJSON()).map((([e,t])=>e+": "+t)).join("\n")}get[Symbol.toStringTag](){return"AxiosHeaders"}static from(e){return e instanceof this?e:new this(e)}static concat(e,...t){const n=new this(e);return t.forEach((e=>n.set(e))),n}static accessor(e){const t=(this[Ie]=this[Ie]={accessors:{}}).accessors,n=this.prototype;function r(e){const r=Be(e);t[r]||(function(e,t){const n=ee.toCamelCase(" "+t);["get","set","has"].forEach((r=>{Object.defineProperty(e,r+n,{value:function(e,n,o){return this[r].call(this,t,e,n,o)},configurable:!0})}))}(n,e),t[r]=!0)}return ee.isArray(e)?e.forEach(r):r(e),this}}Oe.accessor(["Content-Type","Content-Length","Accept","Accept-Encoding","User-Agent","Authorization"]),ee.freezeMethods(Oe.prototype),ee.freezeMethods(Oe);const De=Oe;function Te(e,t){const n=this||xe,r=t||n,o=De.from(r.headers);let i=r.data;return ee.forEach(e,(function(e){i=e.call(n,i,o.normalize(),t?t.status:void 0)})),o.normalize(),i}function Re(e){return!(!e||!e.__CANCEL__)}function Le(e,t,n){oe.call(this,null==e?"canceled":e,oe.ERR_CANCELED,t,n),this.name="CanceledError"}ee.inherits(Le,oe,{__CANCEL__:!0});const je=Le,Ne=ye.isStandardBrowserEnv?{write:function(e,t,n,r,o,i){const a=[];a.push(e+"="+encodeURIComponent(t)),ee.isNumber(n)&&a.push("expires="+new Date(n).toGMTString()),ee.isString(r)&&a.push("path="+r),ee.isString(o)&&a.push("domain="+o),!0===i&&a.push("secure"),document.cookie=a.join("; ")},read:function(e){const t=document.cookie.match(new RegExp("(^|;\\s*)("+e+")=([^;]*)"));return t?decodeURIComponent(t[3]):null},remove:function(e){this.write(e,"",Date.now()-864e5)}}:{write:function(){},read:function(){return null},remove:function(){}};function ke(e,t){return e&&!/^([a-z][a-z\d+\-.]*:)?\/\//i.test(t)?function(e,t){return t?e.replace(/\/+$/,"")+"/"+t.replace(/^\/+/,""):e}(e,t):t}const Me=ye.isStandardBrowserEnv?function(){const e=/(msie|trident)/i.test(navigator.userAgent),t=document.createElement("a");let n;function r(n){let r=n;return e&&(t.setAttribute("href",r),r=t.href),t.setAttribute("href",r),{href:t.href,protocol:t.protocol?t.protocol.replace(/:$/,""):"",host:t.host,search:t.search?t.search.replace(/^\?/,""):"",hash:t.hash?t.hash.replace(/^#/,""):"",hostname:t.hostname,port:t.port,pathname:"/"===t.pathname.charAt(0)?t.pathname:"/"+t.pathname}}return n=r(window.location.href),function(e){const t=ee.isString(e)?r(e):e;return t.protocol===n.protocol&&t.host===n.host}}():function(){return!0};function Ue(e,t){let n=0;const r=function(e,t){e=e||10;const n=new Array(e),r=new Array(e);let o,i=0,a=0;return t=void 0!==t?t:1e3,function(s){const c=Date.now(),l=r[a];o||(o=c),n[i]=s,r[i]=c;let u=a,d=0;for(;u!==i;)d+=n[u++],u%=e;if(i=(i+1)%e,i===a&&(a=(a+1)%e),c-o<t)return;const f=l&&c-l;return f?Math.round(1e3*d/f):void 0}}(50,250);return o=>{const i=o.loaded,a=o.lengthComputable?o.total:void 0,s=i-n,c=r(s);n=i;const l={loaded:i,total:a,progress:a?i/a:void 0,bytes:s,rate:c||void 0,estimated:c&&a&&i<=a?(a-i)/c:void 0,event:o};l[t?"download":"upload"]=!0,e(l)}}const $e={http:null,xhr:"undefined"!=typeof XMLHttpRequest&&function(e){return new Promise((function(t,n){let r=e.data;const o=De.from(e.headers).normalize(),i=e.responseType;let a;function s(){e.cancelToken&&e.cancelToken.unsubscribe(a),e.signal&&e.signal.removeEventListener("abort",a)}ee.isFormData(r)&&(ye.isStandardBrowserEnv||ye.isStandardBrowserWebWorkerEnv?o.setContentType(!1):o.setContentType("multipart/form-data;",!1));let c=new XMLHttpRequest;if(e.auth){const t=e.auth.username||"",n=e.auth.password?unescape(encodeURIComponent(e.auth.password)):"";o.set("Authorization","Basic "+btoa(t+":"+n))}const l=ke(e.baseURL,e.url);function u(){if(!c)return;const r=De.from("getAllResponseHeaders"in c&&c.getAllResponseHeaders());!function(e,t,n){const r=n.config.validateStatus;n.status&&r&&!r(n.status)?t(new oe("Request failed with status code "+n.status,[oe.ERR_BAD_REQUEST,oe.ERR_BAD_RESPONSE][Math.floor(n.status/100)-4],n.config,n.request,n)):e(n)}((function(e){t(e),s()}),(function(e){n(e),s()}),{data:i&&"text"!==i&&"json"!==i?c.response:c.responseText,status:c.status,statusText:c.statusText,headers:r,config:e,request:c}),c=null}if(c.open(e.method.toUpperCase(),Ae(l,e.params,e.paramsSerializer),!0),c.timeout=e.timeout,"onloadend"in c?c.onloadend=u:c.onreadystatechange=function(){c&&4===c.readyState&&(0!==c.status||c.responseURL&&0===c.responseURL.indexOf("file:"))&&setTimeout(u)},c.onabort=function(){c&&(n(new oe("Request aborted",oe.ECONNABORTED,e,c)),c=null)},c.onerror=function(){n(new oe("Network Error",oe.ERR_NETWORK,e,c)),c=null},c.ontimeout=function(){let t=e.timeout?"timeout of "+e.timeout+"ms exceeded":"timeout exceeded";const r=e.transitional||ge;e.timeoutErrorMessage&&(t=e.timeoutErrorMessage),n(new oe(t,r.clarifyTimeoutError?oe.ETIMEDOUT:oe.ECONNABORTED,e,c)),c=null},ye.isStandardBrowserEnv){const t=(e.withCredentials||Me(l))&&e.xsrfCookieName&&Ne.read(e.xsrfCookieName);t&&o.set(e.xsrfHeaderName,t)}void 0===r&&o.setContentType(null),"setRequestHeader"in c&&ee.forEach(o.toJSON(),(function(e,t){c.setRequestHeader(t,e)})),ee.isUndefined(e.withCredentials)||(c.withCredentials=!!e.withCredentials),i&&"json"!==i&&(c.responseType=e.responseType),"function"==typeof e.onDownloadProgress&&c.addEventListener("progress",Ue(e.onDownloadProgress,!0)),"function"==typeof e.onUploadProgress&&c.upload&&c.upload.addEventListener("progress",Ue(e.onUploadProgress)),(e.cancelToken||e.signal)&&(a=t=>{c&&(n(!t||t.type?new je(null,e,c):t),c.abort(),c=null)},e.cancelToken&&e.cancelToken.subscribe(a),e.signal&&(e.signal.aborted?a():e.signal.addEventListener("abort",a)));const d=function(e){const t=/^([-+\w]{1,25})(:?\/\/|:)/.exec(e);return t&&t[1]||""}(l);d&&-1===ye.protocols.indexOf(d)?n(new oe("Unsupported protocol "+d+":",oe.ERR_BAD_REQUEST,e)):c.send(r||null)}))}};ee.forEach($e,((e,t)=>{if(e){try{Object.defineProperty(e,"name",{value:t})}catch(e){}Object.defineProperty(e,"adapterName",{value:t})}}));function _e(e){if(e.cancelToken&&e.cancelToken.throwIfRequested(),e.signal&&e.signal.aborted)throw new je(null,e)}function Fe(e){return _e(e),e.headers=De.from(e.headers),e.data=Te.call(e,e.transformRequest),-1!==["post","put","patch"].indexOf(e.method)&&e.headers.setContentType("application/x-www-form-urlencoded",!1),(e=>{e=ee.isArray(e)?e:[e];const{length:t}=e;let n,r;for(let o=0;o<t&&(n=e[o],!(r=ee.isString(n)?$e[n.toLowerCase()]:n));o++);if(!r){if(!1===r)throw new oe(`Adapter ${n} is not supported by the environment`,"ERR_NOT_SUPPORT");throw new Error(ee.hasOwnProp($e,n)?`Adapter '${n}' is not available in the build`:`Unknown adapter '${n}'`)}if(!ee.isFunction(r))throw new TypeError("adapter is not a function");return r})(e.adapter||xe.adapter)(e).then((function(t){return _e(e),t.data=Te.call(e,e.transformResponse,t),t.headers=De.from(t.headers),t}),(function(t){return Re(t)||(_e(e),t&&t.response&&(t.response.data=Te.call(e,e.transformResponse,t.response),t.response.headers=De.from(t.response.headers))),Promise.reject(t)}))}const Pe=e=>e instanceof De?e.toJSON():e;function ze(e,t){t=t||{};const n={};function r(e,t,n){return ee.isPlainObject(e)&&ee.isPlainObject(t)?ee.merge.call({caseless:n},e,t):ee.isPlainObject(t)?ee.merge({},t):ee.isArray(t)?t.slice():t}function o(e,t,n){return ee.isUndefined(t)?ee.isUndefined(e)?void 0:r(void 0,e,n):r(e,t,n)}function i(e,t){if(!ee.isUndefined(t))return r(void 0,t)}function a(e,t){return ee.isUndefined(t)?ee.isUndefined(e)?void 0:r(void 0,e):r(void 0,t)}function s(n,o,i){return i in t?r(n,o):i in e?r(void 0,n):void 0}const c={url:i,method:i,data:i,baseURL:a,transformRequest:a,transformResponse:a,paramsSerializer:a,timeout:a,timeoutMessage:a,withCredentials:a,adapter:a,responseType:a,xsrfCookieName:a,xsrfHeaderName:a,onUploadProgress:a,onDownloadProgress:a,decompress:a,maxContentLength:a,maxBodyLength:a,beforeRedirect:a,transport:a,httpAgent:a,httpsAgent:a,cancelToken:a,socketPath:a,responseEncoding:a,validateStatus:s,headers:(e,t)=>o(Pe(e),Pe(t),!0)};return ee.forEach(Object.keys(Object.assign({},e,t)),(function(r){const i=c[r]||o,a=i(e[r],t[r],r);ee.isUndefined(a)&&i!==s||(n[r]=a)})),n}const qe={};["object","boolean","number","function","string","symbol"].forEach(((e,t)=>{qe[e]=function(n){return typeof n===e||"a"+(t<1?"n ":" ")+e}}));const Ye={};qe.transitional=function(e,t,n){function r(e,t){return"[Axios v1.4.0] Transitional option '"+e+"'"+t+(n?". "+n:"")}return(n,o,i)=>{if(!1===e)throw new oe(r(o," has been removed"+(t?" in "+t:"")),oe.ERR_DEPRECATED);return t&&!Ye[o]&&(Ye[o]=!0,console.warn(r(o," has been deprecated since v"+t+" and will be removed in the near future"))),!e||e(n,o,i)}};const He={assertOptions:function(e,t,n){if("object"!=typeof e)throw new oe("options must be an object",oe.ERR_BAD_OPTION_VALUE);const r=Object.keys(e);let o=r.length;for(;o-- >0;){const i=r[o],a=t[i];if(a){const t=e[i],n=void 0===t||a(t,i,e);if(!0!==n)throw new oe("option "+i+" must be "+n,oe.ERR_BAD_OPTION_VALUE)}else if(!0!==n)throw new oe("Unknown option "+i,oe.ERR_BAD_OPTION)}},validators:qe},Ze=He.validators;class Je{constructor(e){this.defaults=e,this.interceptors={request:new me,response:new me}}request(e,t){"string"==typeof e?(t=t||{}).url=e:t=e||{},t=ze(this.defaults,t);const{transitional:n,paramsSerializer:r,headers:o}=t;let i;void 0!==n&&He.assertOptions(n,{silentJSONParsing:Ze.transitional(Ze.boolean),forcedJSONParsing:Ze.transitional(Ze.boolean),clarifyTimeoutError:Ze.transitional(Ze.boolean)},!1),null!=r&&(ee.isFunction(r)?t.paramsSerializer={serialize:r}:He.assertOptions(r,{encode:Ze.function,serialize:Ze.function},!0)),t.method=(t.method||this.defaults.method||"get").toLowerCase(),i=o&&ee.merge(o.common,o[t.method]),i&&ee.forEach(["delete","get","head","post","put","patch","common"],(e=>{delete o[e]})),t.headers=De.concat(i,o);const a=[];let s=!0;this.interceptors.request.forEach((function(e){"function"==typeof e.runWhen&&!1===e.runWhen(t)||(s=s&&e.synchronous,a.unshift(e.fulfilled,e.rejected))}));const c=[];let l;this.interceptors.response.forEach((function(e){c.push(e.fulfilled,e.rejected)}));let u,d=0;if(!s){const e=[Fe.bind(this),void 0];for(e.unshift.apply(e,a),e.push.apply(e,c),u=e.length,l=Promise.resolve(t);d<u;)l=l.then(e[d++],e[d++]);return l}u=a.length;let f=t;for(d=0;d<u;){const e=a[d++],t=a[d++];try{f=e(f)}catch(e){t.call(this,e);break}}try{l=Fe.call(this,f)}catch(e){return Promise.reject(e)}for(d=0,u=c.length;d<u;)l=l.then(c[d++],c[d++]);return l}getUri(e){return Ae(ke((e=ze(this.defaults,e)).baseURL,e.url),e.params,e.paramsSerializer)}}ee.forEach(["delete","get","head","options"],(function(e){Je.prototype[e]=function(t,n){return this.request(ze(n||{},{method:e,url:t,data:(n||{}).data}))}})),ee.forEach(["post","put","patch"],(function(e){function t(t){return function(n,r,o){return this.request(ze(o||{},{method:e,headers:t?{"Content-Type":"multipart/form-data"}:{},url:n,data:r}))}}Je.prototype[e]=t(),Je.prototype[e+"Form"]=t(!0)}));const Qe=Je;class We{constructor(e){if("function"!=typeof e)throw new TypeError("executor must be a function.");let t;this.promise=new Promise((function(e){t=e}));const n=this;this.promise.then((e=>{if(!n._listeners)return;let t=n._listeners.length;for(;t-- >0;)n._listeners[t](e);n._listeners=null})),this.promise.then=e=>{let t;const r=new Promise((e=>{n.subscribe(e),t=e})).then(e);return r.cancel=function(){n.unsubscribe(t)},r},e((function(e,r,o){n.reason||(n.reason=new je(e,r,o),t(n.reason))}))}throwIfRequested(){if(this.reason)throw this.reason}subscribe(e){this.reason?e(this.reason):this._listeners?this._listeners.push(e):this._listeners=[e]}unsubscribe(e){if(!this._listeners)return;const t=this._listeners.indexOf(e);-1!==t&&this._listeners.splice(t,1)}static source(){let e;return{token:new We((function(t){e=t})),cancel:e}}}const Ge=We,Ve={Continue:100,SwitchingProtocols:101,Processing:102,EarlyHints:103,Ok:200,Created:201,Accepted:202,NonAuthoritativeInformation:203,NoContent:204,ResetContent:205,PartialContent:206,MultiStatus:207,AlreadyReported:208,ImUsed:226,MultipleChoices:300,MovedPermanently:301,Found:302,SeeOther:303,NotModified:304,UseProxy:305,Unused:306,TemporaryRedirect:307,PermanentRedirect:308,BadRequest:400,Unauthorized:401,PaymentRequired:402,Forbidden:403,NotFound:404,MethodNotAllowed:405,NotAcceptable:406,ProxyAuthenticationRequired:407,RequestTimeout:408,Conflict:409,Gone:410,LengthRequired:411,PreconditionFailed:412,PayloadTooLarge:413,UriTooLong:414,UnsupportedMediaType:415,RangeNotSatisfiable:416,ExpectationFailed:417,ImATeapot:418,MisdirectedRequest:421,UnprocessableEntity:422,Locked:423,FailedDependency:424,TooEarly:425,UpgradeRequired:426,PreconditionRequired:428,TooManyRequests:429,RequestHeaderFieldsTooLarge:431,UnavailableForLegalReasons:451,InternalServerError:500,NotImplemented:501,BadGateway:502,ServiceUnavailable:503,GatewayTimeout:504,HttpVersionNotSupported:505,VariantAlsoNegotiates:506,InsufficientStorage:507,LoopDetected:508,NotExtended:510,NetworkAuthenticationRequired:511};Object.entries(Ve).forEach((([e,t])=>{Ve[t]=e}));const Ke=Ve,Xe=function e(t){const n=new Qe(t),r=w(Qe.prototype.request,n);return ee.extend(r,Qe.prototype,n,{allOwnKeys:!0}),ee.extend(r,n,null,{allOwnKeys:!0}),r.create=function(n){return e(ze(t,n))},r}(xe);Xe.Axios=Qe,Xe.CanceledError=je,Xe.CancelToken=Ge,Xe.isCancel=Re,Xe.VERSION="1.4.0",Xe.toFormData=le,Xe.AxiosError=oe,Xe.Cancel=Xe.CanceledError,Xe.all=function(e){return Promise.all(e)},Xe.spread=function(e){return function(t){return e.apply(null,t)}},Xe.isAxiosError=function(e){return ee.isObject(e)&&!0===e.isAxiosError},Xe.mergeConfig=ze,Xe.AxiosHeaders=De,Xe.formToJSON=e=>Ce(ee.isHTMLForm(e)?new FormData(e):e),Xe.HttpStatusCode=Ke,Xe.default=Xe;const et=Xe;async function tt(e,t){const n=await et.get(`${e}?key=59848614b07c4c0685d152839230205&q=${t}&aqi=yes`);return 200==n.status?n:n.response}async function nt(e,t,n){const r=await et.get(`${e}?key=59848614b07c4c0685d152839230205&q=${t}&days=${n}`);return 200==r.status?r:r.response}function rt(e,t,n){const r=document.createElement("Img");return r.src=`data:image/svg+xml,%3Csvg xmlns="http%3A%2F%2Fwww.w3.org%2F2000%2Fsvg" width='${t}' height="${n}" viewBox="0 0 14 14"%3E%3Cg fill="none" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round"%3E%3Ccircle cx="2" cy="2" r="1.5"%2F%3E%3Cpath d="M13.5 1.84a6 6 0 1 0-2 11.66a6 6 0 0 0 2-.34"%2F%3E%3C%2Fg%3E%3C%2Fsvg%3E`,r.classList.add(e),r}const ot=(e,t,n)=>{const r=document.createElement("div");return r.classList.add(t,n),r.textContent=e,r},it=(e,t,n,r,o)=>{const i=document.createElement("div");return i.classList.add(e),i.append(ot(t,n),ot(r,o)),i},at=(e,t,n,r)=>{const o=document.createElement("div");return o.classList.add(n),o.append(ot(e,t,"left"),rt("imgSvg",r,r)),o},st=(e,t,n,r,o,i,a)=>{const s=document.createElement("div");return s.classList.add(o),s.append(ot(e,t,"right"),at(n,r,i,a)),s},ct=(e,t,n,r)=>{const o=document.createElement("div");return o.classList.add(n),o.append(ot(e,t,"left"),rt("imgSvg",r,r)),o};function lt(e){const t=document.createElement("div");return t.classList.add(e),t}function ut(e){const t=document.querySelector(".container"),n=lt("error-box"),r=lt("error-msg");return r.textContent=e,n.appendChild(r),t.appendChild(n),n}function dt(){var e=localStorage.getItem("country");const t=document.createElement("div");return t.classList.add("right-weather"),tt("https://api.weatherapi.com/v1/current.json",e).then((e=>{t.append(st("Feels like","more-msg",e.data.current.feelslike_c,"in-degree","right","rightDegree","30"),it("right","Humidity","more-msg",`${e.data.current.humidity}%`,"in-degree"),it("right","Wind Speed","more-msg",`${e.data.current.wind_kph}km/h`,"in-degree"),st("Wind Degree","more-msg",e.data.current.wind_degree,"in-degree","right","rightDegree","30"))})).catch((e=>{const t=ut(e.response.data.error.message);t.classList.remove("active"),setTimeout((()=>t.classList.add("active")),5e3)})),t}function ft(e,t){const n=document.createElement("Img");return n.src=`https:${t}`,n.classList.add(e),n}var pt=r(484),ht=r.n(pt);function At(e,t,n){const r=document.createElement("div");return r.classList.add(n),r.append(function(e,t){const n=document.createElement("div");return n.classList.add("day"),n.textContent=e,n}(ht()(e[t].date).format("dddd")),ct(e[t].day.avgtemp_c,"avg-degree","accord","15"),ct(e[t].day.maxtemp_c,"max-degree","accord","20"),ct(e[t].day.mintemp_c,"min-degree","accord","10"),ft("cloud-img",e[t].day.condition.icon)),r}function mt(t){const n=localStorage.getItem("country"),r=document.querySelector(".left-arrow"),o=document.querySelector(".right-arrow");r.classList.remove("arrow"),o.classList.remove("arrow"),nt("https://api.weatherapi.com/v1/forecast.json",n,"7").then((e=>{const{forecastday:n}=e.data.forecast;for(let e=0;e<n.length;e++)t.appendChild(At(n,e,"forcast"))})).catch((()=>{const t=ut(e.response.data.error.message);t.classList.remove("active"),setTimeout((()=>t.classList.add("active")),5e3)}))}function gt(){var e=localStorage.getItem("country");const t=document.createElement("div");return t.classList.add("left-weather"),tt("https://api.weatherapi.com/v1/current.json",e).then((e=>{t.append(ot("Remedy Weather","title","left"),ot(ht()(e.data.current.last_updated).format("MMM, ddd D h:mm A"),"date","left"),ot(e.data.location.country,"place","left"),at(e.data.current.temp_c,"degree","leftDegree","40"),ft("leftCloud",e.data.current.condition.icon),(()=>{const e=lt("search-box"),t=document.createElement("input");return t.type="search",t.placeholder="Search location",t.classList.add("search-location"),e.append(t,function(e,t,n){const r=document.createElement("Img");return r.src='data:image/svg+xml,%3Csvg xmlns="http%3A%2F%2Fwww.w3.org%2F2000%2Fsvg" width=\'24\' height="24" viewBox="0 0 24 24"%3E%3Cpath fill="currentColor" d="m19.6 21l-6.3-6.3q-.75.6-1.725.95T9.5 16q-2.725 0-4.612-1.888T3 9.5q0-2.725 1.888-4.612T9.5 3q2.725 0 4.612 1.888T16 9.5q0 1.1-.35 2.075T14.7 13.3l6.3 6.3l-1.4 1.4ZM9.5 14q1.875 0 3.188-1.313T14 9.5q0-1.875-1.313-3.188T9.5 5Q7.625 5 6.312 6.313T5 9.5q0 1.875 1.313 3.188T9.5 14Z"%2F%3E%3C%2Fsvg%3E',r.classList.add("search-btn"),r}()),e})()),function(){const e=document.querySelector(".search-location"),t=document.querySelector(".search-btn");e.addEventListener("keypress",(e=>{"Enter"===e.key&&(e.preventDefault(),document.querySelector(".search-btn").click())})),t.addEventListener("click",(e=>{e.preventDefault();const t=document.querySelector(".container"),n=document.querySelector(".weatherDisplay"),r=lt("content"),o=document.querySelector(".search-location");if(""===o.value)return alert("undefined");tt("https://api.weatherapi.com/v1/current.json",o.value).then((e=>{if(localStorage.setItem("country",o.value),200==e.status){for(t.removeChild(t.firstElementChild),r.append(gt(),dt()),t.insertBefore(r,t.firstElementChild);n.hasChildNodes();)n.firstChild.remove();mt(n)}})).catch((e=>{const t=ut(e.response.data.error.message);t.classList.remove("active"),setTimeout((()=>t.classList.add("active")),5e3)}))}))}()})).catch((e=>{const t=ut(e.response.data.error.message);t.classList.remove("active"),setTimeout((()=>t.classList.add("active")),5e3)})),t}function yt(e,t){const n=document.createElement("button");return n.classList.add(t),n.textContent=e,n.name=e.toLowerCase(),n}function Ct(e,t,n){const r=[],o=Math.ceil(t.length/4);for((()=>{let e=0;const t=document.querySelector(".right-arrow");document.querySelector(".left-arrow").addEventListener("click",(()=>{const t=document.querySelectorAll(".loopContainer");e<=0&&(e=t.length),e--;for(let e=0;e<t.length;e++)t[e].classList.remove("active");t[e].classList.add("active")})),t.addEventListener("click",(()=>{const t=document.querySelectorAll(".loopContainer");e>=t.length-1&&(e=-1),e++;for(let e=0;e<t.length;e++)t[e].classList.remove("active");t[e].classList.add("active")}))})();r.length<o;){let e=0;const n=t.splice(e,4);r.push(n),e+=4}!function(e,t,n){let r=0;for(;r<t.length;){const o=lt("loopContainer");for(let e=0;e<t.length;e++)o.appendChild(n(t[e],r,"day-forcast"));e.appendChild(o),r++,e.firstChild.classList.add("active")}}(e,r,n)}function wt(e,t,n){const r=document.createElement("div");return r.classList.add(n),r.append(function(e,t){const n=document.createElement("div");return n.classList.add("day"),n.textContent=e,n}(ht()(e[t].time).format("h:mm A")),ct(e[t].temp_c,"avg-degree","accord","15"),ft("cloud-img",e[t].condition.icon)),r}const bt=[mt,function(){const t=localStorage.getItem("country"),n=document.querySelector(".weatherDisplay"),r=document.querySelector(".left-arrow"),o=document.querySelector(".right-arrow");r.classList.add("arrow"),o.classList.add("arrow"),nt("https://api.weatherapi.com/v1/forecast.json",t,"7").then((e=>{const{hour:t}=e.data.forecast.forecastday[0];Ct(n,t,wt)})).catch((()=>{const t=ut(e.response.data.error.message);t.classList.remove("active"),setTimeout((()=>t.classList.add("active")),5e3)}))}];(new class{weatherDiv=()=>{const e=lt("container"),t=lt("content");return t.append(gt(),dt()),e.append(t,function(){const e=document.createElement("div");return e.classList.add("box"),e.append(yt("Daily","button"),yt("Hourly","button"),yt("<","left-arrow"),yt(">","right-arrow"),lt("weatherDisplay")),e}()),e};weather(){window.onload=function(e){const t=localStorage.getItem("country");""!==t&&"undefined"!==t||localStorage.setItem("country","usa")},window.onscroll=function(e){localStorage.setItem("scrollpos",window.scrollY)},document.body.appendChild(this.weatherDiv()),function(){const e=document.querySelector(".weatherDisplay"),t=document.querySelectorAll(".button");bt[0](e);for(let n=0;n<t.length;n++)t[n].addEventListener("click",(()=>{for(;e.hasChildNodes();)e.firstChild.remove();return bt[n](e)}))}()}}).weather();var xt=localStorage.getItem("scrollpos");xt&&window.scrollTo(0,xt)})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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QnNwQixFQUFTdnBCLFNBQVM4cEIsaUJBQWlCLFdBQ3pDLEdBQVEsR0FBR3BFLEdBQ1gsSUFBSyxJQUFJbm1CLEVBQVEsRUFBR0EsRUFBUWdxQixFQUFPajJCLE9BQVFpTSxJQUV2Q2dxQixFQUFPaHFCLEdBQU8rYixpQkFBaUIsU0FBUyxLQUNwQyxLQUFPb0ssRUFBSzBELGlCQUNSMUQsRUFBS25rQixXQUFXbkMsU0FFcEIsT0FBTyxHQUFRRyxHQUFPbW1CLEVBQUssR0FJdkMsQ0NTUThFLEVBQ0osSUFJTWhELFVBRVYsSUFBSWlELEdBQVk1RCxhQUFhQyxRQUFRLGFBQ2pDMkQsSUFBV3ZxQixPQUFPd3FCLFNBQVMsRUFBR0QsRyIsInNvdXJjZXMiOlsid2VicGFjazovL3dlYXRoZXIvLi9zcmMvc3R5bGUuY3NzIiwid2VicGFjazovL3dlYXRoZXIvLi9zcmMvc3R5bGUyLmNzcyIsIndlYnBhY2s6Ly93ZWF0aGVyLy4vc3JjL3N0eWxlMy5jc3MiLCJ3ZWJwYWNrOi8vd2VhdGhlci8uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9hcGkuanMiLCJ3ZWJwYWNrOi8vd2VhdGhlci8uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9nZXRVcmwuanMiLCJ3ZWJwYWNrOi8vd2VhdGhlci8uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9zb3VyY2VNYXBzLmpzIiwid2VicGFjazovL3dlYXRoZXIvLi9ub2RlX21vZHVsZXMvZGF5anMvZGF5anMubWluLmpzIiwid2VicGFjazovL3dlYXRoZXIvLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbmplY3RTdHlsZXNJbnRvU3R5bGVUYWcuanMiLCJ3ZWJwYWNrOi8vd2VhdGhlci8uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydEJ5U2VsZWN0b3IuanMiLCJ3ZWJwYWNrOi8vd2VhdGhlci8uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydFN0eWxlRWxlbWVudC5qcyIsIndlYnBhY2s6Ly93ZWF0aGVyLy4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc2V0QXR0cmlidXRlc1dpdGhvdXRBdHRyaWJ1dGVzLmpzIiwid2VicGFjazovL3dlYXRoZXIvLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZURvbUFQSS5qcyIsIndlYnBhY2s6Ly93ZWF0aGVyLy4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVUYWdUcmFuc2Zvcm0uanMiLCJ3ZWJwYWNrOi8vd2VhdGhlci93ZWJwYWNrL2Jvb3RzdHJhcCIsIndlYnBhY2s6Ly93ZWF0aGVyL3dlYnBhY2svcnVudGltZS9jb21wYXQgZ2V0IGRlZmF1bHQgZXhwb3J0Iiwid2VicGFjazovL3dlYXRoZXIvd2VicGFjay9ydW50aW1lL2RlZmluZSBwcm9wZXJ0eSBnZXR0ZXJzIiwid2VicGFjazovL3dlYXRoZXIvd2VicGFjay9ydW50aW1lL2dsb2JhbCIsIndlYnBhY2s6Ly93ZWF0aGVyL3dlYnBhY2svcnVudGltZS9oYXNPd25Qcm9wZXJ0eSBzaG9ydGhhbmQiLCJ3ZWJwYWNrOi8vd2VhdGhlci93ZWJwYWNrL3J1bnRpbWUvcHVibGljUGF0aCIsIndlYnBhY2s6Ly93ZWF0aGVyL3dlYnBhY2svcnVudGltZS9qc29ucCBjaHVuayBsb2FkaW5nIiwid2VicGFjazovL3dlYXRoZXIvd2VicGFjay9ydW50aW1lL25vbmNlIiwid2VicGFjazovL3dlYXRoZXIvLi9zcmMvc3R5bGUuY3NzPzcxNjMiLCJ3ZWJwYWNrOi8vd2VhdGhlci8uL3NyYy9zdHlsZTIuY3NzP2RhMmIiLCJ3ZWJwYWNrOi8vd2VhdGhlci8uL3NyYy9zdHlsZTMuY3NzPzE2MzQiLCJ3ZWJwYWNrOi8vd2VhdGhlci8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy9iaW5kLmpzIiwid2VicGFjazovL3dlYXRoZXIvLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL3V0aWxzLmpzIiwid2VicGFjazovL3dlYXRoZXIvLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2NvcmUvQXhpb3NFcnJvci5qcyIsIndlYnBhY2s6Ly93ZWF0aGVyLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9oZWxwZXJzL3RvRm9ybURhdGEuanMiLCJ3ZWJwYWNrOi8vd2VhdGhlci8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy9BeGlvc1VSTFNlYXJjaFBhcmFtcy5qcyIsIndlYnBhY2s6Ly93ZWF0aGVyLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9oZWxwZXJzL2J1aWxkVVJMLmpzIiwid2VicGFjazovL3dlYXRoZXIvLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2NvcmUvSW50ZXJjZXB0b3JNYW5hZ2VyLmpzIiwid2VicGFjazovL3dlYXRoZXIvLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2RlZmF1bHRzL3RyYW5zaXRpb25hbC5qcyIsIndlYnBhY2s6Ly93ZWF0aGVyLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9wbGF0Zm9ybS9icm93c2VyL2luZGV4LmpzIiwid2VicGFjazovL3dlYXRoZXIvLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL3BsYXRmb3JtL2Jyb3dzZXIvY2xhc3Nlcy9VUkxTZWFyY2hQYXJhbXMuanMiLCJ3ZWJwYWNrOi8vd2VhdGhlci8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvcGxhdGZvcm0vYnJvd3Nlci9jbGFzc2VzL0Zvcm1EYXRhLmpzIiwid2VicGFjazovL3dlYXRoZXIvLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL3BsYXRmb3JtL2Jyb3dzZXIvY2xhc3Nlcy9CbG9iLmpzIiwid2VicGFjazovL3dlYXRoZXIvLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvZm9ybURhdGFUb0pTT04uanMiLCJ3ZWJwYWNrOi8vd2VhdGhlci8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvZGVmYXVsdHMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vd2VhdGhlci8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy90b1VSTEVuY29kZWRGb3JtLmpzIiwid2VicGFjazovL3dlYXRoZXIvLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvcGFyc2VIZWFkZXJzLmpzIiwid2VicGFjazovL3dlYXRoZXIvLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2NvcmUvQXhpb3NIZWFkZXJzLmpzIiwid2VicGFjazovL3dlYXRoZXIvLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2NvcmUvdHJhbnNmb3JtRGF0YS5qcyIsIndlYnBhY2s6Ly93ZWF0aGVyLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9jYW5jZWwvaXNDYW5jZWwuanMiLCJ3ZWJwYWNrOi8vd2VhdGhlci8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvY2FuY2VsL0NhbmNlbGVkRXJyb3IuanMiLCJ3ZWJwYWNrOi8vd2VhdGhlci8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy9jb29raWVzLmpzIiwid2VicGFjazovL3dlYXRoZXIvLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2NvcmUvYnVpbGRGdWxsUGF0aC5qcyIsIndlYnBhY2s6Ly93ZWF0aGVyLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9oZWxwZXJzL2lzQWJzb2x1dGVVUkwuanMiLCJ3ZWJwYWNrOi8vd2VhdGhlci8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy9jb21iaW5lVVJMcy5qcyIsIndlYnBhY2s6Ly93ZWF0aGVyLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9oZWxwZXJzL2lzVVJMU2FtZU9yaWdpbi5qcyIsIndlYnBhY2s6Ly93ZWF0aGVyLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9hZGFwdGVycy94aHIuanMiLCJ3ZWJwYWNrOi8vd2VhdGhlci8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy9zcGVlZG9tZXRlci5qcyIsIndlYnBhY2s6Ly93ZWF0aGVyLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9hZGFwdGVycy9hZGFwdGVycy5qcyIsIndlYnBhY2s6Ly93ZWF0aGVyLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9oZWxwZXJzL251bGwuanMiLCJ3ZWJwYWNrOi8vd2VhdGhlci8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvY29yZS9zZXR0bGUuanMiLCJ3ZWJwYWNrOi8vd2VhdGhlci8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy9wYXJzZVByb3RvY29sLmpzIiwid2VicGFjazovL3dlYXRoZXIvLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2NvcmUvZGlzcGF0Y2hSZXF1ZXN0LmpzIiwid2VicGFjazovL3dlYXRoZXIvLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2NvcmUvbWVyZ2VDb25maWcuanMiLCJ3ZWJwYWNrOi8vd2VhdGhlci8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvZW52L2RhdGEuanMiLCJ3ZWJwYWNrOi8vd2VhdGhlci8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy92YWxpZGF0b3IuanMiLCJ3ZWJwYWNrOi8vd2VhdGhlci8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvY29yZS9BeGlvcy5qcyIsIndlYnBhY2s6Ly93ZWF0aGVyLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9jYW5jZWwvQ2FuY2VsVG9rZW4uanMiLCJ3ZWJwYWNrOi8vd2VhdGhlci8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy9IdHRwU3RhdHVzQ29kZS5qcyIsIndlYnBhY2s6Ly93ZWF0aGVyLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9heGlvcy5qcyIsIndlYnBhY2s6Ly93ZWF0aGVyLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9oZWxwZXJzL3NwcmVhZC5qcyIsIndlYnBhY2s6Ly93ZWF0aGVyLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9oZWxwZXJzL2lzQXhpb3NFcnJvci5qcyIsIndlYnBhY2s6Ly93ZWF0aGVyLy4vc3JjL2FwaS9mZXRjaEFwaS5qcyIsIndlYnBhY2s6Ly93ZWF0aGVyLy4vc3JjL3N2Zy9kZWdyZWVfc3ZnLmpzIiwid2VicGFjazovL3dlYXRoZXIvLi9zcmMvd2VhdGhlckRpdi5qcyIsIndlYnBhY2s6Ly93ZWF0aGVyLy4vc3JjL2NyZWF0ZURpdi5qcyIsIndlYnBhY2s6Ly93ZWF0aGVyLy4vc3JjL2Vycm9yRnVuYy5qcyIsIndlYnBhY2s6Ly93ZWF0aGVyLy4vc3JjL3JpZ2h0V2VhdGhlci5qcyIsIndlYnBhY2s6Ly93ZWF0aGVyLy4vc3JjL2ltYWdlL2Nsb3VkSW1nLmpzIiwid2VicGFjazovL3dlYXRoZXIvLi9zcmMvc2hvd1dlYXRoZXIuanMiLCJ3ZWJwYWNrOi8vd2VhdGhlci8uL3NyYy9sZWZ0V2VhdGhlci5qcyIsIndlYnBhY2s6Ly93ZWF0aGVyLy4vc3JjL3N2Zy9zZWFyY2hfc3ZnLmpzIiwid2VicGFjazovL3dlYXRoZXIvLi9zcmMvc2VhcmNoU3VibWl0LmpzIiwid2VicGFjazovL3dlYXRoZXIvLi9zcmMvd2VhdGhlckJ1dHRvbnMuanMiLCJ3ZWJwYWNrOi8vd2VhdGhlci8uL3NyYy90b2dnbGUuanMiLCJ3ZWJwYWNrOi8vd2VhdGhlci8uL3NyYy9jbGljay5qcyIsIndlYnBhY2s6Ly93ZWF0aGVyLy4vc3JjL3Nob3dIb3VyLmpzIiwid2VicGFjazovL3dlYXRoZXIvLi9zcmMvd2VhdGhlckluZm8uanMiLCJ3ZWJwYWNrOi8vd2VhdGhlci8uL3NyYy9pbmRleC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBJbXBvcnRzXG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyBmcm9tIFwiLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL3NvdXJjZU1hcHMuanNcIjtcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18gZnJvbSBcIi4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9hcGkuanNcIjtcbmltcG9ydCBfX19DU1NfTE9BREVSX0dFVF9VUkxfSU1QT1JUX19fIGZyb20gXCIuLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvZ2V0VXJsLmpzXCI7XG52YXIgX19fQ1NTX0xPQURFUl9VUkxfSU1QT1JUXzBfX18gPSBuZXcgVVJMKFwiLi9pbWFnZS9iYWNrZ3JvdW5kSW1nLmpwZ1wiLCBpbXBvcnQubWV0YS51cmwpO1xudmFyIF9fX0NTU19MT0FERVJfRVhQT1JUX19fID0gX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fKF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18pO1xudmFyIF9fX0NTU19MT0FERVJfVVJMX1JFUExBQ0VNRU5UXzBfX18gPSBfX19DU1NfTE9BREVSX0dFVF9VUkxfSU1QT1JUX19fKF9fX0NTU19MT0FERVJfVVJMX0lNUE9SVF8wX19fKTtcbi8vIE1vZHVsZVxuX19fQ1NTX0xPQURFUl9FWFBPUlRfX18ucHVzaChbbW9kdWxlLmlkLCBcIioge1xcbiAgICBtYXJnaW46IDA7XFxuICAgIHBhZGRpbmc6IDA7XFxuICAgIGJveC1zaXppbmc6IGJvcmRlci1ib3g7XFxufVxcbmJvZHkge1xcbiAgICBtaW4taGVpZ2h0OiAxMDB2aDtcXG59XFxuLmNvbnRhaW5lciB7XFxuICAgIHdpZHRoOiAxMDAlO1xcbiAgICBtaW4taGVpZ2h0OiBjYWxjKDcwdmggKyAxMDB2aCk7XFxuICAgIHBhZGRpbmctYm90dG9tOiAzMHB4O1xcbiAgICBiYWNrZ3JvdW5kOiB1cmwoXCIgKyBfX19DU1NfTE9BREVSX1VSTF9SRVBMQUNFTUVOVF8wX19fICsgXCIpIG5vLXJlcGVhdCBmaXhlZCBjZW50ZXI7XFxufVxcbi5jb250YWluZXIgLmNvbnRlbnQge1xcbiAgICBkaXNwbGF5OiBmbGV4O1xcbiAgICBmbGV4LWRpcmVjdGlvbjogcm93O1xcbiAgICBqdXN0aWZ5LWNvbnRlbnQ6IHNwYWNlLWV2ZW5seTtcXG5cXG59XFxuLmNvbnRhaW5lciAuY29udGVudCAubGVmdC13ZWF0aGVyIHtcXG4gICAgZGlzcGxheTogZmxleDtcXG4gICAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcXG59XFxuLmNvbnRhaW5lciAuY29udGVudCAubGVmdC13ZWF0aGVyIC5sZWZ0Q2xvdWQge1xcbiAgICB3aWR0aDogMTIwcHg7XFxuICAgIGhlaWdodDogMTIwcHg7XFxufVxcbi5jb250YWluZXIgLmNvbnRlbnQgLmxlZnQtd2VhdGhlciwgLnJpZ2h0LXdlYXRoZXIge1xcbiAgICBtYXJnaW4tdG9wOiAzMHB4O1xcbn1cXG4uY29udGFpbmVyIC5jb250ZW50IC5sZWZ0LXdlYXRoZXIgLmxlZnQge1xcbiAgICBtYXJnaW4tYm90dG9tOiAzMHB4O1xcbn1cXG4uY29udGFpbmVyIC5jb250ZW50IC5sZWZ0LXdlYXRoZXIgLnNlYXJjaC1ib3h7XFxuICAgIHdpZHRoOiAzMDBweDtcXG4gICAgZGlzcGxheTogZmxleDtcXG4gICAgYm9yZGVyLWJvdHRvbTogMXB4IHNvbGlkIHJnYig0NCwgNDQsIDk3KTtcXG59XFxuLmNvbnRhaW5lciAuY29udGVudCAubGVmdC13ZWF0aGVyIGlucHV0W3R5cGU9J3NlYXJjaCddIHtcXG4gICAgcGFkZGluZzogMTBweCAwO1xcbiAgICBvdXRsaW5lOiBub25lO1xcbiAgICBmb250LXNpemU6IDIwcHg7XFxuICAgIGJvcmRlcjogbm9uZTtcXG4gICAgYmFja2dyb3VuZDogdHJhbnNwYXJlbnQ7XFxufVxcbi5jb250YWluZXIgLmNvbnRlbnQgLmxlZnQtd2VhdGhlciAudGl0bGUge1xcbiAgICBmb250LXNpemU6IDQwcHg7XFxuICAgIGZvbnQtZmFtaWx5OiBzeXN0ZW0tdWksIC1hcHBsZS1zeXN0ZW0sIEJsaW5rTWFjU3lzdGVtRm9udCwgJ1NlZ29lIFVJJywgUm9ib3RvLCBPeHlnZW4sIFVidW50dSwgQ2FudGFyZWxsLCAnT3BlbiBTYW5zJywgJ0hlbHZldGljYSBOZXVlJywgc2Fucy1zZXJpZjtcXG4gICAgY29sb3I6IHJnYigxOTYsIDkyLCA5Mik7XFxufVxcbi5jb250YWluZXIgLmNvbnRlbnQgLmxlZnQtd2VhdGhlciAuZGF0ZSB7XFxuICAgIGZvbnQtc2l6ZTogMjBweDtcXG4gICAgZm9udC1mYW1pbHk6ICdUaW1lcyBOZXcgUm9tYW4nLCBUaW1lcywgc2VyaWY7XFxuICAgIGNvbG9yOiByZ2IoMjcsIDQsIDQpO1xcbiAgICBvcGFjaXR5OiAwLjc7XFxufVxcbi5jb250YWluZXIgLmNvbnRlbnQgLmxlZnQtd2VhdGhlciAucGxhY2Uge1xcbiAgICBmb250LXNpemU6IDMwcHg7XFxuICAgIGZvbnQtd2VpZ2h0OiBib2xkO1xcbiAgICBmb250LWZhbWlseTogJ0dpbGwgU2FucycsICdHaWxsIFNhbnMgTVQnLCBDYWxpYnJpLCAnVHJlYnVjaGV0IE1TJywgc2Fucy1zZXJpZjtcXG4gICAgY29sb3I6IHJnYig4OCwgMzMsIDMzKTtcXG59XFxuLmNvbnRhaW5lciAuY29udGVudCAucmlnaHQtd2VhdGhlciAucmlnaHQge1xcbiAgICBtYXJnaW4tYm90dG9tOiAxMHB4O1xcbn1cXG4uY29udGFpbmVyIC5jb250ZW50IC5sZWZ0LXdlYXRoZXIgLmxlZnREZWdyZWUsIC5yaWdodC13ZWF0aGVyIC5yaWdodERlZ3JlZSB7XFxuICAgIGhlaWdodDogNTBweDtcXG4gICAgZGlzcGxheTogZmxleDtcXG4gICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcXG4gICAganVzdGlmeS1jb250ZW50OiBsZWZ0O1xcbiAgICBtYXJnaW4tYm90dG9tOiAyMHB4O1xcbn1cXG4uY29udGFpbmVyIC5jb250ZW50IC5sZWZ0LXdlYXRoZXIgLmxlZnREZWdyZWUgLmltZ1N2ZywgLnJpZ2h0LXdlYXRoZXIgLnJpZ2h0RGVncmVlIC5pbWdTdmcge1xcbiAgICBvcGFjaXR5OiAwLjc7XFxufVxcbi5jb250YWluZXIgLmNvbnRlbnQgLmxlZnQtd2VhdGhlciAubGVmdERlZ3JlZSAuZGVncmVlIHtcXG4gICAgbWFyZ2luOiAwIDIwcHggMCAwO1xcbiAgICBmb250LXNpemU6IDYwcHg7XFxuICAgIGZvbnQtd2VpZ2h0OiBib2xkO1xcbiAgICBmb250LWZhbWlseTogJ1RpbWVzIE5ldyBSb21hbicsIFRpbWVzLCBzZXJpZjtcXG4gICAgY29sb3I6IGJsYWNrO1xcbiAgICBvcGFjaXR5OiAwLjc7XFxufVxcblxcbi5jb250YWluZXIgLmNvbnRlbnQgLnJpZ2h0LXdlYXRoZXIgLnJpZ2h0IC5tb3JlLW1zZyB7XFxuICAgIGZvbnQtc2l6ZTogMThweDtcXG4gICAgZm9udC1mYW1pbHk6IENhbWJyaWEsIENvY2hpbiwgR2VvcmdpYSwgVGltZXMsICdUaW1lcyBOZXcgUm9tYW4nLCBzZXJpZjtcXG4gICAgZm9udC1zdHlsZTogaXRhbGljO1xcbn1cXG4uY29udGFpbmVyIC5jb250ZW50IC5yaWdodC13ZWF0aGVyIC5yaWdodCAuaW4tZGVncmVlIHtcXG4gICAgZm9udC1zaXplOiA0MHB4O1xcbiAgICBvcGFjaXR5OiAwLjc7XFxufVxcblxcbkBtZWRpYSBvbmx5IHNjcmVlbiBhbmQgKG1heC13aWR0aDogNzAwcHgpIHtcXG4gICAgLmNvbnRhaW5lciAuY29udGVudCB7XFxuICAgICAgICBkaXNwbGF5OiBmbGV4O1xcbiAgICAgICAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcXG4gICAgICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XFxuICAgICAgICBjb2xvcjogcmdiKDEwMCwgODQsIDg0KTtcXG4gICAgfVxcbiAgICAuY29udGFpbmVyIC5jb250ZW50IC5sZWZ0LXdlYXRoZXIgLmRhdGUge1xcbiAgICAgICAgY29sb3I6IHdoaXRlO1xcbiAgICB9XFxuICAgIC5jb250YWluZXIgLmNvbnRlbnQgLmxlZnQtd2VhdGhlciAuZGF0ZSB7XFxuICAgICAgICBvcGFjaXR5OiAxO1xcbiAgICB9XFxuICAgIC5jb250YWluZXIgLmNvbnRlbnQgLmxlZnQtd2VhdGhlciAubGVmdERlZ3JlZSAuaW1nU3ZnLCAucmlnaHQtd2VhdGhlciAucmlnaHREZWdyZWUgLmltZ1N2ZyB7XFxuICAgICAgICBvcGFjaXR5OiAxO1xcbiAgICB9XFxuICAgIC5jb250YWluZXIgLmNvbnRlbnQgLmxlZnQtd2VhdGhlciAubGVmdERlZ3JlZSAuZGVncmVlIHtcXG4gICAgICAgIG9wYWNpdHk6IDE7XFxuICAgIH1cXG4gICAgLmNvbnRhaW5lciAuY29udGVudCAucmlnaHQtd2VhdGhlciAucmlnaHQgLmluLWRlZ3JlZSB7XFxuICAgICAgICBvcGFjaXR5OiAxO1xcbiAgICB9XFxufVwiLCBcIlwiLHtcInZlcnNpb25cIjozLFwic291cmNlc1wiOltcIndlYnBhY2s6Ly8uL3NyYy9zdHlsZS5jc3NcIl0sXCJuYW1lc1wiOltdLFwibWFwcGluZ3NcIjpcIkFBQUE7SUFDSSxTQUFTO0lBQ1QsVUFBVTtJQUNWLHNCQUFzQjtBQUMxQjtBQUNBO0lBQ0ksaUJBQWlCO0FBQ3JCO0FBQ0E7SUFDSSxXQUFXO0lBQ1gsOEJBQThCO0lBQzlCLG9CQUFvQjtJQUNwQiwwRUFBbUU7QUFDdkU7QUFDQTtJQUNJLGFBQWE7SUFDYixtQkFBbUI7SUFDbkIsNkJBQTZCOztBQUVqQztBQUNBO0lBQ0ksYUFBYTtJQUNiLHNCQUFzQjtBQUMxQjtBQUNBO0lBQ0ksWUFBWTtJQUNaLGFBQWE7QUFDakI7QUFDQTtJQUNJLGdCQUFnQjtBQUNwQjtBQUNBO0lBQ0ksbUJBQW1CO0FBQ3ZCO0FBQ0E7SUFDSSxZQUFZO0lBQ1osYUFBYTtJQUNiLHdDQUF3QztBQUM1QztBQUNBO0lBQ0ksZUFBZTtJQUNmLGFBQWE7SUFDYixlQUFlO0lBQ2YsWUFBWTtJQUNaLHVCQUF1QjtBQUMzQjtBQUNBO0lBQ0ksZUFBZTtJQUNmLG1KQUFtSjtJQUNuSix1QkFBdUI7QUFDM0I7QUFDQTtJQUNJLGVBQWU7SUFDZiw0Q0FBNEM7SUFDNUMsb0JBQW9CO0lBQ3BCLFlBQVk7QUFDaEI7QUFDQTtJQUNJLGVBQWU7SUFDZixpQkFBaUI7SUFDakIsNkVBQTZFO0lBQzdFLHNCQUFzQjtBQUMxQjtBQUNBO0lBQ0ksbUJBQW1CO0FBQ3ZCO0FBQ0E7SUFDSSxZQUFZO0lBQ1osYUFBYTtJQUNiLG1CQUFtQjtJQUNuQixxQkFBcUI7SUFDckIsbUJBQW1CO0FBQ3ZCO0FBQ0E7SUFDSSxZQUFZO0FBQ2hCO0FBQ0E7SUFDSSxrQkFBa0I7SUFDbEIsZUFBZTtJQUNmLGlCQUFpQjtJQUNqQiw0Q0FBNEM7SUFDNUMsWUFBWTtJQUNaLFlBQVk7QUFDaEI7O0FBRUE7SUFDSSxlQUFlO0lBQ2Ysc0VBQXNFO0lBQ3RFLGtCQUFrQjtBQUN0QjtBQUNBO0lBQ0ksZUFBZTtJQUNmLFlBQVk7QUFDaEI7O0FBRUE7SUFDSTtRQUNJLGFBQWE7UUFDYixzQkFBc0I7UUFDdEIsbUJBQW1CO1FBQ25CLHVCQUF1QjtJQUMzQjtJQUNBO1FBQ0ksWUFBWTtJQUNoQjtJQUNBO1FBQ0ksVUFBVTtJQUNkO0lBQ0E7UUFDSSxVQUFVO0lBQ2Q7SUFDQTtRQUNJLFVBQVU7SUFDZDtJQUNBO1FBQ0ksVUFBVTtJQUNkO0FBQ0pcIixcInNvdXJjZXNDb250ZW50XCI6W1wiKiB7XFxuICAgIG1hcmdpbjogMDtcXG4gICAgcGFkZGluZzogMDtcXG4gICAgYm94LXNpemluZzogYm9yZGVyLWJveDtcXG59XFxuYm9keSB7XFxuICAgIG1pbi1oZWlnaHQ6IDEwMHZoO1xcbn1cXG4uY29udGFpbmVyIHtcXG4gICAgd2lkdGg6IDEwMCU7XFxuICAgIG1pbi1oZWlnaHQ6IGNhbGMoNzB2aCArIDEwMHZoKTtcXG4gICAgcGFkZGluZy1ib3R0b206IDMwcHg7XFxuICAgIGJhY2tncm91bmQ6IHVybCgnLi9pbWFnZS9iYWNrZ3JvdW5kSW1nLmpwZycpIG5vLXJlcGVhdCBmaXhlZCBjZW50ZXI7XFxufVxcbi5jb250YWluZXIgLmNvbnRlbnQge1xcbiAgICBkaXNwbGF5OiBmbGV4O1xcbiAgICBmbGV4LWRpcmVjdGlvbjogcm93O1xcbiAgICBqdXN0aWZ5LWNvbnRlbnQ6IHNwYWNlLWV2ZW5seTtcXG5cXG59XFxuLmNvbnRhaW5lciAuY29udGVudCAubGVmdC13ZWF0aGVyIHtcXG4gICAgZGlzcGxheTogZmxleDtcXG4gICAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcXG59XFxuLmNvbnRhaW5lciAuY29udGVudCAubGVmdC13ZWF0aGVyIC5sZWZ0Q2xvdWQge1xcbiAgICB3aWR0aDogMTIwcHg7XFxuICAgIGhlaWdodDogMTIwcHg7XFxufVxcbi5jb250YWluZXIgLmNvbnRlbnQgLmxlZnQtd2VhdGhlciwgLnJpZ2h0LXdlYXRoZXIge1xcbiAgICBtYXJnaW4tdG9wOiAzMHB4O1xcbn1cXG4uY29udGFpbmVyIC5jb250ZW50IC5sZWZ0LXdlYXRoZXIgLmxlZnQge1xcbiAgICBtYXJnaW4tYm90dG9tOiAzMHB4O1xcbn1cXG4uY29udGFpbmVyIC5jb250ZW50IC5sZWZ0LXdlYXRoZXIgLnNlYXJjaC1ib3h7XFxuICAgIHdpZHRoOiAzMDBweDtcXG4gICAgZGlzcGxheTogZmxleDtcXG4gICAgYm9yZGVyLWJvdHRvbTogMXB4IHNvbGlkIHJnYig0NCwgNDQsIDk3KTtcXG59XFxuLmNvbnRhaW5lciAuY29udGVudCAubGVmdC13ZWF0aGVyIGlucHV0W3R5cGU9J3NlYXJjaCddIHtcXG4gICAgcGFkZGluZzogMTBweCAwO1xcbiAgICBvdXRsaW5lOiBub25lO1xcbiAgICBmb250LXNpemU6IDIwcHg7XFxuICAgIGJvcmRlcjogbm9uZTtcXG4gICAgYmFja2dyb3VuZDogdHJhbnNwYXJlbnQ7XFxufVxcbi5jb250YWluZXIgLmNvbnRlbnQgLmxlZnQtd2VhdGhlciAudGl0bGUge1xcbiAgICBmb250LXNpemU6IDQwcHg7XFxuICAgIGZvbnQtZmFtaWx5OiBzeXN0ZW0tdWksIC1hcHBsZS1zeXN0ZW0sIEJsaW5rTWFjU3lzdGVtRm9udCwgJ1NlZ29lIFVJJywgUm9ib3RvLCBPeHlnZW4sIFVidW50dSwgQ2FudGFyZWxsLCAnT3BlbiBTYW5zJywgJ0hlbHZldGljYSBOZXVlJywgc2Fucy1zZXJpZjtcXG4gICAgY29sb3I6IHJnYigxOTYsIDkyLCA5Mik7XFxufVxcbi5jb250YWluZXIgLmNvbnRlbnQgLmxlZnQtd2VhdGhlciAuZGF0ZSB7XFxuICAgIGZvbnQtc2l6ZTogMjBweDtcXG4gICAgZm9udC1mYW1pbHk6ICdUaW1lcyBOZXcgUm9tYW4nLCBUaW1lcywgc2VyaWY7XFxuICAgIGNvbG9yOiByZ2IoMjcsIDQsIDQpO1xcbiAgICBvcGFjaXR5OiAwLjc7XFxufVxcbi5jb250YWluZXIgLmNvbnRlbnQgLmxlZnQtd2VhdGhlciAucGxhY2Uge1xcbiAgICBmb250LXNpemU6IDMwcHg7XFxuICAgIGZvbnQtd2VpZ2h0OiBib2xkO1xcbiAgICBmb250LWZhbWlseTogJ0dpbGwgU2FucycsICdHaWxsIFNhbnMgTVQnLCBDYWxpYnJpLCAnVHJlYnVjaGV0IE1TJywgc2Fucy1zZXJpZjtcXG4gICAgY29sb3I6IHJnYig4OCwgMzMsIDMzKTtcXG59XFxuLmNvbnRhaW5lciAuY29udGVudCAucmlnaHQtd2VhdGhlciAucmlnaHQge1xcbiAgICBtYXJnaW4tYm90dG9tOiAxMHB4O1xcbn1cXG4uY29udGFpbmVyIC5jb250ZW50IC5sZWZ0LXdlYXRoZXIgLmxlZnREZWdyZWUsIC5yaWdodC13ZWF0aGVyIC5yaWdodERlZ3JlZSB7XFxuICAgIGhlaWdodDogNTBweDtcXG4gICAgZGlzcGxheTogZmxleDtcXG4gICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcXG4gICAganVzdGlmeS1jb250ZW50OiBsZWZ0O1xcbiAgICBtYXJnaW4tYm90dG9tOiAyMHB4O1xcbn1cXG4uY29udGFpbmVyIC5jb250ZW50IC5sZWZ0LXdlYXRoZXIgLmxlZnREZWdyZWUgLmltZ1N2ZywgLnJpZ2h0LXdlYXRoZXIgLnJpZ2h0RGVncmVlIC5pbWdTdmcge1xcbiAgICBvcGFjaXR5OiAwLjc7XFxufVxcbi5jb250YWluZXIgLmNvbnRlbnQgLmxlZnQtd2VhdGhlciAubGVmdERlZ3JlZSAuZGVncmVlIHtcXG4gICAgbWFyZ2luOiAwIDIwcHggMCAwO1xcbiAgICBmb250LXNpemU6IDYwcHg7XFxuICAgIGZvbnQtd2VpZ2h0OiBib2xkO1xcbiAgICBmb250LWZhbWlseTogJ1RpbWVzIE5ldyBSb21hbicsIFRpbWVzLCBzZXJpZjtcXG4gICAgY29sb3I6IGJsYWNrO1xcbiAgICBvcGFjaXR5OiAwLjc7XFxufVxcblxcbi5jb250YWluZXIgLmNvbnRlbnQgLnJpZ2h0LXdlYXRoZXIgLnJpZ2h0IC5tb3JlLW1zZyB7XFxuICAgIGZvbnQtc2l6ZTogMThweDtcXG4gICAgZm9udC1mYW1pbHk6IENhbWJyaWEsIENvY2hpbiwgR2VvcmdpYSwgVGltZXMsICdUaW1lcyBOZXcgUm9tYW4nLCBzZXJpZjtcXG4gICAgZm9udC1zdHlsZTogaXRhbGljO1xcbn1cXG4uY29udGFpbmVyIC5jb250ZW50IC5yaWdodC13ZWF0aGVyIC5yaWdodCAuaW4tZGVncmVlIHtcXG4gICAgZm9udC1zaXplOiA0MHB4O1xcbiAgICBvcGFjaXR5OiAwLjc7XFxufVxcblxcbkBtZWRpYSBvbmx5IHNjcmVlbiBhbmQgKG1heC13aWR0aDogNzAwcHgpIHtcXG4gICAgLmNvbnRhaW5lciAuY29udGVudCB7XFxuICAgICAgICBkaXNwbGF5OiBmbGV4O1xcbiAgICAgICAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcXG4gICAgICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XFxuICAgICAgICBjb2xvcjogcmdiKDEwMCwgODQsIDg0KTtcXG4gICAgfVxcbiAgICAuY29udGFpbmVyIC5jb250ZW50IC5sZWZ0LXdlYXRoZXIgLmRhdGUge1xcbiAgICAgICAgY29sb3I6IHdoaXRlO1xcbiAgICB9XFxuICAgIC5jb250YWluZXIgLmNvbnRlbnQgLmxlZnQtd2VhdGhlciAuZGF0ZSB7XFxuICAgICAgICBvcGFjaXR5OiAxO1xcbiAgICB9XFxuICAgIC5jb250YWluZXIgLmNvbnRlbnQgLmxlZnQtd2VhdGhlciAubGVmdERlZ3JlZSAuaW1nU3ZnLCAucmlnaHQtd2VhdGhlciAucmlnaHREZWdyZWUgLmltZ1N2ZyB7XFxuICAgICAgICBvcGFjaXR5OiAxO1xcbiAgICB9XFxuICAgIC5jb250YWluZXIgLmNvbnRlbnQgLmxlZnQtd2VhdGhlciAubGVmdERlZ3JlZSAuZGVncmVlIHtcXG4gICAgICAgIG9wYWNpdHk6IDE7XFxuICAgIH1cXG4gICAgLmNvbnRhaW5lciAuY29udGVudCAucmlnaHQtd2VhdGhlciAucmlnaHQgLmluLWRlZ3JlZSB7XFxuICAgICAgICBvcGFjaXR5OiAxO1xcbiAgICB9XFxufVwiXSxcInNvdXJjZVJvb3RcIjpcIlwifV0pO1xuLy8gRXhwb3J0c1xuZXhwb3J0IGRlZmF1bHQgX19fQ1NTX0xPQURFUl9FWFBPUlRfX187XG4iLCIvLyBJbXBvcnRzXG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyBmcm9tIFwiLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL3NvdXJjZU1hcHMuanNcIjtcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18gZnJvbSBcIi4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9hcGkuanNcIjtcbnZhciBfX19DU1NfTE9BREVSX0VYUE9SVF9fXyA9IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyhfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fKTtcbi8vIE1vZHVsZVxuX19fQ1NTX0xPQURFUl9FWFBPUlRfX18ucHVzaChbbW9kdWxlLmlkLCBcIlxcbi5jb250YWluZXIgLmJveCAuYnV0dG9uIHtcXG4gICAgcGFkZGluZzogOHB4O1xcbiAgICBtYXJnaW46IDMwcHggMjBweCAyMHB4IDIwcHg7XFxuICAgIGZvbnQtc2l6ZTogbGFyZ2U7XFxuICAgIGZvbnQtd2VpZ2h0OiA2MDA7XFxuICAgIGJvcmRlcjogM3B4IHNvbGlkIHJnYigxMzgsIDEzMSwgMTMxKTtcXG4gICAgYm9yZGVyLXJhZGl1czogNXB4O1xcbiAgICBiYWNrZ3JvdW5kOiB0cmFuc3BhcmVudDtcXG4gICAgY29sb3I6IHJnYigxMjIsIDg0LCA4NCk7XFxufVxcbi5jb250YWluZXIgLmJveCAud2VhdGhlckRpc3BsYXkge1xcbiAgICBoZWlnaHQ6IDEwMCU7XFxuICAgIGRpc3BsYXk6IGZsZXg7IFxcbiAgICBmbGV4LWRpcmVjdGlvbjogcm93O1xcbiAgICBnYXA6IDEwcHg7XFxuICAgIGp1c3RpZnktY29udGVudDogc3BhY2UtZXZlbmx5O1xcbn1cXG4uY29udGFpbmVyIC5ib3ggLndlYXRoZXJEaXNwbGF5IC5mb3JjYXN0IC5kYXkge1xcbiAgICBtYXJnaW4tdG9wOiAyMHB4O1xcbiAgICBmb250LXNpemU6IGxhcmdlO1xcbiAgICBmb250LWZhbWlseTogJ1RyZWJ1Y2hldCBNUycsICdMdWNpZGEgU2FucyBVbmljb2RlJywgJ0x1Y2lkYSBHcmFuZGUnLCAnTHVjaWRhIFNhbnMnLCBBcmlhbCwgc2Fucy1zZXJpZjtcXG5cXG59XFxuLmNvbnRhaW5lciAuYm94IC53ZWF0aGVyRGlzcGxheSAuYWNjb3JkIHtcXG4gICAgZGlzcGxheTogZmxleDtcXG4gICAgZmxleC1kaXJlY3Rpb246IHJvdztcXG4gICAgcGFkZGluZzogNXB4IDA7XFxufVxcbi5jb250YWluZXIgLmJveCAud2VhdGhlckRpc3BsYXkgLmZvcmNhc3QgLmFjY29yZCAubWluLWRlZ3JlZSB7XFxuICAgIGZvbnQtc2l6ZTogMTNweDtcXG4gICAgZm9udC13ZWlnaHQ6IDIwMDtcXG59XFxuLmNvbnRhaW5lciAuYm94IC53ZWF0aGVyRGlzcGxheSAuZm9yY2FzdCAuYWNjb3JkIC5hdmctZGVncmVlIHtcXG4gICAgZm9udC1zaXplOiAxN3B4O1xcbiAgICBmb250LXdlaWdodDogNjAwO1xcbn1cXG4uY29udGFpbmVyIC5ib3ggLndlYXRoZXJEaXNwbGF5IC5mb3JjYXN0IC5hY2NvcmQgLm1heC1kZWdyZWUge1xcbiAgICBmb250LXNpemU6IDIwcHg7XFxuICAgIGZvbnQtd2VpZ2h0OiBib2xkO1xcbn1cXG4uY29udGFpbmVyIC5ib3ggLndlYXRoZXJEaXNwbGF5IC5mb3JjYXN0IC5hY2NvcmQgLmNsb3VkLWljb24ge1xcbiAgICB3aWR0aDogNXB4O1xcbiAgICBtYXJnaW46IDA7XFxuICAgIHBhZGRpbmc6IDA7XFxuICAgIGZvbnQtc2l6ZTogNXB4O1xcbn1cXG5cXG5AbWVkaWEgb25seSBzY3JlZW4gYW5kIChtYXgtd2lkdGg6IDcwMHB4KSB7XFxuICAgIC5jb250YWluZXIgLmJveCAud2VhdGhlckRpc3BsYXkge1xcbiAgICAgICAgZGlzcGxheTogZmxleDsgXFxuICAgICAgICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xcbiAgICAgICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcXG4gICAgICAgIGNvbG9yOiB3aGl0ZTtcXG4gICAgfVxcbiAgICAuY29udGFpbmVyIC5ib3ggLmJ1dHRvbiB7XFxuICAgICAgICBwYWRkaW5nOiA0cHg7XFxuICAgICAgICBtYXJnaW46IDMwcHggMHB4IDIwcHggMTBweDtcXG4gICAgICAgIGZvbnQtc2l6ZTogbGFyZ2U7XFxuXFxuICAgIH0gICAgXFxufVwiLCBcIlwiLHtcInZlcnNpb25cIjozLFwic291cmNlc1wiOltcIndlYnBhY2s6Ly8uL3NyYy9zdHlsZTIuY3NzXCJdLFwibmFtZXNcIjpbXSxcIm1hcHBpbmdzXCI6XCI7QUFDQTtJQUNJLFlBQVk7SUFDWiwyQkFBMkI7SUFDM0IsZ0JBQWdCO0lBQ2hCLGdCQUFnQjtJQUNoQixvQ0FBb0M7SUFDcEMsa0JBQWtCO0lBQ2xCLHVCQUF1QjtJQUN2Qix1QkFBdUI7QUFDM0I7QUFDQTtJQUNJLFlBQVk7SUFDWixhQUFhO0lBQ2IsbUJBQW1CO0lBQ25CLFNBQVM7SUFDVCw2QkFBNkI7QUFDakM7QUFDQTtJQUNJLGdCQUFnQjtJQUNoQixnQkFBZ0I7SUFDaEIscUdBQXFHOztBQUV6RztBQUNBO0lBQ0ksYUFBYTtJQUNiLG1CQUFtQjtJQUNuQixjQUFjO0FBQ2xCO0FBQ0E7SUFDSSxlQUFlO0lBQ2YsZ0JBQWdCO0FBQ3BCO0FBQ0E7SUFDSSxlQUFlO0lBQ2YsZ0JBQWdCO0FBQ3BCO0FBQ0E7SUFDSSxlQUFlO0lBQ2YsaUJBQWlCO0FBQ3JCO0FBQ0E7SUFDSSxVQUFVO0lBQ1YsU0FBUztJQUNULFVBQVU7SUFDVixjQUFjO0FBQ2xCOztBQUVBO0lBQ0k7UUFDSSxhQUFhO1FBQ2Isc0JBQXNCO1FBQ3RCLG1CQUFtQjtRQUNuQixZQUFZO0lBQ2hCO0lBQ0E7UUFDSSxZQUFZO1FBQ1osMEJBQTBCO1FBQzFCLGdCQUFnQjs7SUFFcEI7QUFDSlwiLFwic291cmNlc0NvbnRlbnRcIjpbXCJcXG4uY29udGFpbmVyIC5ib3ggLmJ1dHRvbiB7XFxuICAgIHBhZGRpbmc6IDhweDtcXG4gICAgbWFyZ2luOiAzMHB4IDIwcHggMjBweCAyMHB4O1xcbiAgICBmb250LXNpemU6IGxhcmdlO1xcbiAgICBmb250LXdlaWdodDogNjAwO1xcbiAgICBib3JkZXI6IDNweCBzb2xpZCByZ2IoMTM4LCAxMzEsIDEzMSk7XFxuICAgIGJvcmRlci1yYWRpdXM6IDVweDtcXG4gICAgYmFja2dyb3VuZDogdHJhbnNwYXJlbnQ7XFxuICAgIGNvbG9yOiByZ2IoMTIyLCA4NCwgODQpO1xcbn1cXG4uY29udGFpbmVyIC5ib3ggLndlYXRoZXJEaXNwbGF5IHtcXG4gICAgaGVpZ2h0OiAxMDAlO1xcbiAgICBkaXNwbGF5OiBmbGV4OyBcXG4gICAgZmxleC1kaXJlY3Rpb246IHJvdztcXG4gICAgZ2FwOiAxMHB4O1xcbiAgICBqdXN0aWZ5LWNvbnRlbnQ6IHNwYWNlLWV2ZW5seTtcXG59XFxuLmNvbnRhaW5lciAuYm94IC53ZWF0aGVyRGlzcGxheSAuZm9yY2FzdCAuZGF5IHtcXG4gICAgbWFyZ2luLXRvcDogMjBweDtcXG4gICAgZm9udC1zaXplOiBsYXJnZTtcXG4gICAgZm9udC1mYW1pbHk6ICdUcmVidWNoZXQgTVMnLCAnTHVjaWRhIFNhbnMgVW5pY29kZScsICdMdWNpZGEgR3JhbmRlJywgJ0x1Y2lkYSBTYW5zJywgQXJpYWwsIHNhbnMtc2VyaWY7XFxuXFxufVxcbi5jb250YWluZXIgLmJveCAud2VhdGhlckRpc3BsYXkgLmFjY29yZCB7XFxuICAgIGRpc3BsYXk6IGZsZXg7XFxuICAgIGZsZXgtZGlyZWN0aW9uOiByb3c7XFxuICAgIHBhZGRpbmc6IDVweCAwO1xcbn1cXG4uY29udGFpbmVyIC5ib3ggLndlYXRoZXJEaXNwbGF5IC5mb3JjYXN0IC5hY2NvcmQgLm1pbi1kZWdyZWUge1xcbiAgICBmb250LXNpemU6IDEzcHg7XFxuICAgIGZvbnQtd2VpZ2h0OiAyMDA7XFxufVxcbi5jb250YWluZXIgLmJveCAud2VhdGhlckRpc3BsYXkgLmZvcmNhc3QgLmFjY29yZCAuYXZnLWRlZ3JlZSB7XFxuICAgIGZvbnQtc2l6ZTogMTdweDtcXG4gICAgZm9udC13ZWlnaHQ6IDYwMDtcXG59XFxuLmNvbnRhaW5lciAuYm94IC53ZWF0aGVyRGlzcGxheSAuZm9yY2FzdCAuYWNjb3JkIC5tYXgtZGVncmVlIHtcXG4gICAgZm9udC1zaXplOiAyMHB4O1xcbiAgICBmb250LXdlaWdodDogYm9sZDtcXG59XFxuLmNvbnRhaW5lciAuYm94IC53ZWF0aGVyRGlzcGxheSAuZm9yY2FzdCAuYWNjb3JkIC5jbG91ZC1pY29uIHtcXG4gICAgd2lkdGg6IDVweDtcXG4gICAgbWFyZ2luOiAwO1xcbiAgICBwYWRkaW5nOiAwO1xcbiAgICBmb250LXNpemU6IDVweDtcXG59XFxuXFxuQG1lZGlhIG9ubHkgc2NyZWVuIGFuZCAobWF4LXdpZHRoOiA3MDBweCkge1xcbiAgICAuY29udGFpbmVyIC5ib3ggLndlYXRoZXJEaXNwbGF5IHtcXG4gICAgICAgIGRpc3BsYXk6IGZsZXg7IFxcbiAgICAgICAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcXG4gICAgICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XFxuICAgICAgICBjb2xvcjogd2hpdGU7XFxuICAgIH1cXG4gICAgLmNvbnRhaW5lciAuYm94IC5idXR0b24ge1xcbiAgICAgICAgcGFkZGluZzogNHB4O1xcbiAgICAgICAgbWFyZ2luOiAzMHB4IDBweCAyMHB4IDEwcHg7XFxuICAgICAgICBmb250LXNpemU6IGxhcmdlO1xcblxcbiAgICB9ICAgIFxcbn1cIl0sXCJzb3VyY2VSb290XCI6XCJcIn1dKTtcbi8vIEV4cG9ydHNcbmV4cG9ydCBkZWZhdWx0IF9fX0NTU19MT0FERVJfRVhQT1JUX19fO1xuIiwiLy8gSW1wb3J0c1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18gZnJvbSBcIi4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9zb3VyY2VNYXBzLmpzXCI7XG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fIGZyb20gXCIuLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzXCI7XG52YXIgX19fQ1NTX0xPQURFUl9FWFBPUlRfX18gPSBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18oX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyk7XG4vLyBNb2R1bGVcbl9fX0NTU19MT0FERVJfRVhQT1JUX19fLnB1c2goW21vZHVsZS5pZCwgXCIuY29udGFpbmVyIC5ib3ggLndlYXRoZXJEaXNwbGF5IC5sb29wQ29udGFpbmVye1xcbiAgICBkaXNwbGF5OiBub25lO1xcbn1cXG4uY29udGFpbmVyIC5ib3ggLndlYXRoZXJEaXNwbGF5IC5hY3RpdmV7XFxuICAgIGRpc3BsYXk6IGNvbnRlbnRzO1xcbn1cXG5cXG4uY29udGFpbmVyIC5ib3ggLmxlZnQtYXJyb3csIC5yaWdodC1hcnJvdyB7XFxuICAgIGRpc3BsYXk6IG5vbmU7XFxuICAgIHBhZGRpbmc6IDhweDtcXG4gICAgbWFyZ2luOiAzMHB4IDIwcHggMjBweCAyMHB4O1xcbiAgICBmb250LXNpemU6IDI1cHg7XFxuICAgIGZvbnQtd2VpZ2h0OiA2MDA7XFxuICAgIGJvcmRlcjogbm9uZTtcXG4gICAgYm9yZGVyLXJhZGl1czogNXB4O1xcbiAgICBiYWNrZ3JvdW5kOiB0cmFuc3BhcmVudDtcXG4gICAgY29sb3I6IHJnYigxMjIsIDg0LCA4NCk7XFxufVxcbi5jb250YWluZXIgLmJveCAubGVmdC1hcnJvdzpob3ZlciwgLnJpZ2h0LWFycm93OmhvdmVyIHtcXG4gICAgYm9yZGVyOiAzcHggc29saWQgcmdiKDEzOCwgMTMxLCAxMzEpO1xcbiAgICBib3JkZXItcmFkaXVzOiAxMDAlO1xcbn1cXG4uY29udGFpbmVyIC5ib3ggLmFycm93IHtcXG4gICAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xcbn1cXG5cXG5cXG4uY29udGFpbmVyIC5ib3ggLndlYXRoZXJEaXNwbGF5IC5kYXktZm9yY2FzdHtcXG4gICAgb3ZlcmZsb3cteDogaGlkZGVuO1xcbn1cXG4uY29udGFpbmVyIC5ib3ggLndlYXRoZXJEaXNwbGF5IC5kYXktZm9yY2FzdCAuZGF5IHtcXG4gICAgbWFyZ2luLXRvcDogMjBweDtcXG4gICAgZm9udC1zaXplOiBsYXJnZTtcXG4gICAgZm9udC1mYW1pbHk6ICdUcmVidWNoZXQgTVMnLCAnTHVjaWRhIFNhbnMgVW5pY29kZScsICdMdWNpZGEgR3JhbmRlJywgJ0x1Y2lkYSBTYW5zJywgQXJpYWwsIHNhbnMtc2VyaWY7XFxuXFxufVxcbi5jb250YWluZXIgLmJveCAud2VhdGhlckRpc3BsYXkgLmRheS1mb3JjYXN0IC5hY2NvcmQge1xcbiAgICBkaXNwbGF5OiBmbGV4O1xcbiAgICBmbGV4LWRpcmVjdGlvbjogcm93O1xcbiAgICBwYWRkaW5nOiA1cHggMDtcXG59XFxuLmNvbnRhaW5lciAuYm94IC53ZWF0aGVyRGlzcGxheSAuZGF5LWZvcmNhc3QgLmFjY29yZCAubWluLWRlZ3JlZSB7XFxuICAgIGZvbnQtc2l6ZTogMTNweDtcXG4gICAgZm9udC13ZWlnaHQ6IDIwMDtcXG59XFxuLmNvbnRhaW5lciAuYm94IC53ZWF0aGVyRGlzcGxheSAuZGF5LWZvcmNhc3QgLmFjY29yZCAuYXZnLWRlZ3JlZSB7XFxuICAgIGZvbnQtc2l6ZTogMTdweDtcXG4gICAgZm9udC13ZWlnaHQ6IDYwMDtcXG59XFxuLmNvbnRhaW5lciAuYm94IC53ZWF0aGVyRGlzcGxheSAuZGF5LWZvcmNhc3QgLmFjY29yZCAubWF4LWRlZ3JlZSB7XFxuICAgIGZvbnQtc2l6ZTogMjBweDtcXG4gICAgZm9udC13ZWlnaHQ6IGJvbGQ7XFxufVxcbi5jb250YWluZXIgLmJveCAud2VhdGhlckRpc3BsYXkgLmRheS1mb3JjYXN0IC5hY2NvcmQgLmNsb3VkLWljb24ge1xcbiAgICB3aWR0aDogNXB4O1xcbiAgICBtYXJnaW46IDA7XFxuICAgIHBhZGRpbmc6IDA7XFxuICAgIGZvbnQtc2l6ZTogNXB4O1xcbn1cXG4uY29udGFpbmVyIC5lcnJvci1ib3gge1xcbiAgICBkaXNwbGF5OiBmbGV4O1xcbiAgICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcXG4gICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcXG4gICAgcG9zaXRpb246IGZpeGVkO1xcbiAgICB0b3A6IDA7XFxuICAgIHJpZ2h0OiAwO1xcbiAgICB3aWR0aDogNTAwcHg7XFxuICAgIGhlaWdodDogNTBweDtcXG4gICAgZm9udC1zaXplOiAyNXB4O1xcbiAgICBmb250LWZhbWlseTogY3Vyc2l2ZTtcXG4gICAgY29sb3I6IHdoaXRlO1xcbiAgICBiYWNrZ3JvdW5kOiByZ2IoMTMxLCAxNTEsIDE1OCk7XFxuICAgIHotaW5kZXg6IDEwMDtcXG4gICAgYW5pbWF0aW9uOiBzaG93RXJyb3IgMnMgZWFzZS1pbi1vdXQgMHMgbm9ybWFsO1xcbn1cXG4uY29udGFpbmVyIC5lcnJvci1tc2d7XFxuICAgIHZpc2liaWxpdHk6IHZpc2libGU7XFxuICAgIGFuaW1hdGlvbjogc2hvd0Vycm9yTXNnIDFzIGVhc2UtaW4tb3V0IDBzIG5vcm1hbDtcXG59XFxuXFxuLmNvbnRhaW5lciAuYWN0aXZlIHtcXG4gICAgZGlzcGxheTogbm9uZTtcXG59XFxuQGtleWZyYW1lcyBzaG93RXJyb3Ige1xcbiAgICAwJSB7XFxuICAgICAgICBvcGFjaXR5OiAwLjI7XFxuICAgIH1cXG4gICAgODAlIHtcXG4gICAgICAgIG9wYWNpdHk6IDAuODtcXG4gICAgfVxcbn1cXG5Aa2V5ZnJhbWVzIHNob3dFcnJvck1zZyB7XFxuICAgIDAlIHtcXG4gICAgICAgIHRyYW5zZm9ybTogcm90YXRlWCgxMGRlZyk7XFxuICAgIH1cXG4gICAgMTAwJSB7XFxuICAgICAgICB0cmFuc2Zvcm06IHJvdGF0ZVgoMTAwZGVnKTtcXG5cXG4gICAgfVxcbn1cXG5cXG5AbWVkaWEgb25seSBzY3JlZW4gYW5kIChtYXgtd2lkdGg6IDcwMHB4KSB7XFxuICAgIC5jb250YWluZXIgLmJveCAud2VhdGhlckRpc3BsYXkgLmFjdGl2ZXtcXG4gICAgICAgIGRpc3BsYXk6IGZsZXg7XFxuICAgICAgICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xcbiAgICB9XFxuICAgIC5jb250YWluZXIgLmJveCAubGVmdC1hcnJvdywgLnJpZ2h0LWFycm93IHtcXG4gICAgICAgIHBhZGRpbmc6IDNweDtcXG4gICAgICAgIG1hcmdpbjogMzBweCA4cHggMjBweCA4cHg7XFxuICAgIH1cXG4gICAgLmNvbnRhaW5lciAuZXJyb3ItYm94IHtcXG4gICAgICAgIHdpZHRoOiAxMDAlO1xcbiAgICAgICAgaGVpZ2h0OiA1MHB4O1xcbiAgICB9XFxufVwiLCBcIlwiLHtcInZlcnNpb25cIjozLFwic291cmNlc1wiOltcIndlYnBhY2s6Ly8uL3NyYy9zdHlsZTMuY3NzXCJdLFwibmFtZXNcIjpbXSxcIm1hcHBpbmdzXCI6XCJBQUFBO0lBQ0ksYUFBYTtBQUNqQjtBQUNBO0lBQ0ksaUJBQWlCO0FBQ3JCOztBQUVBO0lBQ0ksYUFBYTtJQUNiLFlBQVk7SUFDWiwyQkFBMkI7SUFDM0IsZUFBZTtJQUNmLGdCQUFnQjtJQUNoQixZQUFZO0lBQ1osa0JBQWtCO0lBQ2xCLHVCQUF1QjtJQUN2Qix1QkFBdUI7QUFDM0I7QUFDQTtJQUNJLG9DQUFvQztJQUNwQyxtQkFBbUI7QUFDdkI7QUFDQTtJQUNJLHFCQUFxQjtBQUN6Qjs7O0FBR0E7SUFDSSxrQkFBa0I7QUFDdEI7QUFDQTtJQUNJLGdCQUFnQjtJQUNoQixnQkFBZ0I7SUFDaEIscUdBQXFHOztBQUV6RztBQUNBO0lBQ0ksYUFBYTtJQUNiLG1CQUFtQjtJQUNuQixjQUFjO0FBQ2xCO0FBQ0E7SUFDSSxlQUFlO0lBQ2YsZ0JBQWdCO0FBQ3BCO0FBQ0E7SUFDSSxlQUFlO0lBQ2YsZ0JBQWdCO0FBQ3BCO0FBQ0E7SUFDSSxlQUFlO0lBQ2YsaUJBQWlCO0FBQ3JCO0FBQ0E7SUFDSSxVQUFVO0lBQ1YsU0FBUztJQUNULFVBQVU7SUFDVixjQUFjO0FBQ2xCO0FBQ0E7SUFDSSxhQUFhO0lBQ2IsdUJBQXVCO0lBQ3ZCLG1CQUFtQjtJQUNuQixlQUFlO0lBQ2YsTUFBTTtJQUNOLFFBQVE7SUFDUixZQUFZO0lBQ1osWUFBWTtJQUNaLGVBQWU7SUFDZixvQkFBb0I7SUFDcEIsWUFBWTtJQUNaLDhCQUE4QjtJQUM5QixZQUFZO0lBQ1osNkNBQTZDO0FBQ2pEO0FBQ0E7SUFDSSxtQkFBbUI7SUFDbkIsZ0RBQWdEO0FBQ3BEOztBQUVBO0lBQ0ksYUFBYTtBQUNqQjtBQUNBO0lBQ0k7UUFDSSxZQUFZO0lBQ2hCO0lBQ0E7UUFDSSxZQUFZO0lBQ2hCO0FBQ0o7QUFDQTtJQUNJO1FBQ0kseUJBQXlCO0lBQzdCO0lBQ0E7UUFDSSwwQkFBMEI7O0lBRTlCO0FBQ0o7O0FBRUE7SUFDSTtRQUNJLGFBQWE7UUFDYixzQkFBc0I7SUFDMUI7SUFDQTtRQUNJLFlBQVk7UUFDWix5QkFBeUI7SUFDN0I7SUFDQTtRQUNJLFdBQVc7UUFDWCxZQUFZO0lBQ2hCO0FBQ0pcIixcInNvdXJjZXNDb250ZW50XCI6W1wiLmNvbnRhaW5lciAuYm94IC53ZWF0aGVyRGlzcGxheSAubG9vcENvbnRhaW5lcntcXG4gICAgZGlzcGxheTogbm9uZTtcXG59XFxuLmNvbnRhaW5lciAuYm94IC53ZWF0aGVyRGlzcGxheSAuYWN0aXZle1xcbiAgICBkaXNwbGF5OiBjb250ZW50cztcXG59XFxuXFxuLmNvbnRhaW5lciAuYm94IC5sZWZ0LWFycm93LCAucmlnaHQtYXJyb3cge1xcbiAgICBkaXNwbGF5OiBub25lO1xcbiAgICBwYWRkaW5nOiA4cHg7XFxuICAgIG1hcmdpbjogMzBweCAyMHB4IDIwcHggMjBweDtcXG4gICAgZm9udC1zaXplOiAyNXB4O1xcbiAgICBmb250LXdlaWdodDogNjAwO1xcbiAgICBib3JkZXI6IG5vbmU7XFxuICAgIGJvcmRlci1yYWRpdXM6IDVweDtcXG4gICAgYmFja2dyb3VuZDogdHJhbnNwYXJlbnQ7XFxuICAgIGNvbG9yOiByZ2IoMTIyLCA4NCwgODQpO1xcbn1cXG4uY29udGFpbmVyIC5ib3ggLmxlZnQtYXJyb3c6aG92ZXIsIC5yaWdodC1hcnJvdzpob3ZlciB7XFxuICAgIGJvcmRlcjogM3B4IHNvbGlkIHJnYigxMzgsIDEzMSwgMTMxKTtcXG4gICAgYm9yZGVyLXJhZGl1czogMTAwJTtcXG59XFxuLmNvbnRhaW5lciAuYm94IC5hcnJvdyB7XFxuICAgIGRpc3BsYXk6IGlubGluZS1ibG9jaztcXG59XFxuXFxuXFxuLmNvbnRhaW5lciAuYm94IC53ZWF0aGVyRGlzcGxheSAuZGF5LWZvcmNhc3R7XFxuICAgIG92ZXJmbG93LXg6IGhpZGRlbjtcXG59XFxuLmNvbnRhaW5lciAuYm94IC53ZWF0aGVyRGlzcGxheSAuZGF5LWZvcmNhc3QgLmRheSB7XFxuICAgIG1hcmdpbi10b3A6IDIwcHg7XFxuICAgIGZvbnQtc2l6ZTogbGFyZ2U7XFxuICAgIGZvbnQtZmFtaWx5OiAnVHJlYnVjaGV0IE1TJywgJ0x1Y2lkYSBTYW5zIFVuaWNvZGUnLCAnTHVjaWRhIEdyYW5kZScsICdMdWNpZGEgU2FucycsIEFyaWFsLCBzYW5zLXNlcmlmO1xcblxcbn1cXG4uY29udGFpbmVyIC5ib3ggLndlYXRoZXJEaXNwbGF5IC5kYXktZm9yY2FzdCAuYWNjb3JkIHtcXG4gICAgZGlzcGxheTogZmxleDtcXG4gICAgZmxleC1kaXJlY3Rpb246IHJvdztcXG4gICAgcGFkZGluZzogNXB4IDA7XFxufVxcbi5jb250YWluZXIgLmJveCAud2VhdGhlckRpc3BsYXkgLmRheS1mb3JjYXN0IC5hY2NvcmQgLm1pbi1kZWdyZWUge1xcbiAgICBmb250LXNpemU6IDEzcHg7XFxuICAgIGZvbnQtd2VpZ2h0OiAyMDA7XFxufVxcbi5jb250YWluZXIgLmJveCAud2VhdGhlckRpc3BsYXkgLmRheS1mb3JjYXN0IC5hY2NvcmQgLmF2Zy1kZWdyZWUge1xcbiAgICBmb250LXNpemU6IDE3cHg7XFxuICAgIGZvbnQtd2VpZ2h0OiA2MDA7XFxufVxcbi5jb250YWluZXIgLmJveCAud2VhdGhlckRpc3BsYXkgLmRheS1mb3JjYXN0IC5hY2NvcmQgLm1heC1kZWdyZWUge1xcbiAgICBmb250LXNpemU6IDIwcHg7XFxuICAgIGZvbnQtd2VpZ2h0OiBib2xkO1xcbn1cXG4uY29udGFpbmVyIC5ib3ggLndlYXRoZXJEaXNwbGF5IC5kYXktZm9yY2FzdCAuYWNjb3JkIC5jbG91ZC1pY29uIHtcXG4gICAgd2lkdGg6IDVweDtcXG4gICAgbWFyZ2luOiAwO1xcbiAgICBwYWRkaW5nOiAwO1xcbiAgICBmb250LXNpemU6IDVweDtcXG59XFxuLmNvbnRhaW5lciAuZXJyb3ItYm94IHtcXG4gICAgZGlzcGxheTogZmxleDtcXG4gICAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XFxuICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XFxuICAgIHBvc2l0aW9uOiBmaXhlZDtcXG4gICAgdG9wOiAwO1xcbiAgICByaWdodDogMDtcXG4gICAgd2lkdGg6IDUwMHB4O1xcbiAgICBoZWlnaHQ6IDUwcHg7XFxuICAgIGZvbnQtc2l6ZTogMjVweDtcXG4gICAgZm9udC1mYW1pbHk6IGN1cnNpdmU7XFxuICAgIGNvbG9yOiB3aGl0ZTtcXG4gICAgYmFja2dyb3VuZDogcmdiKDEzMSwgMTUxLCAxNTgpO1xcbiAgICB6LWluZGV4OiAxMDA7XFxuICAgIGFuaW1hdGlvbjogc2hvd0Vycm9yIDJzIGVhc2UtaW4tb3V0IDBzIG5vcm1hbDtcXG59XFxuLmNvbnRhaW5lciAuZXJyb3ItbXNne1xcbiAgICB2aXNpYmlsaXR5OiB2aXNpYmxlO1xcbiAgICBhbmltYXRpb246IHNob3dFcnJvck1zZyAxcyBlYXNlLWluLW91dCAwcyBub3JtYWw7XFxufVxcblxcbi5jb250YWluZXIgLmFjdGl2ZSB7XFxuICAgIGRpc3BsYXk6IG5vbmU7XFxufVxcbkBrZXlmcmFtZXMgc2hvd0Vycm9yIHtcXG4gICAgMCUge1xcbiAgICAgICAgb3BhY2l0eTogMC4yO1xcbiAgICB9XFxuICAgIDgwJSB7XFxuICAgICAgICBvcGFjaXR5OiAwLjg7XFxuICAgIH1cXG59XFxuQGtleWZyYW1lcyBzaG93RXJyb3JNc2cge1xcbiAgICAwJSB7XFxuICAgICAgICB0cmFuc2Zvcm06IHJvdGF0ZVgoMTBkZWcpO1xcbiAgICB9XFxuICAgIDEwMCUge1xcbiAgICAgICAgdHJhbnNmb3JtOiByb3RhdGVYKDEwMGRlZyk7XFxuXFxuICAgIH1cXG59XFxuXFxuQG1lZGlhIG9ubHkgc2NyZWVuIGFuZCAobWF4LXdpZHRoOiA3MDBweCkge1xcbiAgICAuY29udGFpbmVyIC5ib3ggLndlYXRoZXJEaXNwbGF5IC5hY3RpdmV7XFxuICAgICAgICBkaXNwbGF5OiBmbGV4O1xcbiAgICAgICAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcXG4gICAgfVxcbiAgICAuY29udGFpbmVyIC5ib3ggLmxlZnQtYXJyb3csIC5yaWdodC1hcnJvdyB7XFxuICAgICAgICBwYWRkaW5nOiAzcHg7XFxuICAgICAgICBtYXJnaW46IDMwcHggOHB4IDIwcHggOHB4O1xcbiAgICB9XFxuICAgIC5jb250YWluZXIgLmVycm9yLWJveCB7XFxuICAgICAgICB3aWR0aDogMTAwJTtcXG4gICAgICAgIGhlaWdodDogNTBweDtcXG4gICAgfVxcbn1cIl0sXCJzb3VyY2VSb290XCI6XCJcIn1dKTtcbi8vIEV4cG9ydHNcbmV4cG9ydCBkZWZhdWx0IF9fX0NTU19MT0FERVJfRVhQT1JUX19fO1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qXG4gIE1JVCBMaWNlbnNlIGh0dHA6Ly93d3cub3BlbnNvdXJjZS5vcmcvbGljZW5zZXMvbWl0LWxpY2Vuc2UucGhwXG4gIEF1dGhvciBUb2JpYXMgS29wcGVycyBAc29rcmFcbiovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChjc3NXaXRoTWFwcGluZ1RvU3RyaW5nKSB7XG4gIHZhciBsaXN0ID0gW107XG5cbiAgLy8gcmV0dXJuIHRoZSBsaXN0IG9mIG1vZHVsZXMgYXMgY3NzIHN0cmluZ1xuICBsaXN0LnRvU3RyaW5nID0gZnVuY3Rpb24gdG9TdHJpbmcoKSB7XG4gICAgcmV0dXJuIHRoaXMubWFwKGZ1bmN0aW9uIChpdGVtKSB7XG4gICAgICB2YXIgY29udGVudCA9IFwiXCI7XG4gICAgICB2YXIgbmVlZExheWVyID0gdHlwZW9mIGl0ZW1bNV0gIT09IFwidW5kZWZpbmVkXCI7XG4gICAgICBpZiAoaXRlbVs0XSkge1xuICAgICAgICBjb250ZW50ICs9IFwiQHN1cHBvcnRzIChcIi5jb25jYXQoaXRlbVs0XSwgXCIpIHtcIik7XG4gICAgICB9XG4gICAgICBpZiAoaXRlbVsyXSkge1xuICAgICAgICBjb250ZW50ICs9IFwiQG1lZGlhIFwiLmNvbmNhdChpdGVtWzJdLCBcIiB7XCIpO1xuICAgICAgfVxuICAgICAgaWYgKG5lZWRMYXllcikge1xuICAgICAgICBjb250ZW50ICs9IFwiQGxheWVyXCIuY29uY2F0KGl0ZW1bNV0ubGVuZ3RoID4gMCA/IFwiIFwiLmNvbmNhdChpdGVtWzVdKSA6IFwiXCIsIFwiIHtcIik7XG4gICAgICB9XG4gICAgICBjb250ZW50ICs9IGNzc1dpdGhNYXBwaW5nVG9TdHJpbmcoaXRlbSk7XG4gICAgICBpZiAobmVlZExheWVyKSB7XG4gICAgICAgIGNvbnRlbnQgKz0gXCJ9XCI7XG4gICAgICB9XG4gICAgICBpZiAoaXRlbVsyXSkge1xuICAgICAgICBjb250ZW50ICs9IFwifVwiO1xuICAgICAgfVxuICAgICAgaWYgKGl0ZW1bNF0pIHtcbiAgICAgICAgY29udGVudCArPSBcIn1cIjtcbiAgICAgIH1cbiAgICAgIHJldHVybiBjb250ZW50O1xuICAgIH0pLmpvaW4oXCJcIik7XG4gIH07XG5cbiAgLy8gaW1wb3J0IGEgbGlzdCBvZiBtb2R1bGVzIGludG8gdGhlIGxpc3RcbiAgbGlzdC5pID0gZnVuY3Rpb24gaShtb2R1bGVzLCBtZWRpYSwgZGVkdXBlLCBzdXBwb3J0cywgbGF5ZXIpIHtcbiAgICBpZiAodHlwZW9mIG1vZHVsZXMgPT09IFwic3RyaW5nXCIpIHtcbiAgICAgIG1vZHVsZXMgPSBbW251bGwsIG1vZHVsZXMsIHVuZGVmaW5lZF1dO1xuICAgIH1cbiAgICB2YXIgYWxyZWFkeUltcG9ydGVkTW9kdWxlcyA9IHt9O1xuICAgIGlmIChkZWR1cGUpIHtcbiAgICAgIGZvciAodmFyIGsgPSAwOyBrIDwgdGhpcy5sZW5ndGg7IGsrKykge1xuICAgICAgICB2YXIgaWQgPSB0aGlzW2tdWzBdO1xuICAgICAgICBpZiAoaWQgIT0gbnVsbCkge1xuICAgICAgICAgIGFscmVhZHlJbXBvcnRlZE1vZHVsZXNbaWRdID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICBmb3IgKHZhciBfayA9IDA7IF9rIDwgbW9kdWxlcy5sZW5ndGg7IF9rKyspIHtcbiAgICAgIHZhciBpdGVtID0gW10uY29uY2F0KG1vZHVsZXNbX2tdKTtcbiAgICAgIGlmIChkZWR1cGUgJiYgYWxyZWFkeUltcG9ydGVkTW9kdWxlc1tpdGVtWzBdXSkge1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cbiAgICAgIGlmICh0eXBlb2YgbGF5ZXIgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBpdGVtWzVdID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICAgICAgaXRlbVs1XSA9IGxheWVyO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGl0ZW1bMV0gPSBcIkBsYXllclwiLmNvbmNhdChpdGVtWzVdLmxlbmd0aCA+IDAgPyBcIiBcIi5jb25jYXQoaXRlbVs1XSkgOiBcIlwiLCBcIiB7XCIpLmNvbmNhdChpdGVtWzFdLCBcIn1cIik7XG4gICAgICAgICAgaXRlbVs1XSA9IGxheWVyO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAobWVkaWEpIHtcbiAgICAgICAgaWYgKCFpdGVtWzJdKSB7XG4gICAgICAgICAgaXRlbVsyXSA9IG1lZGlhO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGl0ZW1bMV0gPSBcIkBtZWRpYSBcIi5jb25jYXQoaXRlbVsyXSwgXCIge1wiKS5jb25jYXQoaXRlbVsxXSwgXCJ9XCIpO1xuICAgICAgICAgIGl0ZW1bMl0gPSBtZWRpYTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKHN1cHBvcnRzKSB7XG4gICAgICAgIGlmICghaXRlbVs0XSkge1xuICAgICAgICAgIGl0ZW1bNF0gPSBcIlwiLmNvbmNhdChzdXBwb3J0cyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaXRlbVsxXSA9IFwiQHN1cHBvcnRzIChcIi5jb25jYXQoaXRlbVs0XSwgXCIpIHtcIikuY29uY2F0KGl0ZW1bMV0sIFwifVwiKTtcbiAgICAgICAgICBpdGVtWzRdID0gc3VwcG9ydHM7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGxpc3QucHVzaChpdGVtKTtcbiAgICB9XG4gIH07XG4gIHJldHVybiBsaXN0O1xufTsiLCJcInVzZSBzdHJpY3RcIjtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAodXJsLCBvcHRpb25zKSB7XG4gIGlmICghb3B0aW9ucykge1xuICAgIG9wdGlvbnMgPSB7fTtcbiAgfVxuICBpZiAoIXVybCkge1xuICAgIHJldHVybiB1cmw7XG4gIH1cbiAgdXJsID0gU3RyaW5nKHVybC5fX2VzTW9kdWxlID8gdXJsLmRlZmF1bHQgOiB1cmwpO1xuXG4gIC8vIElmIHVybCBpcyBhbHJlYWR5IHdyYXBwZWQgaW4gcXVvdGVzLCByZW1vdmUgdGhlbVxuICBpZiAoL15bJ1wiXS4qWydcIl0kLy50ZXN0KHVybCkpIHtcbiAgICB1cmwgPSB1cmwuc2xpY2UoMSwgLTEpO1xuICB9XG4gIGlmIChvcHRpb25zLmhhc2gpIHtcbiAgICB1cmwgKz0gb3B0aW9ucy5oYXNoO1xuICB9XG5cbiAgLy8gU2hvdWxkIHVybCBiZSB3cmFwcGVkP1xuICAvLyBTZWUgaHR0cHM6Ly9kcmFmdHMuY3Nzd2cub3JnL2Nzcy12YWx1ZXMtMy8jdXJsc1xuICBpZiAoL1tcIicoKSBcXHRcXG5dfCglMjApLy50ZXN0KHVybCkgfHwgb3B0aW9ucy5uZWVkUXVvdGVzKSB7XG4gICAgcmV0dXJuIFwiXFxcIlwiLmNvbmNhdCh1cmwucmVwbGFjZSgvXCIvZywgJ1xcXFxcIicpLnJlcGxhY2UoL1xcbi9nLCBcIlxcXFxuXCIpLCBcIlxcXCJcIik7XG4gIH1cbiAgcmV0dXJuIHVybDtcbn07IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0ZW0pIHtcbiAgdmFyIGNvbnRlbnQgPSBpdGVtWzFdO1xuICB2YXIgY3NzTWFwcGluZyA9IGl0ZW1bM107XG4gIGlmICghY3NzTWFwcGluZykge1xuICAgIHJldHVybiBjb250ZW50O1xuICB9XG4gIGlmICh0eXBlb2YgYnRvYSA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgdmFyIGJhc2U2NCA9IGJ0b2EodW5lc2NhcGUoZW5jb2RlVVJJQ29tcG9uZW50KEpTT04uc3RyaW5naWZ5KGNzc01hcHBpbmcpKSkpO1xuICAgIHZhciBkYXRhID0gXCJzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04O2Jhc2U2NCxcIi5jb25jYXQoYmFzZTY0KTtcbiAgICB2YXIgc291cmNlTWFwcGluZyA9IFwiLyojIFwiLmNvbmNhdChkYXRhLCBcIiAqL1wiKTtcbiAgICByZXR1cm4gW2NvbnRlbnRdLmNvbmNhdChbc291cmNlTWFwcGluZ10pLmpvaW4oXCJcXG5cIik7XG4gIH1cbiAgcmV0dXJuIFtjb250ZW50XS5qb2luKFwiXFxuXCIpO1xufTsiLCIhZnVuY3Rpb24odCxlKXtcIm9iamVjdFwiPT10eXBlb2YgZXhwb3J0cyYmXCJ1bmRlZmluZWRcIiE9dHlwZW9mIG1vZHVsZT9tb2R1bGUuZXhwb3J0cz1lKCk6XCJmdW5jdGlvblwiPT10eXBlb2YgZGVmaW5lJiZkZWZpbmUuYW1kP2RlZmluZShlKToodD1cInVuZGVmaW5lZFwiIT10eXBlb2YgZ2xvYmFsVGhpcz9nbG9iYWxUaGlzOnR8fHNlbGYpLmRheWpzPWUoKX0odGhpcywoZnVuY3Rpb24oKXtcInVzZSBzdHJpY3RcIjt2YXIgdD0xZTMsZT02ZTQsbj0zNmU1LHI9XCJtaWxsaXNlY29uZFwiLGk9XCJzZWNvbmRcIixzPVwibWludXRlXCIsdT1cImhvdXJcIixhPVwiZGF5XCIsbz1cIndlZWtcIixmPVwibW9udGhcIixoPVwicXVhcnRlclwiLGM9XCJ5ZWFyXCIsZD1cImRhdGVcIixsPVwiSW52YWxpZCBEYXRlXCIsJD0vXihcXGR7NH0pWy0vXT8oXFxkezEsMn0pP1stL10/KFxcZHswLDJ9KVtUdFxcc10qKFxcZHsxLDJ9KT86PyhcXGR7MSwyfSk/Oj8oXFxkezEsMn0pP1suOl0/KFxcZCspPyQvLHk9L1xcWyhbXlxcXV0rKV18WXsxLDR9fE17MSw0fXxEezEsMn18ZHsxLDR9fEh7MSwyfXxoezEsMn18YXxBfG17MSwyfXxzezEsMn18WnsxLDJ9fFNTUy9nLE09e25hbWU6XCJlblwiLHdlZWtkYXlzOlwiU3VuZGF5X01vbmRheV9UdWVzZGF5X1dlZG5lc2RheV9UaHVyc2RheV9GcmlkYXlfU2F0dXJkYXlcIi5zcGxpdChcIl9cIiksbW9udGhzOlwiSmFudWFyeV9GZWJydWFyeV9NYXJjaF9BcHJpbF9NYXlfSnVuZV9KdWx5X0F1Z3VzdF9TZXB0ZW1iZXJfT2N0b2Jlcl9Ob3ZlbWJlcl9EZWNlbWJlclwiLnNwbGl0KFwiX1wiKSxvcmRpbmFsOmZ1bmN0aW9uKHQpe3ZhciBlPVtcInRoXCIsXCJzdFwiLFwibmRcIixcInJkXCJdLG49dCUxMDA7cmV0dXJuXCJbXCIrdCsoZVsobi0yMCklMTBdfHxlW25dfHxlWzBdKStcIl1cIn19LG09ZnVuY3Rpb24odCxlLG4pe3ZhciByPVN0cmluZyh0KTtyZXR1cm4hcnx8ci5sZW5ndGg+PWU/dDpcIlwiK0FycmF5KGUrMS1yLmxlbmd0aCkuam9pbihuKSt0fSx2PXtzOm0sejpmdW5jdGlvbih0KXt2YXIgZT0tdC51dGNPZmZzZXQoKSxuPU1hdGguYWJzKGUpLHI9TWF0aC5mbG9vcihuLzYwKSxpPW4lNjA7cmV0dXJuKGU8PTA/XCIrXCI6XCItXCIpK20ociwyLFwiMFwiKStcIjpcIittKGksMixcIjBcIil9LG06ZnVuY3Rpb24gdChlLG4pe2lmKGUuZGF0ZSgpPG4uZGF0ZSgpKXJldHVybi10KG4sZSk7dmFyIHI9MTIqKG4ueWVhcigpLWUueWVhcigpKSsobi5tb250aCgpLWUubW9udGgoKSksaT1lLmNsb25lKCkuYWRkKHIsZikscz1uLWk8MCx1PWUuY2xvbmUoKS5hZGQocisocz8tMToxKSxmKTtyZXR1cm4rKC0ocisobi1pKS8ocz9pLXU6dS1pKSl8fDApfSxhOmZ1bmN0aW9uKHQpe3JldHVybiB0PDA/TWF0aC5jZWlsKHQpfHwwOk1hdGguZmxvb3IodCl9LHA6ZnVuY3Rpb24odCl7cmV0dXJue006Zix5OmMsdzpvLGQ6YSxEOmQsaDp1LG06cyxzOmksbXM6cixROmh9W3RdfHxTdHJpbmcodHx8XCJcIikudG9Mb3dlckNhc2UoKS5yZXBsYWNlKC9zJC8sXCJcIil9LHU6ZnVuY3Rpb24odCl7cmV0dXJuIHZvaWQgMD09PXR9fSxnPVwiZW5cIixEPXt9O0RbZ109TTt2YXIgcD1mdW5jdGlvbih0KXtyZXR1cm4gdCBpbnN0YW5jZW9mIF99LFM9ZnVuY3Rpb24gdChlLG4scil7dmFyIGk7aWYoIWUpcmV0dXJuIGc7aWYoXCJzdHJpbmdcIj09dHlwZW9mIGUpe3ZhciBzPWUudG9Mb3dlckNhc2UoKTtEW3NdJiYoaT1zKSxuJiYoRFtzXT1uLGk9cyk7dmFyIHU9ZS5zcGxpdChcIi1cIik7aWYoIWkmJnUubGVuZ3RoPjEpcmV0dXJuIHQodVswXSl9ZWxzZXt2YXIgYT1lLm5hbWU7RFthXT1lLGk9YX1yZXR1cm4hciYmaSYmKGc9aSksaXx8IXImJmd9LHc9ZnVuY3Rpb24odCxlKXtpZihwKHQpKXJldHVybiB0LmNsb25lKCk7dmFyIG49XCJvYmplY3RcIj09dHlwZW9mIGU/ZTp7fTtyZXR1cm4gbi5kYXRlPXQsbi5hcmdzPWFyZ3VtZW50cyxuZXcgXyhuKX0sTz12O08ubD1TLE8uaT1wLE8udz1mdW5jdGlvbih0LGUpe3JldHVybiB3KHQse2xvY2FsZTplLiRMLHV0YzplLiR1LHg6ZS4keCwkb2Zmc2V0OmUuJG9mZnNldH0pfTt2YXIgXz1mdW5jdGlvbigpe2Z1bmN0aW9uIE0odCl7dGhpcy4kTD1TKHQubG9jYWxlLG51bGwsITApLHRoaXMucGFyc2UodCl9dmFyIG09TS5wcm90b3R5cGU7cmV0dXJuIG0ucGFyc2U9ZnVuY3Rpb24odCl7dGhpcy4kZD1mdW5jdGlvbih0KXt2YXIgZT10LmRhdGUsbj10LnV0YztpZihudWxsPT09ZSlyZXR1cm4gbmV3IERhdGUoTmFOKTtpZihPLnUoZSkpcmV0dXJuIG5ldyBEYXRlO2lmKGUgaW5zdGFuY2VvZiBEYXRlKXJldHVybiBuZXcgRGF0ZShlKTtpZihcInN0cmluZ1wiPT10eXBlb2YgZSYmIS9aJC9pLnRlc3QoZSkpe3ZhciByPWUubWF0Y2goJCk7aWYocil7dmFyIGk9clsyXS0xfHwwLHM9KHJbN118fFwiMFwiKS5zdWJzdHJpbmcoMCwzKTtyZXR1cm4gbj9uZXcgRGF0ZShEYXRlLlVUQyhyWzFdLGksclszXXx8MSxyWzRdfHwwLHJbNV18fDAscls2XXx8MCxzKSk6bmV3IERhdGUoclsxXSxpLHJbM118fDEscls0XXx8MCxyWzVdfHwwLHJbNl18fDAscyl9fXJldHVybiBuZXcgRGF0ZShlKX0odCksdGhpcy4keD10Lnh8fHt9LHRoaXMuaW5pdCgpfSxtLmluaXQ9ZnVuY3Rpb24oKXt2YXIgdD10aGlzLiRkO3RoaXMuJHk9dC5nZXRGdWxsWWVhcigpLHRoaXMuJE09dC5nZXRNb250aCgpLHRoaXMuJEQ9dC5nZXREYXRlKCksdGhpcy4kVz10LmdldERheSgpLHRoaXMuJEg9dC5nZXRIb3VycygpLHRoaXMuJG09dC5nZXRNaW51dGVzKCksdGhpcy4kcz10LmdldFNlY29uZHMoKSx0aGlzLiRtcz10LmdldE1pbGxpc2Vjb25kcygpfSxtLiR1dGlscz1mdW5jdGlvbigpe3JldHVybiBPfSxtLmlzVmFsaWQ9ZnVuY3Rpb24oKXtyZXR1cm4hKHRoaXMuJGQudG9TdHJpbmcoKT09PWwpfSxtLmlzU2FtZT1mdW5jdGlvbih0LGUpe3ZhciBuPXcodCk7cmV0dXJuIHRoaXMuc3RhcnRPZihlKTw9biYmbjw9dGhpcy5lbmRPZihlKX0sbS5pc0FmdGVyPWZ1bmN0aW9uKHQsZSl7cmV0dXJuIHcodCk8dGhpcy5zdGFydE9mKGUpfSxtLmlzQmVmb3JlPWZ1bmN0aW9uKHQsZSl7cmV0dXJuIHRoaXMuZW5kT2YoZSk8dyh0KX0sbS4kZz1mdW5jdGlvbih0LGUsbil7cmV0dXJuIE8udSh0KT90aGlzW2VdOnRoaXMuc2V0KG4sdCl9LG0udW5peD1mdW5jdGlvbigpe3JldHVybiBNYXRoLmZsb29yKHRoaXMudmFsdWVPZigpLzFlMyl9LG0udmFsdWVPZj1mdW5jdGlvbigpe3JldHVybiB0aGlzLiRkLmdldFRpbWUoKX0sbS5zdGFydE9mPWZ1bmN0aW9uKHQsZSl7dmFyIG49dGhpcyxyPSEhTy51KGUpfHxlLGg9Ty5wKHQpLGw9ZnVuY3Rpb24odCxlKXt2YXIgaT1PLncobi4kdT9EYXRlLlVUQyhuLiR5LGUsdCk6bmV3IERhdGUobi4keSxlLHQpLG4pO3JldHVybiByP2k6aS5lbmRPZihhKX0sJD1mdW5jdGlvbih0LGUpe3JldHVybiBPLncobi50b0RhdGUoKVt0XS5hcHBseShuLnRvRGF0ZShcInNcIiksKHI/WzAsMCwwLDBdOlsyMyw1OSw1OSw5OTldKS5zbGljZShlKSksbil9LHk9dGhpcy4kVyxNPXRoaXMuJE0sbT10aGlzLiRELHY9XCJzZXRcIisodGhpcy4kdT9cIlVUQ1wiOlwiXCIpO3N3aXRjaChoKXtjYXNlIGM6cmV0dXJuIHI/bCgxLDApOmwoMzEsMTEpO2Nhc2UgZjpyZXR1cm4gcj9sKDEsTSk6bCgwLE0rMSk7Y2FzZSBvOnZhciBnPXRoaXMuJGxvY2FsZSgpLndlZWtTdGFydHx8MCxEPSh5PGc/eSs3OnkpLWc7cmV0dXJuIGwocj9tLUQ6bSsoNi1EKSxNKTtjYXNlIGE6Y2FzZSBkOnJldHVybiAkKHYrXCJIb3Vyc1wiLDApO2Nhc2UgdTpyZXR1cm4gJCh2K1wiTWludXRlc1wiLDEpO2Nhc2UgczpyZXR1cm4gJCh2K1wiU2Vjb25kc1wiLDIpO2Nhc2UgaTpyZXR1cm4gJCh2K1wiTWlsbGlzZWNvbmRzXCIsMyk7ZGVmYXVsdDpyZXR1cm4gdGhpcy5jbG9uZSgpfX0sbS5lbmRPZj1mdW5jdGlvbih0KXtyZXR1cm4gdGhpcy5zdGFydE9mKHQsITEpfSxtLiRzZXQ9ZnVuY3Rpb24odCxlKXt2YXIgbixvPU8ucCh0KSxoPVwic2V0XCIrKHRoaXMuJHU/XCJVVENcIjpcIlwiKSxsPShuPXt9LG5bYV09aCtcIkRhdGVcIixuW2RdPWgrXCJEYXRlXCIsbltmXT1oK1wiTW9udGhcIixuW2NdPWgrXCJGdWxsWWVhclwiLG5bdV09aCtcIkhvdXJzXCIsbltzXT1oK1wiTWludXRlc1wiLG5baV09aCtcIlNlY29uZHNcIixuW3JdPWgrXCJNaWxsaXNlY29uZHNcIixuKVtvXSwkPW89PT1hP3RoaXMuJEQrKGUtdGhpcy4kVyk6ZTtpZihvPT09Znx8bz09PWMpe3ZhciB5PXRoaXMuY2xvbmUoKS5zZXQoZCwxKTt5LiRkW2xdKCQpLHkuaW5pdCgpLHRoaXMuJGQ9eS5zZXQoZCxNYXRoLm1pbih0aGlzLiRELHkuZGF5c0luTW9udGgoKSkpLiRkfWVsc2UgbCYmdGhpcy4kZFtsXSgkKTtyZXR1cm4gdGhpcy5pbml0KCksdGhpc30sbS5zZXQ9ZnVuY3Rpb24odCxlKXtyZXR1cm4gdGhpcy5jbG9uZSgpLiRzZXQodCxlKX0sbS5nZXQ9ZnVuY3Rpb24odCl7cmV0dXJuIHRoaXNbTy5wKHQpXSgpfSxtLmFkZD1mdW5jdGlvbihyLGgpe3ZhciBkLGw9dGhpcztyPU51bWJlcihyKTt2YXIgJD1PLnAoaCkseT1mdW5jdGlvbih0KXt2YXIgZT13KGwpO3JldHVybiBPLncoZS5kYXRlKGUuZGF0ZSgpK01hdGgucm91bmQodCpyKSksbCl9O2lmKCQ9PT1mKXJldHVybiB0aGlzLnNldChmLHRoaXMuJE0rcik7aWYoJD09PWMpcmV0dXJuIHRoaXMuc2V0KGMsdGhpcy4keStyKTtpZigkPT09YSlyZXR1cm4geSgxKTtpZigkPT09bylyZXR1cm4geSg3KTt2YXIgTT0oZD17fSxkW3NdPWUsZFt1XT1uLGRbaV09dCxkKVskXXx8MSxtPXRoaXMuJGQuZ2V0VGltZSgpK3IqTTtyZXR1cm4gTy53KG0sdGhpcyl9LG0uc3VidHJhY3Q9ZnVuY3Rpb24odCxlKXtyZXR1cm4gdGhpcy5hZGQoLTEqdCxlKX0sbS5mb3JtYXQ9ZnVuY3Rpb24odCl7dmFyIGU9dGhpcyxuPXRoaXMuJGxvY2FsZSgpO2lmKCF0aGlzLmlzVmFsaWQoKSlyZXR1cm4gbi5pbnZhbGlkRGF0ZXx8bDt2YXIgcj10fHxcIllZWVktTU0tRERUSEg6bW06c3NaXCIsaT1PLnoodGhpcykscz10aGlzLiRILHU9dGhpcy4kbSxhPXRoaXMuJE0sbz1uLndlZWtkYXlzLGY9bi5tb250aHMsaD1mdW5jdGlvbih0LG4saSxzKXtyZXR1cm4gdCYmKHRbbl18fHQoZSxyKSl8fGlbbl0uc2xpY2UoMCxzKX0sYz1mdW5jdGlvbih0KXtyZXR1cm4gTy5zKHMlMTJ8fDEyLHQsXCIwXCIpfSxkPW4ubWVyaWRpZW18fGZ1bmN0aW9uKHQsZSxuKXt2YXIgcj10PDEyP1wiQU1cIjpcIlBNXCI7cmV0dXJuIG4/ci50b0xvd2VyQ2FzZSgpOnJ9LCQ9e1lZOlN0cmluZyh0aGlzLiR5KS5zbGljZSgtMiksWVlZWTp0aGlzLiR5LE06YSsxLE1NOk8ucyhhKzEsMixcIjBcIiksTU1NOmgobi5tb250aHNTaG9ydCxhLGYsMyksTU1NTTpoKGYsYSksRDp0aGlzLiRELEREOk8ucyh0aGlzLiRELDIsXCIwXCIpLGQ6U3RyaW5nKHRoaXMuJFcpLGRkOmgobi53ZWVrZGF5c01pbix0aGlzLiRXLG8sMiksZGRkOmgobi53ZWVrZGF5c1Nob3J0LHRoaXMuJFcsbywzKSxkZGRkOm9bdGhpcy4kV10sSDpTdHJpbmcocyksSEg6Ty5zKHMsMixcIjBcIiksaDpjKDEpLGhoOmMoMiksYTpkKHMsdSwhMCksQTpkKHMsdSwhMSksbTpTdHJpbmcodSksbW06Ty5zKHUsMixcIjBcIiksczpTdHJpbmcodGhpcy4kcyksc3M6Ty5zKHRoaXMuJHMsMixcIjBcIiksU1NTOk8ucyh0aGlzLiRtcywzLFwiMFwiKSxaOml9O3JldHVybiByLnJlcGxhY2UoeSwoZnVuY3Rpb24odCxlKXtyZXR1cm4gZXx8JFt0XXx8aS5yZXBsYWNlKFwiOlwiLFwiXCIpfSkpfSxtLnV0Y09mZnNldD1mdW5jdGlvbigpe3JldHVybiAxNSotTWF0aC5yb3VuZCh0aGlzLiRkLmdldFRpbWV6b25lT2Zmc2V0KCkvMTUpfSxtLmRpZmY9ZnVuY3Rpb24ocixkLGwpe3ZhciAkLHk9Ty5wKGQpLE09dyhyKSxtPShNLnV0Y09mZnNldCgpLXRoaXMudXRjT2Zmc2V0KCkpKmUsdj10aGlzLU0sZz1PLm0odGhpcyxNKTtyZXR1cm4gZz0oJD17fSwkW2NdPWcvMTIsJFtmXT1nLCRbaF09Zy8zLCRbb109KHYtbSkvNjA0OGU1LCRbYV09KHYtbSkvODY0ZTUsJFt1XT12L24sJFtzXT12L2UsJFtpXT12L3QsJClbeV18fHYsbD9nOk8uYShnKX0sbS5kYXlzSW5Nb250aD1mdW5jdGlvbigpe3JldHVybiB0aGlzLmVuZE9mKGYpLiREfSxtLiRsb2NhbGU9ZnVuY3Rpb24oKXtyZXR1cm4gRFt0aGlzLiRMXX0sbS5sb2NhbGU9ZnVuY3Rpb24odCxlKXtpZighdClyZXR1cm4gdGhpcy4kTDt2YXIgbj10aGlzLmNsb25lKCkscj1TKHQsZSwhMCk7cmV0dXJuIHImJihuLiRMPXIpLG59LG0uY2xvbmU9ZnVuY3Rpb24oKXtyZXR1cm4gTy53KHRoaXMuJGQsdGhpcyl9LG0udG9EYXRlPWZ1bmN0aW9uKCl7cmV0dXJuIG5ldyBEYXRlKHRoaXMudmFsdWVPZigpKX0sbS50b0pTT049ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5pc1ZhbGlkKCk/dGhpcy50b0lTT1N0cmluZygpOm51bGx9LG0udG9JU09TdHJpbmc9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy4kZC50b0lTT1N0cmluZygpfSxtLnRvU3RyaW5nPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuJGQudG9VVENTdHJpbmcoKX0sTX0oKSxUPV8ucHJvdG90eXBlO3JldHVybiB3LnByb3RvdHlwZT1ULFtbXCIkbXNcIixyXSxbXCIkc1wiLGldLFtcIiRtXCIsc10sW1wiJEhcIix1XSxbXCIkV1wiLGFdLFtcIiRNXCIsZl0sW1wiJHlcIixjXSxbXCIkRFwiLGRdXS5mb3JFYWNoKChmdW5jdGlvbih0KXtUW3RbMV1dPWZ1bmN0aW9uKGUpe3JldHVybiB0aGlzLiRnKGUsdFswXSx0WzFdKX19KSksdy5leHRlbmQ9ZnVuY3Rpb24odCxlKXtyZXR1cm4gdC4kaXx8KHQoZSxfLHcpLHQuJGk9ITApLHd9LHcubG9jYWxlPVMsdy5pc0RheWpzPXAsdy51bml4PWZ1bmN0aW9uKHQpe3JldHVybiB3KDFlMyp0KX0sdy5lbj1EW2ddLHcuTHM9RCx3LnA9e30sd30pKTsiLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIHN0eWxlc0luRE9NID0gW107XG5mdW5jdGlvbiBnZXRJbmRleEJ5SWRlbnRpZmllcihpZGVudGlmaWVyKSB7XG4gIHZhciByZXN1bHQgPSAtMTtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBzdHlsZXNJbkRPTS5sZW5ndGg7IGkrKykge1xuICAgIGlmIChzdHlsZXNJbkRPTVtpXS5pZGVudGlmaWVyID09PSBpZGVudGlmaWVyKSB7XG4gICAgICByZXN1bHQgPSBpO1xuICAgICAgYnJlYWs7XG4gICAgfVxuICB9XG4gIHJldHVybiByZXN1bHQ7XG59XG5mdW5jdGlvbiBtb2R1bGVzVG9Eb20obGlzdCwgb3B0aW9ucykge1xuICB2YXIgaWRDb3VudE1hcCA9IHt9O1xuICB2YXIgaWRlbnRpZmllcnMgPSBbXTtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsaXN0Lmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIGl0ZW0gPSBsaXN0W2ldO1xuICAgIHZhciBpZCA9IG9wdGlvbnMuYmFzZSA/IGl0ZW1bMF0gKyBvcHRpb25zLmJhc2UgOiBpdGVtWzBdO1xuICAgIHZhciBjb3VudCA9IGlkQ291bnRNYXBbaWRdIHx8IDA7XG4gICAgdmFyIGlkZW50aWZpZXIgPSBcIlwiLmNvbmNhdChpZCwgXCIgXCIpLmNvbmNhdChjb3VudCk7XG4gICAgaWRDb3VudE1hcFtpZF0gPSBjb3VudCArIDE7XG4gICAgdmFyIGluZGV4QnlJZGVudGlmaWVyID0gZ2V0SW5kZXhCeUlkZW50aWZpZXIoaWRlbnRpZmllcik7XG4gICAgdmFyIG9iaiA9IHtcbiAgICAgIGNzczogaXRlbVsxXSxcbiAgICAgIG1lZGlhOiBpdGVtWzJdLFxuICAgICAgc291cmNlTWFwOiBpdGVtWzNdLFxuICAgICAgc3VwcG9ydHM6IGl0ZW1bNF0sXG4gICAgICBsYXllcjogaXRlbVs1XVxuICAgIH07XG4gICAgaWYgKGluZGV4QnlJZGVudGlmaWVyICE9PSAtMSkge1xuICAgICAgc3R5bGVzSW5ET01baW5kZXhCeUlkZW50aWZpZXJdLnJlZmVyZW5jZXMrKztcbiAgICAgIHN0eWxlc0luRE9NW2luZGV4QnlJZGVudGlmaWVyXS51cGRhdGVyKG9iaik7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciB1cGRhdGVyID0gYWRkRWxlbWVudFN0eWxlKG9iaiwgb3B0aW9ucyk7XG4gICAgICBvcHRpb25zLmJ5SW5kZXggPSBpO1xuICAgICAgc3R5bGVzSW5ET00uc3BsaWNlKGksIDAsIHtcbiAgICAgICAgaWRlbnRpZmllcjogaWRlbnRpZmllcixcbiAgICAgICAgdXBkYXRlcjogdXBkYXRlcixcbiAgICAgICAgcmVmZXJlbmNlczogMVxuICAgICAgfSk7XG4gICAgfVxuICAgIGlkZW50aWZpZXJzLnB1c2goaWRlbnRpZmllcik7XG4gIH1cbiAgcmV0dXJuIGlkZW50aWZpZXJzO1xufVxuZnVuY3Rpb24gYWRkRWxlbWVudFN0eWxlKG9iaiwgb3B0aW9ucykge1xuICB2YXIgYXBpID0gb3B0aW9ucy5kb21BUEkob3B0aW9ucyk7XG4gIGFwaS51cGRhdGUob2JqKTtcbiAgdmFyIHVwZGF0ZXIgPSBmdW5jdGlvbiB1cGRhdGVyKG5ld09iaikge1xuICAgIGlmIChuZXdPYmopIHtcbiAgICAgIGlmIChuZXdPYmouY3NzID09PSBvYmouY3NzICYmIG5ld09iai5tZWRpYSA9PT0gb2JqLm1lZGlhICYmIG5ld09iai5zb3VyY2VNYXAgPT09IG9iai5zb3VyY2VNYXAgJiYgbmV3T2JqLnN1cHBvcnRzID09PSBvYmouc3VwcG9ydHMgJiYgbmV3T2JqLmxheWVyID09PSBvYmoubGF5ZXIpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgYXBpLnVwZGF0ZShvYmogPSBuZXdPYmopO1xuICAgIH0gZWxzZSB7XG4gICAgICBhcGkucmVtb3ZlKCk7XG4gICAgfVxuICB9O1xuICByZXR1cm4gdXBkYXRlcjtcbn1cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGxpc3QsIG9wdGlvbnMpIHtcbiAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG4gIGxpc3QgPSBsaXN0IHx8IFtdO1xuICB2YXIgbGFzdElkZW50aWZpZXJzID0gbW9kdWxlc1RvRG9tKGxpc3QsIG9wdGlvbnMpO1xuICByZXR1cm4gZnVuY3Rpb24gdXBkYXRlKG5ld0xpc3QpIHtcbiAgICBuZXdMaXN0ID0gbmV3TGlzdCB8fCBbXTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxhc3RJZGVudGlmaWVycy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIGlkZW50aWZpZXIgPSBsYXN0SWRlbnRpZmllcnNbaV07XG4gICAgICB2YXIgaW5kZXggPSBnZXRJbmRleEJ5SWRlbnRpZmllcihpZGVudGlmaWVyKTtcbiAgICAgIHN0eWxlc0luRE9NW2luZGV4XS5yZWZlcmVuY2VzLS07XG4gICAgfVxuICAgIHZhciBuZXdMYXN0SWRlbnRpZmllcnMgPSBtb2R1bGVzVG9Eb20obmV3TGlzdCwgb3B0aW9ucyk7XG4gICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IGxhc3RJZGVudGlmaWVycy5sZW5ndGg7IF9pKyspIHtcbiAgICAgIHZhciBfaWRlbnRpZmllciA9IGxhc3RJZGVudGlmaWVyc1tfaV07XG4gICAgICB2YXIgX2luZGV4ID0gZ2V0SW5kZXhCeUlkZW50aWZpZXIoX2lkZW50aWZpZXIpO1xuICAgICAgaWYgKHN0eWxlc0luRE9NW19pbmRleF0ucmVmZXJlbmNlcyA9PT0gMCkge1xuICAgICAgICBzdHlsZXNJbkRPTVtfaW5kZXhdLnVwZGF0ZXIoKTtcbiAgICAgICAgc3R5bGVzSW5ET00uc3BsaWNlKF9pbmRleCwgMSk7XG4gICAgICB9XG4gICAgfVxuICAgIGxhc3RJZGVudGlmaWVycyA9IG5ld0xhc3RJZGVudGlmaWVycztcbiAgfTtcbn07IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBtZW1vID0ge307XG5cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICAqL1xuZnVuY3Rpb24gZ2V0VGFyZ2V0KHRhcmdldCkge1xuICBpZiAodHlwZW9mIG1lbW9bdGFyZ2V0XSA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgIHZhciBzdHlsZVRhcmdldCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IodGFyZ2V0KTtcblxuICAgIC8vIFNwZWNpYWwgY2FzZSB0byByZXR1cm4gaGVhZCBvZiBpZnJhbWUgaW5zdGVhZCBvZiBpZnJhbWUgaXRzZWxmXG4gICAgaWYgKHdpbmRvdy5IVE1MSUZyYW1lRWxlbWVudCAmJiBzdHlsZVRhcmdldCBpbnN0YW5jZW9mIHdpbmRvdy5IVE1MSUZyYW1lRWxlbWVudCkge1xuICAgICAgdHJ5IHtcbiAgICAgICAgLy8gVGhpcyB3aWxsIHRocm93IGFuIGV4Y2VwdGlvbiBpZiBhY2Nlc3MgdG8gaWZyYW1lIGlzIGJsb2NrZWRcbiAgICAgICAgLy8gZHVlIHRvIGNyb3NzLW9yaWdpbiByZXN0cmljdGlvbnNcbiAgICAgICAgc3R5bGVUYXJnZXQgPSBzdHlsZVRhcmdldC5jb250ZW50RG9jdW1lbnQuaGVhZDtcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgLy8gaXN0YW5idWwgaWdub3JlIG5leHRcbiAgICAgICAgc3R5bGVUYXJnZXQgPSBudWxsO1xuICAgICAgfVxuICAgIH1cbiAgICBtZW1vW3RhcmdldF0gPSBzdHlsZVRhcmdldDtcbiAgfVxuICByZXR1cm4gbWVtb1t0YXJnZXRdO1xufVxuXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAgKi9cbmZ1bmN0aW9uIGluc2VydEJ5U2VsZWN0b3IoaW5zZXJ0LCBzdHlsZSkge1xuICB2YXIgdGFyZ2V0ID0gZ2V0VGFyZ2V0KGluc2VydCk7XG4gIGlmICghdGFyZ2V0KSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFwiQ291bGRuJ3QgZmluZCBhIHN0eWxlIHRhcmdldC4gVGhpcyBwcm9iYWJseSBtZWFucyB0aGF0IHRoZSB2YWx1ZSBmb3IgdGhlICdpbnNlcnQnIHBhcmFtZXRlciBpcyBpbnZhbGlkLlwiKTtcbiAgfVxuICB0YXJnZXQuYXBwZW5kQ2hpbGQoc3R5bGUpO1xufVxubW9kdWxlLmV4cG9ydHMgPSBpbnNlcnRCeVNlbGVjdG9yOyIsIlwidXNlIHN0cmljdFwiO1xuXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAgKi9cbmZ1bmN0aW9uIGluc2VydFN0eWxlRWxlbWVudChvcHRpb25zKSB7XG4gIHZhciBlbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInN0eWxlXCIpO1xuICBvcHRpb25zLnNldEF0dHJpYnV0ZXMoZWxlbWVudCwgb3B0aW9ucy5hdHRyaWJ1dGVzKTtcbiAgb3B0aW9ucy5pbnNlcnQoZWxlbWVudCwgb3B0aW9ucy5vcHRpb25zKTtcbiAgcmV0dXJuIGVsZW1lbnQ7XG59XG5tb2R1bGUuZXhwb3J0cyA9IGluc2VydFN0eWxlRWxlbWVudDsiLCJcInVzZSBzdHJpY3RcIjtcblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5mdW5jdGlvbiBzZXRBdHRyaWJ1dGVzV2l0aG91dEF0dHJpYnV0ZXMoc3R5bGVFbGVtZW50KSB7XG4gIHZhciBub25jZSA9IHR5cGVvZiBfX3dlYnBhY2tfbm9uY2VfXyAhPT0gXCJ1bmRlZmluZWRcIiA/IF9fd2VicGFja19ub25jZV9fIDogbnVsbDtcbiAgaWYgKG5vbmNlKSB7XG4gICAgc3R5bGVFbGVtZW50LnNldEF0dHJpYnV0ZShcIm5vbmNlXCIsIG5vbmNlKTtcbiAgfVxufVxubW9kdWxlLmV4cG9ydHMgPSBzZXRBdHRyaWJ1dGVzV2l0aG91dEF0dHJpYnV0ZXM7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICAqL1xuZnVuY3Rpb24gYXBwbHkoc3R5bGVFbGVtZW50LCBvcHRpb25zLCBvYmopIHtcbiAgdmFyIGNzcyA9IFwiXCI7XG4gIGlmIChvYmouc3VwcG9ydHMpIHtcbiAgICBjc3MgKz0gXCJAc3VwcG9ydHMgKFwiLmNvbmNhdChvYmouc3VwcG9ydHMsIFwiKSB7XCIpO1xuICB9XG4gIGlmIChvYmoubWVkaWEpIHtcbiAgICBjc3MgKz0gXCJAbWVkaWEgXCIuY29uY2F0KG9iai5tZWRpYSwgXCIge1wiKTtcbiAgfVxuICB2YXIgbmVlZExheWVyID0gdHlwZW9mIG9iai5sYXllciAhPT0gXCJ1bmRlZmluZWRcIjtcbiAgaWYgKG5lZWRMYXllcikge1xuICAgIGNzcyArPSBcIkBsYXllclwiLmNvbmNhdChvYmoubGF5ZXIubGVuZ3RoID4gMCA/IFwiIFwiLmNvbmNhdChvYmoubGF5ZXIpIDogXCJcIiwgXCIge1wiKTtcbiAgfVxuICBjc3MgKz0gb2JqLmNzcztcbiAgaWYgKG5lZWRMYXllcikge1xuICAgIGNzcyArPSBcIn1cIjtcbiAgfVxuICBpZiAob2JqLm1lZGlhKSB7XG4gICAgY3NzICs9IFwifVwiO1xuICB9XG4gIGlmIChvYmouc3VwcG9ydHMpIHtcbiAgICBjc3MgKz0gXCJ9XCI7XG4gIH1cbiAgdmFyIHNvdXJjZU1hcCA9IG9iai5zb3VyY2VNYXA7XG4gIGlmIChzb3VyY2VNYXAgJiYgdHlwZW9mIGJ0b2EgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICBjc3MgKz0gXCJcXG4vKiMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LFwiLmNvbmNhdChidG9hKHVuZXNjYXBlKGVuY29kZVVSSUNvbXBvbmVudChKU09OLnN0cmluZ2lmeShzb3VyY2VNYXApKSkpLCBcIiAqL1wiKTtcbiAgfVxuXG4gIC8vIEZvciBvbGQgSUVcbiAgLyogaXN0YW5idWwgaWdub3JlIGlmICAqL1xuICBvcHRpb25zLnN0eWxlVGFnVHJhbnNmb3JtKGNzcywgc3R5bGVFbGVtZW50LCBvcHRpb25zLm9wdGlvbnMpO1xufVxuZnVuY3Rpb24gcmVtb3ZlU3R5bGVFbGVtZW50KHN0eWxlRWxlbWVudCkge1xuICAvLyBpc3RhbmJ1bCBpZ25vcmUgaWZcbiAgaWYgKHN0eWxlRWxlbWVudC5wYXJlbnROb2RlID09PSBudWxsKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIHN0eWxlRWxlbWVudC5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKHN0eWxlRWxlbWVudCk7XG59XG5cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICAqL1xuZnVuY3Rpb24gZG9tQVBJKG9wdGlvbnMpIHtcbiAgaWYgKHR5cGVvZiBkb2N1bWVudCA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgIHJldHVybiB7XG4gICAgICB1cGRhdGU6IGZ1bmN0aW9uIHVwZGF0ZSgpIHt9LFxuICAgICAgcmVtb3ZlOiBmdW5jdGlvbiByZW1vdmUoKSB7fVxuICAgIH07XG4gIH1cbiAgdmFyIHN0eWxlRWxlbWVudCA9IG9wdGlvbnMuaW5zZXJ0U3R5bGVFbGVtZW50KG9wdGlvbnMpO1xuICByZXR1cm4ge1xuICAgIHVwZGF0ZTogZnVuY3Rpb24gdXBkYXRlKG9iaikge1xuICAgICAgYXBwbHkoc3R5bGVFbGVtZW50LCBvcHRpb25zLCBvYmopO1xuICAgIH0sXG4gICAgcmVtb3ZlOiBmdW5jdGlvbiByZW1vdmUoKSB7XG4gICAgICByZW1vdmVTdHlsZUVsZW1lbnQoc3R5bGVFbGVtZW50KTtcbiAgICB9XG4gIH07XG59XG5tb2R1bGUuZXhwb3J0cyA9IGRvbUFQSTsiLCJcInVzZSBzdHJpY3RcIjtcblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5mdW5jdGlvbiBzdHlsZVRhZ1RyYW5zZm9ybShjc3MsIHN0eWxlRWxlbWVudCkge1xuICBpZiAoc3R5bGVFbGVtZW50LnN0eWxlU2hlZXQpIHtcbiAgICBzdHlsZUVsZW1lbnQuc3R5bGVTaGVldC5jc3NUZXh0ID0gY3NzO1xuICB9IGVsc2Uge1xuICAgIHdoaWxlIChzdHlsZUVsZW1lbnQuZmlyc3RDaGlsZCkge1xuICAgICAgc3R5bGVFbGVtZW50LnJlbW92ZUNoaWxkKHN0eWxlRWxlbWVudC5maXJzdENoaWxkKTtcbiAgICB9XG4gICAgc3R5bGVFbGVtZW50LmFwcGVuZENoaWxkKGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKGNzcykpO1xuICB9XG59XG5tb2R1bGUuZXhwb3J0cyA9IHN0eWxlVGFnVHJhbnNmb3JtOyIsIi8vIFRoZSBtb2R1bGUgY2FjaGVcbnZhciBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX18gPSB7fTtcblxuLy8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbmZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcblx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG5cdHZhciBjYWNoZWRNb2R1bGUgPSBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX19bbW9kdWxlSWRdO1xuXHRpZiAoY2FjaGVkTW9kdWxlICE9PSB1bmRlZmluZWQpIHtcblx0XHRyZXR1cm4gY2FjaGVkTW9kdWxlLmV4cG9ydHM7XG5cdH1cblx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcblx0dmFyIG1vZHVsZSA9IF9fd2VicGFja19tb2R1bGVfY2FjaGVfX1ttb2R1bGVJZF0gPSB7XG5cdFx0aWQ6IG1vZHVsZUlkLFxuXHRcdC8vIG5vIG1vZHVsZS5sb2FkZWQgbmVlZGVkXG5cdFx0ZXhwb3J0czoge31cblx0fTtcblxuXHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cblx0X193ZWJwYWNrX21vZHVsZXNfX1ttb2R1bGVJZF0uY2FsbChtb2R1bGUuZXhwb3J0cywgbW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyk7XG5cblx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcblx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xufVxuXG4vLyBleHBvc2UgdGhlIG1vZHVsZXMgb2JqZWN0IChfX3dlYnBhY2tfbW9kdWxlc19fKVxuX193ZWJwYWNrX3JlcXVpcmVfXy5tID0gX193ZWJwYWNrX21vZHVsZXNfXztcblxuIiwiLy8gZ2V0RGVmYXVsdEV4cG9ydCBmdW5jdGlvbiBmb3IgY29tcGF0aWJpbGl0eSB3aXRoIG5vbi1oYXJtb255IG1vZHVsZXNcbl9fd2VicGFja19yZXF1aXJlX18ubiA9IChtb2R1bGUpID0+IHtcblx0dmFyIGdldHRlciA9IG1vZHVsZSAmJiBtb2R1bGUuX19lc01vZHVsZSA/XG5cdFx0KCkgPT4gKG1vZHVsZVsnZGVmYXVsdCddKSA6XG5cdFx0KCkgPT4gKG1vZHVsZSk7XG5cdF9fd2VicGFja19yZXF1aXJlX18uZChnZXR0ZXIsIHsgYTogZ2V0dGVyIH0pO1xuXHRyZXR1cm4gZ2V0dGVyO1xufTsiLCIvLyBkZWZpbmUgZ2V0dGVyIGZ1bmN0aW9ucyBmb3IgaGFybW9ueSBleHBvcnRzXG5fX3dlYnBhY2tfcmVxdWlyZV9fLmQgPSAoZXhwb3J0cywgZGVmaW5pdGlvbikgPT4ge1xuXHRmb3IodmFyIGtleSBpbiBkZWZpbml0aW9uKSB7XG5cdFx0aWYoX193ZWJwYWNrX3JlcXVpcmVfXy5vKGRlZmluaXRpb24sIGtleSkgJiYgIV9fd2VicGFja19yZXF1aXJlX18ubyhleHBvcnRzLCBrZXkpKSB7XG5cdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywga2V5LCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZGVmaW5pdGlvbltrZXldIH0pO1xuXHRcdH1cblx0fVxufTsiLCJfX3dlYnBhY2tfcmVxdWlyZV9fLmcgPSAoZnVuY3Rpb24oKSB7XG5cdGlmICh0eXBlb2YgZ2xvYmFsVGhpcyA9PT0gJ29iamVjdCcpIHJldHVybiBnbG9iYWxUaGlzO1xuXHR0cnkge1xuXHRcdHJldHVybiB0aGlzIHx8IG5ldyBGdW5jdGlvbigncmV0dXJuIHRoaXMnKSgpO1xuXHR9IGNhdGNoIChlKSB7XG5cdFx0aWYgKHR5cGVvZiB3aW5kb3cgPT09ICdvYmplY3QnKSByZXR1cm4gd2luZG93O1xuXHR9XG59KSgpOyIsIl9fd2VicGFja19yZXF1aXJlX18ubyA9IChvYmosIHByb3ApID0+IChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBwcm9wKSkiLCJ2YXIgc2NyaXB0VXJsO1xuaWYgKF9fd2VicGFja19yZXF1aXJlX18uZy5pbXBvcnRTY3JpcHRzKSBzY3JpcHRVcmwgPSBfX3dlYnBhY2tfcmVxdWlyZV9fLmcubG9jYXRpb24gKyBcIlwiO1xudmFyIGRvY3VtZW50ID0gX193ZWJwYWNrX3JlcXVpcmVfXy5nLmRvY3VtZW50O1xuaWYgKCFzY3JpcHRVcmwgJiYgZG9jdW1lbnQpIHtcblx0aWYgKGRvY3VtZW50LmN1cnJlbnRTY3JpcHQpXG5cdFx0c2NyaXB0VXJsID0gZG9jdW1lbnQuY3VycmVudFNjcmlwdC5zcmM7XG5cdGlmICghc2NyaXB0VXJsKSB7XG5cdFx0dmFyIHNjcmlwdHMgPSBkb2N1bWVudC5nZXRFbGVtZW50c0J5VGFnTmFtZShcInNjcmlwdFwiKTtcblx0XHRpZihzY3JpcHRzLmxlbmd0aCkge1xuXHRcdFx0dmFyIGkgPSBzY3JpcHRzLmxlbmd0aCAtIDE7XG5cdFx0XHR3aGlsZSAoaSA+IC0xICYmICFzY3JpcHRVcmwpIHNjcmlwdFVybCA9IHNjcmlwdHNbaS0tXS5zcmM7XG5cdFx0fVxuXHR9XG59XG4vLyBXaGVuIHN1cHBvcnRpbmcgYnJvd3NlcnMgd2hlcmUgYW4gYXV0b21hdGljIHB1YmxpY1BhdGggaXMgbm90IHN1cHBvcnRlZCB5b3UgbXVzdCBzcGVjaWZ5IGFuIG91dHB1dC5wdWJsaWNQYXRoIG1hbnVhbGx5IHZpYSBjb25maWd1cmF0aW9uXG4vLyBvciBwYXNzIGFuIGVtcHR5IHN0cmluZyAoXCJcIikgYW5kIHNldCB0aGUgX193ZWJwYWNrX3B1YmxpY19wYXRoX18gdmFyaWFibGUgZnJvbSB5b3VyIGNvZGUgdG8gdXNlIHlvdXIgb3duIGxvZ2ljLlxuaWYgKCFzY3JpcHRVcmwpIHRocm93IG5ldyBFcnJvcihcIkF1dG9tYXRpYyBwdWJsaWNQYXRoIGlzIG5vdCBzdXBwb3J0ZWQgaW4gdGhpcyBicm93c2VyXCIpO1xuc2NyaXB0VXJsID0gc2NyaXB0VXJsLnJlcGxhY2UoLyMuKiQvLCBcIlwiKS5yZXBsYWNlKC9cXD8uKiQvLCBcIlwiKS5yZXBsYWNlKC9cXC9bXlxcL10rJC8sIFwiL1wiKTtcbl9fd2VicGFja19yZXF1aXJlX18ucCA9IHNjcmlwdFVybDsiLCJfX3dlYnBhY2tfcmVxdWlyZV9fLmIgPSBkb2N1bWVudC5iYXNlVVJJIHx8IHNlbGYubG9jYXRpb24uaHJlZjtcblxuLy8gb2JqZWN0IHRvIHN0b3JlIGxvYWRlZCBhbmQgbG9hZGluZyBjaHVua3Ncbi8vIHVuZGVmaW5lZCA9IGNodW5rIG5vdCBsb2FkZWQsIG51bGwgPSBjaHVuayBwcmVsb2FkZWQvcHJlZmV0Y2hlZFxuLy8gW3Jlc29sdmUsIHJlamVjdCwgUHJvbWlzZV0gPSBjaHVuayBsb2FkaW5nLCAwID0gY2h1bmsgbG9hZGVkXG52YXIgaW5zdGFsbGVkQ2h1bmtzID0ge1xuXHQxNzk6IDBcbn07XG5cbi8vIG5vIGNodW5rIG9uIGRlbWFuZCBsb2FkaW5nXG5cbi8vIG5vIHByZWZldGNoaW5nXG5cbi8vIG5vIHByZWxvYWRlZFxuXG4vLyBubyBITVJcblxuLy8gbm8gSE1SIG1hbmlmZXN0XG5cbi8vIG5vIG9uIGNodW5rcyBsb2FkZWRcblxuLy8gbm8ganNvbnAgZnVuY3Rpb24iLCJfX3dlYnBhY2tfcmVxdWlyZV9fLm5jID0gdW5kZWZpbmVkOyIsIlxuICAgICAgaW1wb3J0IEFQSSBmcm9tIFwiIS4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luamVjdFN0eWxlc0ludG9TdHlsZVRhZy5qc1wiO1xuICAgICAgaW1wb3J0IGRvbUFQSSBmcm9tIFwiIS4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlRG9tQVBJLmpzXCI7XG4gICAgICBpbXBvcnQgaW5zZXJ0Rm4gZnJvbSBcIiEuLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRCeVNlbGVjdG9yLmpzXCI7XG4gICAgICBpbXBvcnQgc2V0QXR0cmlidXRlcyBmcm9tIFwiIS4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3NldEF0dHJpYnV0ZXNXaXRob3V0QXR0cmlidXRlcy5qc1wiO1xuICAgICAgaW1wb3J0IGluc2VydFN0eWxlRWxlbWVudCBmcm9tIFwiIS4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydFN0eWxlRWxlbWVudC5qc1wiO1xuICAgICAgaW1wb3J0IHN0eWxlVGFnVHJhbnNmb3JtRm4gZnJvbSBcIiEuLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZVRhZ1RyYW5zZm9ybS5qc1wiO1xuICAgICAgaW1wb3J0IGNvbnRlbnQsICogYXMgbmFtZWRFeHBvcnQgZnJvbSBcIiEhLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi9zdHlsZS5jc3NcIjtcbiAgICAgIFxuICAgICAgXG5cbnZhciBvcHRpb25zID0ge307XG5cbm9wdGlvbnMuc3R5bGVUYWdUcmFuc2Zvcm0gPSBzdHlsZVRhZ1RyYW5zZm9ybUZuO1xub3B0aW9ucy5zZXRBdHRyaWJ1dGVzID0gc2V0QXR0cmlidXRlcztcblxuICAgICAgb3B0aW9ucy5pbnNlcnQgPSBpbnNlcnRGbi5iaW5kKG51bGwsIFwiaGVhZFwiKTtcbiAgICBcbm9wdGlvbnMuZG9tQVBJID0gZG9tQVBJO1xub3B0aW9ucy5pbnNlcnRTdHlsZUVsZW1lbnQgPSBpbnNlcnRTdHlsZUVsZW1lbnQ7XG5cbnZhciB1cGRhdGUgPSBBUEkoY29udGVudCwgb3B0aW9ucyk7XG5cblxuXG5leHBvcnQgKiBmcm9tIFwiISEuLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL3N0eWxlLmNzc1wiO1xuICAgICAgIGV4cG9ydCBkZWZhdWx0IGNvbnRlbnQgJiYgY29udGVudC5sb2NhbHMgPyBjb250ZW50LmxvY2FscyA6IHVuZGVmaW5lZDtcbiIsIlxuICAgICAgaW1wb3J0IEFQSSBmcm9tIFwiIS4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luamVjdFN0eWxlc0ludG9TdHlsZVRhZy5qc1wiO1xuICAgICAgaW1wb3J0IGRvbUFQSSBmcm9tIFwiIS4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlRG9tQVBJLmpzXCI7XG4gICAgICBpbXBvcnQgaW5zZXJ0Rm4gZnJvbSBcIiEuLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRCeVNlbGVjdG9yLmpzXCI7XG4gICAgICBpbXBvcnQgc2V0QXR0cmlidXRlcyBmcm9tIFwiIS4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3NldEF0dHJpYnV0ZXNXaXRob3V0QXR0cmlidXRlcy5qc1wiO1xuICAgICAgaW1wb3J0IGluc2VydFN0eWxlRWxlbWVudCBmcm9tIFwiIS4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydFN0eWxlRWxlbWVudC5qc1wiO1xuICAgICAgaW1wb3J0IHN0eWxlVGFnVHJhbnNmb3JtRm4gZnJvbSBcIiEuLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZVRhZ1RyYW5zZm9ybS5qc1wiO1xuICAgICAgaW1wb3J0IGNvbnRlbnQsICogYXMgbmFtZWRFeHBvcnQgZnJvbSBcIiEhLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi9zdHlsZTIuY3NzXCI7XG4gICAgICBcbiAgICAgIFxuXG52YXIgb3B0aW9ucyA9IHt9O1xuXG5vcHRpb25zLnN0eWxlVGFnVHJhbnNmb3JtID0gc3R5bGVUYWdUcmFuc2Zvcm1Gbjtcbm9wdGlvbnMuc2V0QXR0cmlidXRlcyA9IHNldEF0dHJpYnV0ZXM7XG5cbiAgICAgIG9wdGlvbnMuaW5zZXJ0ID0gaW5zZXJ0Rm4uYmluZChudWxsLCBcImhlYWRcIik7XG4gICAgXG5vcHRpb25zLmRvbUFQSSA9IGRvbUFQSTtcbm9wdGlvbnMuaW5zZXJ0U3R5bGVFbGVtZW50ID0gaW5zZXJ0U3R5bGVFbGVtZW50O1xuXG52YXIgdXBkYXRlID0gQVBJKGNvbnRlbnQsIG9wdGlvbnMpO1xuXG5cblxuZXhwb3J0ICogZnJvbSBcIiEhLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi9zdHlsZTIuY3NzXCI7XG4gICAgICAgZXhwb3J0IGRlZmF1bHQgY29udGVudCAmJiBjb250ZW50LmxvY2FscyA/IGNvbnRlbnQubG9jYWxzIDogdW5kZWZpbmVkO1xuIiwiXG4gICAgICBpbXBvcnQgQVBJIGZyb20gXCIhLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5qZWN0U3R5bGVzSW50b1N0eWxlVGFnLmpzXCI7XG4gICAgICBpbXBvcnQgZG9tQVBJIGZyb20gXCIhLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVEb21BUEkuanNcIjtcbiAgICAgIGltcG9ydCBpbnNlcnRGbiBmcm9tIFwiIS4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydEJ5U2VsZWN0b3IuanNcIjtcbiAgICAgIGltcG9ydCBzZXRBdHRyaWJ1dGVzIGZyb20gXCIhLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc2V0QXR0cmlidXRlc1dpdGhvdXRBdHRyaWJ1dGVzLmpzXCI7XG4gICAgICBpbXBvcnQgaW5zZXJ0U3R5bGVFbGVtZW50IGZyb20gXCIhLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0U3R5bGVFbGVtZW50LmpzXCI7XG4gICAgICBpbXBvcnQgc3R5bGVUYWdUcmFuc2Zvcm1GbiBmcm9tIFwiIS4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlVGFnVHJhbnNmb3JtLmpzXCI7XG4gICAgICBpbXBvcnQgY29udGVudCwgKiBhcyBuYW1lZEV4cG9ydCBmcm9tIFwiISEuLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL3N0eWxlMy5jc3NcIjtcbiAgICAgIFxuICAgICAgXG5cbnZhciBvcHRpb25zID0ge307XG5cbm9wdGlvbnMuc3R5bGVUYWdUcmFuc2Zvcm0gPSBzdHlsZVRhZ1RyYW5zZm9ybUZuO1xub3B0aW9ucy5zZXRBdHRyaWJ1dGVzID0gc2V0QXR0cmlidXRlcztcblxuICAgICAgb3B0aW9ucy5pbnNlcnQgPSBpbnNlcnRGbi5iaW5kKG51bGwsIFwiaGVhZFwiKTtcbiAgICBcbm9wdGlvbnMuZG9tQVBJID0gZG9tQVBJO1xub3B0aW9ucy5pbnNlcnRTdHlsZUVsZW1lbnQgPSBpbnNlcnRTdHlsZUVsZW1lbnQ7XG5cbnZhciB1cGRhdGUgPSBBUEkoY29udGVudCwgb3B0aW9ucyk7XG5cblxuXG5leHBvcnQgKiBmcm9tIFwiISEuLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL3N0eWxlMy5jc3NcIjtcbiAgICAgICBleHBvcnQgZGVmYXVsdCBjb250ZW50ICYmIGNvbnRlbnQubG9jYWxzID8gY29udGVudC5sb2NhbHMgOiB1bmRlZmluZWQ7XG4iLCIndXNlIHN0cmljdCc7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGJpbmQoZm4sIHRoaXNBcmcpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIHdyYXAoKSB7XG4gICAgcmV0dXJuIGZuLmFwcGx5KHRoaXNBcmcsIGFyZ3VtZW50cyk7XG4gIH07XG59XG4iLCIndXNlIHN0cmljdCc7XG5cbmltcG9ydCBiaW5kIGZyb20gJy4vaGVscGVycy9iaW5kLmpzJztcblxuLy8gdXRpbHMgaXMgYSBsaWJyYXJ5IG9mIGdlbmVyaWMgaGVscGVyIGZ1bmN0aW9ucyBub24tc3BlY2lmaWMgdG8gYXhpb3NcblxuY29uc3Qge3RvU3RyaW5nfSA9IE9iamVjdC5wcm90b3R5cGU7XG5jb25zdCB7Z2V0UHJvdG90eXBlT2Z9ID0gT2JqZWN0O1xuXG5jb25zdCBraW5kT2YgPSAoY2FjaGUgPT4gdGhpbmcgPT4ge1xuICAgIGNvbnN0IHN0ciA9IHRvU3RyaW5nLmNhbGwodGhpbmcpO1xuICAgIHJldHVybiBjYWNoZVtzdHJdIHx8IChjYWNoZVtzdHJdID0gc3RyLnNsaWNlKDgsIC0xKS50b0xvd2VyQ2FzZSgpKTtcbn0pKE9iamVjdC5jcmVhdGUobnVsbCkpO1xuXG5jb25zdCBraW5kT2ZUZXN0ID0gKHR5cGUpID0+IHtcbiAgdHlwZSA9IHR5cGUudG9Mb3dlckNhc2UoKTtcbiAgcmV0dXJuICh0aGluZykgPT4ga2luZE9mKHRoaW5nKSA9PT0gdHlwZVxufVxuXG5jb25zdCB0eXBlT2ZUZXN0ID0gdHlwZSA9PiB0aGluZyA9PiB0eXBlb2YgdGhpbmcgPT09IHR5cGU7XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYW4gQXJyYXlcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKlxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYW4gQXJyYXksIG90aGVyd2lzZSBmYWxzZVxuICovXG5jb25zdCB7aXNBcnJheX0gPSBBcnJheTtcblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyB1bmRlZmluZWRcbiAqXG4gKiBAcGFyYW0geyp9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICpcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHRoZSB2YWx1ZSBpcyB1bmRlZmluZWQsIG90aGVyd2lzZSBmYWxzZVxuICovXG5jb25zdCBpc1VuZGVmaW5lZCA9IHR5cGVPZlRlc3QoJ3VuZGVmaW5lZCcpO1xuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgQnVmZmVyXG4gKlxuICogQHBhcmFtIHsqfSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhIEJ1ZmZlciwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzQnVmZmVyKHZhbCkge1xuICByZXR1cm4gdmFsICE9PSBudWxsICYmICFpc1VuZGVmaW5lZCh2YWwpICYmIHZhbC5jb25zdHJ1Y3RvciAhPT0gbnVsbCAmJiAhaXNVbmRlZmluZWQodmFsLmNvbnN0cnVjdG9yKVxuICAgICYmIGlzRnVuY3Rpb24odmFsLmNvbnN0cnVjdG9yLmlzQnVmZmVyKSAmJiB2YWwuY29uc3RydWN0b3IuaXNCdWZmZXIodmFsKTtcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhbiBBcnJheUJ1ZmZlclxuICpcbiAqIEBwYXJhbSB7Kn0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKlxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYW4gQXJyYXlCdWZmZXIsIG90aGVyd2lzZSBmYWxzZVxuICovXG5jb25zdCBpc0FycmF5QnVmZmVyID0ga2luZE9mVGVzdCgnQXJyYXlCdWZmZXInKTtcblxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgdmlldyBvbiBhbiBBcnJheUJ1ZmZlclxuICpcbiAqIEBwYXJhbSB7Kn0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKlxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYSB2aWV3IG9uIGFuIEFycmF5QnVmZmVyLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNBcnJheUJ1ZmZlclZpZXcodmFsKSB7XG4gIGxldCByZXN1bHQ7XG4gIGlmICgodHlwZW9mIEFycmF5QnVmZmVyICE9PSAndW5kZWZpbmVkJykgJiYgKEFycmF5QnVmZmVyLmlzVmlldykpIHtcbiAgICByZXN1bHQgPSBBcnJheUJ1ZmZlci5pc1ZpZXcodmFsKTtcbiAgfSBlbHNlIHtcbiAgICByZXN1bHQgPSAodmFsKSAmJiAodmFsLmJ1ZmZlcikgJiYgKGlzQXJyYXlCdWZmZXIodmFsLmJ1ZmZlcikpO1xuICB9XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYSBTdHJpbmdcbiAqXG4gKiBAcGFyYW0geyp9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICpcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGEgU3RyaW5nLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuY29uc3QgaXNTdHJpbmcgPSB0eXBlT2ZUZXN0KCdzdHJpbmcnKTtcblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhIEZ1bmN0aW9uXG4gKlxuICogQHBhcmFtIHsqfSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGEgRnVuY3Rpb24sIG90aGVyd2lzZSBmYWxzZVxuICovXG5jb25zdCBpc0Z1bmN0aW9uID0gdHlwZU9mVGVzdCgnZnVuY3Rpb24nKTtcblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhIE51bWJlclxuICpcbiAqIEBwYXJhbSB7Kn0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKlxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYSBOdW1iZXIsIG90aGVyd2lzZSBmYWxzZVxuICovXG5jb25zdCBpc051bWJlciA9IHR5cGVPZlRlc3QoJ251bWJlcicpO1xuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGFuIE9iamVjdFxuICpcbiAqIEBwYXJhbSB7Kn0gdGhpbmcgVGhlIHZhbHVlIHRvIHRlc3RcbiAqXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhbiBPYmplY3QsIG90aGVyd2lzZSBmYWxzZVxuICovXG5jb25zdCBpc09iamVjdCA9ICh0aGluZykgPT4gdGhpbmcgIT09IG51bGwgJiYgdHlwZW9mIHRoaW5nID09PSAnb2JqZWN0JztcblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhIEJvb2xlYW5cbiAqXG4gKiBAcGFyYW0geyp9IHRoaW5nIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhIEJvb2xlYW4sIG90aGVyd2lzZSBmYWxzZVxuICovXG5jb25zdCBpc0Jvb2xlYW4gPSB0aGluZyA9PiB0aGluZyA9PT0gdHJ1ZSB8fCB0aGluZyA9PT0gZmFsc2U7XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYSBwbGFpbiBPYmplY3RcbiAqXG4gKiBAcGFyYW0geyp9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICpcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGEgcGxhaW4gT2JqZWN0LCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuY29uc3QgaXNQbGFpbk9iamVjdCA9ICh2YWwpID0+IHtcbiAgaWYgKGtpbmRPZih2YWwpICE9PSAnb2JqZWN0Jykge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIGNvbnN0IHByb3RvdHlwZSA9IGdldFByb3RvdHlwZU9mKHZhbCk7XG4gIHJldHVybiAocHJvdG90eXBlID09PSBudWxsIHx8IHByb3RvdHlwZSA9PT0gT2JqZWN0LnByb3RvdHlwZSB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2YocHJvdG90eXBlKSA9PT0gbnVsbCkgJiYgIShTeW1ib2wudG9TdHJpbmdUYWcgaW4gdmFsKSAmJiAhKFN5bWJvbC5pdGVyYXRvciBpbiB2YWwpO1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgRGF0ZVxuICpcbiAqIEBwYXJhbSB7Kn0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKlxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYSBEYXRlLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuY29uc3QgaXNEYXRlID0ga2luZE9mVGVzdCgnRGF0ZScpO1xuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgRmlsZVxuICpcbiAqIEBwYXJhbSB7Kn0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKlxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYSBGaWxlLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuY29uc3QgaXNGaWxlID0ga2luZE9mVGVzdCgnRmlsZScpO1xuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgQmxvYlxuICpcbiAqIEBwYXJhbSB7Kn0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKlxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYSBCbG9iLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuY29uc3QgaXNCbG9iID0ga2luZE9mVGVzdCgnQmxvYicpO1xuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgRmlsZUxpc3RcbiAqXG4gKiBAcGFyYW0geyp9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICpcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGEgRmlsZSwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmNvbnN0IGlzRmlsZUxpc3QgPSBraW5kT2ZUZXN0KCdGaWxlTGlzdCcpO1xuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgU3RyZWFtXG4gKlxuICogQHBhcmFtIHsqfSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhIFN0cmVhbSwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmNvbnN0IGlzU3RyZWFtID0gKHZhbCkgPT4gaXNPYmplY3QodmFsKSAmJiBpc0Z1bmN0aW9uKHZhbC5waXBlKTtcblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhIEZvcm1EYXRhXG4gKlxuICogQHBhcmFtIHsqfSB0aGluZyBUaGUgdmFsdWUgdG8gdGVzdFxuICpcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGFuIEZvcm1EYXRhLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuY29uc3QgaXNGb3JtRGF0YSA9ICh0aGluZykgPT4ge1xuICBsZXQga2luZDtcbiAgcmV0dXJuIHRoaW5nICYmIChcbiAgICAodHlwZW9mIEZvcm1EYXRhID09PSAnZnVuY3Rpb24nICYmIHRoaW5nIGluc3RhbmNlb2YgRm9ybURhdGEpIHx8IChcbiAgICAgIGlzRnVuY3Rpb24odGhpbmcuYXBwZW5kKSAmJiAoXG4gICAgICAgIChraW5kID0ga2luZE9mKHRoaW5nKSkgPT09ICdmb3JtZGF0YScgfHxcbiAgICAgICAgLy8gZGV0ZWN0IGZvcm0tZGF0YSBpbnN0YW5jZVxuICAgICAgICAoa2luZCA9PT0gJ29iamVjdCcgJiYgaXNGdW5jdGlvbih0aGluZy50b1N0cmluZykgJiYgdGhpbmcudG9TdHJpbmcoKSA9PT0gJ1tvYmplY3QgRm9ybURhdGFdJylcbiAgICAgIClcbiAgICApXG4gIClcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhIFVSTFNlYXJjaFBhcmFtcyBvYmplY3RcbiAqXG4gKiBAcGFyYW0geyp9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICpcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGEgVVJMU2VhcmNoUGFyYW1zIG9iamVjdCwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmNvbnN0IGlzVVJMU2VhcmNoUGFyYW1zID0ga2luZE9mVGVzdCgnVVJMU2VhcmNoUGFyYW1zJyk7XG5cbi8qKlxuICogVHJpbSBleGNlc3Mgd2hpdGVzcGFjZSBvZmYgdGhlIGJlZ2lubmluZyBhbmQgZW5kIG9mIGEgc3RyaW5nXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IHN0ciBUaGUgU3RyaW5nIHRvIHRyaW1cbiAqXG4gKiBAcmV0dXJucyB7U3RyaW5nfSBUaGUgU3RyaW5nIGZyZWVkIG9mIGV4Y2VzcyB3aGl0ZXNwYWNlXG4gKi9cbmNvbnN0IHRyaW0gPSAoc3RyKSA9PiBzdHIudHJpbSA/XG4gIHN0ci50cmltKCkgOiBzdHIucmVwbGFjZSgvXltcXHNcXHVGRUZGXFx4QTBdK3xbXFxzXFx1RkVGRlxceEEwXSskL2csICcnKTtcblxuLyoqXG4gKiBJdGVyYXRlIG92ZXIgYW4gQXJyYXkgb3IgYW4gT2JqZWN0IGludm9raW5nIGEgZnVuY3Rpb24gZm9yIGVhY2ggaXRlbS5cbiAqXG4gKiBJZiBgb2JqYCBpcyBhbiBBcnJheSBjYWxsYmFjayB3aWxsIGJlIGNhbGxlZCBwYXNzaW5nXG4gKiB0aGUgdmFsdWUsIGluZGV4LCBhbmQgY29tcGxldGUgYXJyYXkgZm9yIGVhY2ggaXRlbS5cbiAqXG4gKiBJZiAnb2JqJyBpcyBhbiBPYmplY3QgY2FsbGJhY2sgd2lsbCBiZSBjYWxsZWQgcGFzc2luZ1xuICogdGhlIHZhbHVlLCBrZXksIGFuZCBjb21wbGV0ZSBvYmplY3QgZm9yIGVhY2ggcHJvcGVydHkuXG4gKlxuICogQHBhcmFtIHtPYmplY3R8QXJyYXl9IG9iaiBUaGUgb2JqZWN0IHRvIGl0ZXJhdGVcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZuIFRoZSBjYWxsYmFjayB0byBpbnZva2UgZm9yIGVhY2ggaXRlbVxuICpcbiAqIEBwYXJhbSB7Qm9vbGVhbn0gW2FsbE93bktleXMgPSBmYWxzZV1cbiAqIEByZXR1cm5zIHthbnl9XG4gKi9cbmZ1bmN0aW9uIGZvckVhY2gob2JqLCBmbiwge2FsbE93bktleXMgPSBmYWxzZX0gPSB7fSkge1xuICAvLyBEb24ndCBib3RoZXIgaWYgbm8gdmFsdWUgcHJvdmlkZWRcbiAgaWYgKG9iaiA9PT0gbnVsbCB8fCB0eXBlb2Ygb2JqID09PSAndW5kZWZpbmVkJykge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIGxldCBpO1xuICBsZXQgbDtcblxuICAvLyBGb3JjZSBhbiBhcnJheSBpZiBub3QgYWxyZWFkeSBzb21ldGhpbmcgaXRlcmFibGVcbiAgaWYgKHR5cGVvZiBvYmogIT09ICdvYmplY3QnKSB7XG4gICAgLyplc2xpbnQgbm8tcGFyYW0tcmVhc3NpZ246MCovXG4gICAgb2JqID0gW29ial07XG4gIH1cblxuICBpZiAoaXNBcnJheShvYmopKSB7XG4gICAgLy8gSXRlcmF0ZSBvdmVyIGFycmF5IHZhbHVlc1xuICAgIGZvciAoaSA9IDAsIGwgPSBvYmoubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgICBmbi5jYWxsKG51bGwsIG9ialtpXSwgaSwgb2JqKTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgLy8gSXRlcmF0ZSBvdmVyIG9iamVjdCBrZXlzXG4gICAgY29uc3Qga2V5cyA9IGFsbE93bktleXMgPyBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyhvYmopIDogT2JqZWN0LmtleXMob2JqKTtcbiAgICBjb25zdCBsZW4gPSBrZXlzLmxlbmd0aDtcbiAgICBsZXQga2V5O1xuXG4gICAgZm9yIChpID0gMDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICBrZXkgPSBrZXlzW2ldO1xuICAgICAgZm4uY2FsbChudWxsLCBvYmpba2V5XSwga2V5LCBvYmopO1xuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBmaW5kS2V5KG9iaiwga2V5KSB7XG4gIGtleSA9IGtleS50b0xvd2VyQ2FzZSgpO1xuICBjb25zdCBrZXlzID0gT2JqZWN0LmtleXMob2JqKTtcbiAgbGV0IGkgPSBrZXlzLmxlbmd0aDtcbiAgbGV0IF9rZXk7XG4gIHdoaWxlIChpLS0gPiAwKSB7XG4gICAgX2tleSA9IGtleXNbaV07XG4gICAgaWYgKGtleSA9PT0gX2tleS50b0xvd2VyQ2FzZSgpKSB7XG4gICAgICByZXR1cm4gX2tleTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIG51bGw7XG59XG5cbmNvbnN0IF9nbG9iYWwgPSAoKCkgPT4ge1xuICAvKmVzbGludCBuby11bmRlZjowKi9cbiAgaWYgKHR5cGVvZiBnbG9iYWxUaGlzICE9PSBcInVuZGVmaW5lZFwiKSByZXR1cm4gZ2xvYmFsVGhpcztcbiAgcmV0dXJuIHR5cGVvZiBzZWxmICE9PSBcInVuZGVmaW5lZFwiID8gc2VsZiA6ICh0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyA/IHdpbmRvdyA6IGdsb2JhbClcbn0pKCk7XG5cbmNvbnN0IGlzQ29udGV4dERlZmluZWQgPSAoY29udGV4dCkgPT4gIWlzVW5kZWZpbmVkKGNvbnRleHQpICYmIGNvbnRleHQgIT09IF9nbG9iYWw7XG5cbi8qKlxuICogQWNjZXB0cyB2YXJhcmdzIGV4cGVjdGluZyBlYWNoIGFyZ3VtZW50IHRvIGJlIGFuIG9iamVjdCwgdGhlblxuICogaW1tdXRhYmx5IG1lcmdlcyB0aGUgcHJvcGVydGllcyBvZiBlYWNoIG9iamVjdCBhbmQgcmV0dXJucyByZXN1bHQuXG4gKlxuICogV2hlbiBtdWx0aXBsZSBvYmplY3RzIGNvbnRhaW4gdGhlIHNhbWUga2V5IHRoZSBsYXRlciBvYmplY3QgaW5cbiAqIHRoZSBhcmd1bWVudHMgbGlzdCB3aWxsIHRha2UgcHJlY2VkZW5jZS5cbiAqXG4gKiBFeGFtcGxlOlxuICpcbiAqIGBgYGpzXG4gKiB2YXIgcmVzdWx0ID0gbWVyZ2Uoe2ZvbzogMTIzfSwge2ZvbzogNDU2fSk7XG4gKiBjb25zb2xlLmxvZyhyZXN1bHQuZm9vKTsgLy8gb3V0cHV0cyA0NTZcbiAqIGBgYFxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmoxIE9iamVjdCB0byBtZXJnZVxuICpcbiAqIEByZXR1cm5zIHtPYmplY3R9IFJlc3VsdCBvZiBhbGwgbWVyZ2UgcHJvcGVydGllc1xuICovXG5mdW5jdGlvbiBtZXJnZSgvKiBvYmoxLCBvYmoyLCBvYmozLCAuLi4gKi8pIHtcbiAgY29uc3Qge2Nhc2VsZXNzfSA9IGlzQ29udGV4dERlZmluZWQodGhpcykgJiYgdGhpcyB8fCB7fTtcbiAgY29uc3QgcmVzdWx0ID0ge307XG4gIGNvbnN0IGFzc2lnblZhbHVlID0gKHZhbCwga2V5KSA9PiB7XG4gICAgY29uc3QgdGFyZ2V0S2V5ID0gY2FzZWxlc3MgJiYgZmluZEtleShyZXN1bHQsIGtleSkgfHwga2V5O1xuICAgIGlmIChpc1BsYWluT2JqZWN0KHJlc3VsdFt0YXJnZXRLZXldKSAmJiBpc1BsYWluT2JqZWN0KHZhbCkpIHtcbiAgICAgIHJlc3VsdFt0YXJnZXRLZXldID0gbWVyZ2UocmVzdWx0W3RhcmdldEtleV0sIHZhbCk7XG4gICAgfSBlbHNlIGlmIChpc1BsYWluT2JqZWN0KHZhbCkpIHtcbiAgICAgIHJlc3VsdFt0YXJnZXRLZXldID0gbWVyZ2Uoe30sIHZhbCk7XG4gICAgfSBlbHNlIGlmIChpc0FycmF5KHZhbCkpIHtcbiAgICAgIHJlc3VsdFt0YXJnZXRLZXldID0gdmFsLnNsaWNlKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJlc3VsdFt0YXJnZXRLZXldID0gdmFsO1xuICAgIH1cbiAgfVxuXG4gIGZvciAobGV0IGkgPSAwLCBsID0gYXJndW1lbnRzLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgIGFyZ3VtZW50c1tpXSAmJiBmb3JFYWNoKGFyZ3VtZW50c1tpXSwgYXNzaWduVmFsdWUpO1xuICB9XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbi8qKlxuICogRXh0ZW5kcyBvYmplY3QgYSBieSBtdXRhYmx5IGFkZGluZyB0byBpdCB0aGUgcHJvcGVydGllcyBvZiBvYmplY3QgYi5cbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gYSBUaGUgb2JqZWN0IHRvIGJlIGV4dGVuZGVkXG4gKiBAcGFyYW0ge09iamVjdH0gYiBUaGUgb2JqZWN0IHRvIGNvcHkgcHJvcGVydGllcyBmcm9tXG4gKiBAcGFyYW0ge09iamVjdH0gdGhpc0FyZyBUaGUgb2JqZWN0IHRvIGJpbmQgZnVuY3Rpb24gdG9cbiAqXG4gKiBAcGFyYW0ge0Jvb2xlYW59IFthbGxPd25LZXlzXVxuICogQHJldHVybnMge09iamVjdH0gVGhlIHJlc3VsdGluZyB2YWx1ZSBvZiBvYmplY3QgYVxuICovXG5jb25zdCBleHRlbmQgPSAoYSwgYiwgdGhpc0FyZywge2FsbE93bktleXN9PSB7fSkgPT4ge1xuICBmb3JFYWNoKGIsICh2YWwsIGtleSkgPT4ge1xuICAgIGlmICh0aGlzQXJnICYmIGlzRnVuY3Rpb24odmFsKSkge1xuICAgICAgYVtrZXldID0gYmluZCh2YWwsIHRoaXNBcmcpO1xuICAgIH0gZWxzZSB7XG4gICAgICBhW2tleV0gPSB2YWw7XG4gICAgfVxuICB9LCB7YWxsT3duS2V5c30pO1xuICByZXR1cm4gYTtcbn1cblxuLyoqXG4gKiBSZW1vdmUgYnl0ZSBvcmRlciBtYXJrZXIuIFRoaXMgY2F0Y2hlcyBFRiBCQiBCRiAodGhlIFVURi04IEJPTSlcbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gY29udGVudCB3aXRoIEJPTVxuICpcbiAqIEByZXR1cm5zIHtzdHJpbmd9IGNvbnRlbnQgdmFsdWUgd2l0aG91dCBCT01cbiAqL1xuY29uc3Qgc3RyaXBCT00gPSAoY29udGVudCkgPT4ge1xuICBpZiAoY29udGVudC5jaGFyQ29kZUF0KDApID09PSAweEZFRkYpIHtcbiAgICBjb250ZW50ID0gY29udGVudC5zbGljZSgxKTtcbiAgfVxuICByZXR1cm4gY29udGVudDtcbn1cblxuLyoqXG4gKiBJbmhlcml0IHRoZSBwcm90b3R5cGUgbWV0aG9kcyBmcm9tIG9uZSBjb25zdHJ1Y3RvciBpbnRvIGFub3RoZXJcbiAqIEBwYXJhbSB7ZnVuY3Rpb259IGNvbnN0cnVjdG9yXG4gKiBAcGFyYW0ge2Z1bmN0aW9ufSBzdXBlckNvbnN0cnVjdG9yXG4gKiBAcGFyYW0ge29iamVjdH0gW3Byb3BzXVxuICogQHBhcmFtIHtvYmplY3R9IFtkZXNjcmlwdG9yc11cbiAqXG4gKiBAcmV0dXJucyB7dm9pZH1cbiAqL1xuY29uc3QgaW5oZXJpdHMgPSAoY29uc3RydWN0b3IsIHN1cGVyQ29uc3RydWN0b3IsIHByb3BzLCBkZXNjcmlwdG9ycykgPT4ge1xuICBjb25zdHJ1Y3Rvci5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ29uc3RydWN0b3IucHJvdG90eXBlLCBkZXNjcmlwdG9ycyk7XG4gIGNvbnN0cnVjdG9yLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IGNvbnN0cnVjdG9yO1xuICBPYmplY3QuZGVmaW5lUHJvcGVydHkoY29uc3RydWN0b3IsICdzdXBlcicsIHtcbiAgICB2YWx1ZTogc3VwZXJDb25zdHJ1Y3Rvci5wcm90b3R5cGVcbiAgfSk7XG4gIHByb3BzICYmIE9iamVjdC5hc3NpZ24oY29uc3RydWN0b3IucHJvdG90eXBlLCBwcm9wcyk7XG59XG5cbi8qKlxuICogUmVzb2x2ZSBvYmplY3Qgd2l0aCBkZWVwIHByb3RvdHlwZSBjaGFpbiB0byBhIGZsYXQgb2JqZWN0XG4gKiBAcGFyYW0ge09iamVjdH0gc291cmNlT2JqIHNvdXJjZSBvYmplY3RcbiAqIEBwYXJhbSB7T2JqZWN0fSBbZGVzdE9ial1cbiAqIEBwYXJhbSB7RnVuY3Rpb258Qm9vbGVhbn0gW2ZpbHRlcl1cbiAqIEBwYXJhbSB7RnVuY3Rpb259IFtwcm9wRmlsdGVyXVxuICpcbiAqIEByZXR1cm5zIHtPYmplY3R9XG4gKi9cbmNvbnN0IHRvRmxhdE9iamVjdCA9IChzb3VyY2VPYmosIGRlc3RPYmosIGZpbHRlciwgcHJvcEZpbHRlcikgPT4ge1xuICBsZXQgcHJvcHM7XG4gIGxldCBpO1xuICBsZXQgcHJvcDtcbiAgY29uc3QgbWVyZ2VkID0ge307XG5cbiAgZGVzdE9iaiA9IGRlc3RPYmogfHwge307XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1lcS1udWxsLGVxZXFlcVxuICBpZiAoc291cmNlT2JqID09IG51bGwpIHJldHVybiBkZXN0T2JqO1xuXG4gIGRvIHtcbiAgICBwcm9wcyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKHNvdXJjZU9iaik7XG4gICAgaSA9IHByb3BzLmxlbmd0aDtcbiAgICB3aGlsZSAoaS0tID4gMCkge1xuICAgICAgcHJvcCA9IHByb3BzW2ldO1xuICAgICAgaWYgKCghcHJvcEZpbHRlciB8fCBwcm9wRmlsdGVyKHByb3AsIHNvdXJjZU9iaiwgZGVzdE9iaikpICYmICFtZXJnZWRbcHJvcF0pIHtcbiAgICAgICAgZGVzdE9ialtwcm9wXSA9IHNvdXJjZU9ialtwcm9wXTtcbiAgICAgICAgbWVyZ2VkW3Byb3BdID0gdHJ1ZTtcbiAgICAgIH1cbiAgICB9XG4gICAgc291cmNlT2JqID0gZmlsdGVyICE9PSBmYWxzZSAmJiBnZXRQcm90b3R5cGVPZihzb3VyY2VPYmopO1xuICB9IHdoaWxlIChzb3VyY2VPYmogJiYgKCFmaWx0ZXIgfHwgZmlsdGVyKHNvdXJjZU9iaiwgZGVzdE9iaikpICYmIHNvdXJjZU9iaiAhPT0gT2JqZWN0LnByb3RvdHlwZSk7XG5cbiAgcmV0dXJuIGRlc3RPYmo7XG59XG5cbi8qKlxuICogRGV0ZXJtaW5lcyB3aGV0aGVyIGEgc3RyaW5nIGVuZHMgd2l0aCB0aGUgY2hhcmFjdGVycyBvZiBhIHNwZWNpZmllZCBzdHJpbmdcbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gc3RyXG4gKiBAcGFyYW0ge1N0cmluZ30gc2VhcmNoU3RyaW5nXG4gKiBAcGFyYW0ge051bWJlcn0gW3Bvc2l0aW9uPSAwXVxuICpcbiAqIEByZXR1cm5zIHtib29sZWFufVxuICovXG5jb25zdCBlbmRzV2l0aCA9IChzdHIsIHNlYXJjaFN0cmluZywgcG9zaXRpb24pID0+IHtcbiAgc3RyID0gU3RyaW5nKHN0cik7XG4gIGlmIChwb3NpdGlvbiA9PT0gdW5kZWZpbmVkIHx8IHBvc2l0aW9uID4gc3RyLmxlbmd0aCkge1xuICAgIHBvc2l0aW9uID0gc3RyLmxlbmd0aDtcbiAgfVxuICBwb3NpdGlvbiAtPSBzZWFyY2hTdHJpbmcubGVuZ3RoO1xuICBjb25zdCBsYXN0SW5kZXggPSBzdHIuaW5kZXhPZihzZWFyY2hTdHJpbmcsIHBvc2l0aW9uKTtcbiAgcmV0dXJuIGxhc3RJbmRleCAhPT0gLTEgJiYgbGFzdEluZGV4ID09PSBwb3NpdGlvbjtcbn1cblxuXG4vKipcbiAqIFJldHVybnMgbmV3IGFycmF5IGZyb20gYXJyYXkgbGlrZSBvYmplY3Qgb3IgbnVsbCBpZiBmYWlsZWRcbiAqXG4gKiBAcGFyYW0geyp9IFt0aGluZ11cbiAqXG4gKiBAcmV0dXJucyB7P0FycmF5fVxuICovXG5jb25zdCB0b0FycmF5ID0gKHRoaW5nKSA9PiB7XG4gIGlmICghdGhpbmcpIHJldHVybiBudWxsO1xuICBpZiAoaXNBcnJheSh0aGluZykpIHJldHVybiB0aGluZztcbiAgbGV0IGkgPSB0aGluZy5sZW5ndGg7XG4gIGlmICghaXNOdW1iZXIoaSkpIHJldHVybiBudWxsO1xuICBjb25zdCBhcnIgPSBuZXcgQXJyYXkoaSk7XG4gIHdoaWxlIChpLS0gPiAwKSB7XG4gICAgYXJyW2ldID0gdGhpbmdbaV07XG4gIH1cbiAgcmV0dXJuIGFycjtcbn1cblxuLyoqXG4gKiBDaGVja2luZyBpZiB0aGUgVWludDhBcnJheSBleGlzdHMgYW5kIGlmIGl0IGRvZXMsIGl0IHJldHVybnMgYSBmdW5jdGlvbiB0aGF0IGNoZWNrcyBpZiB0aGVcbiAqIHRoaW5nIHBhc3NlZCBpbiBpcyBhbiBpbnN0YW5jZSBvZiBVaW50OEFycmF5XG4gKlxuICogQHBhcmFtIHtUeXBlZEFycmF5fVxuICpcbiAqIEByZXR1cm5zIHtBcnJheX1cbiAqL1xuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGZ1bmMtbmFtZXNcbmNvbnN0IGlzVHlwZWRBcnJheSA9IChUeXBlZEFycmF5ID0+IHtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGZ1bmMtbmFtZXNcbiAgcmV0dXJuIHRoaW5nID0+IHtcbiAgICByZXR1cm4gVHlwZWRBcnJheSAmJiB0aGluZyBpbnN0YW5jZW9mIFR5cGVkQXJyYXk7XG4gIH07XG59KSh0eXBlb2YgVWludDhBcnJheSAhPT0gJ3VuZGVmaW5lZCcgJiYgZ2V0UHJvdG90eXBlT2YoVWludDhBcnJheSkpO1xuXG4vKipcbiAqIEZvciBlYWNoIGVudHJ5IGluIHRoZSBvYmplY3QsIGNhbGwgdGhlIGZ1bmN0aW9uIHdpdGggdGhlIGtleSBhbmQgdmFsdWUuXG4gKlxuICogQHBhcmFtIHtPYmplY3Q8YW55LCBhbnk+fSBvYmogLSBUaGUgb2JqZWN0IHRvIGl0ZXJhdGUgb3Zlci5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZuIC0gVGhlIGZ1bmN0aW9uIHRvIGNhbGwgZm9yIGVhY2ggZW50cnkuXG4gKlxuICogQHJldHVybnMge3ZvaWR9XG4gKi9cbmNvbnN0IGZvckVhY2hFbnRyeSA9IChvYmosIGZuKSA9PiB7XG4gIGNvbnN0IGdlbmVyYXRvciA9IG9iaiAmJiBvYmpbU3ltYm9sLml0ZXJhdG9yXTtcblxuICBjb25zdCBpdGVyYXRvciA9IGdlbmVyYXRvci5jYWxsKG9iaik7XG5cbiAgbGV0IHJlc3VsdDtcblxuICB3aGlsZSAoKHJlc3VsdCA9IGl0ZXJhdG9yLm5leHQoKSkgJiYgIXJlc3VsdC5kb25lKSB7XG4gICAgY29uc3QgcGFpciA9IHJlc3VsdC52YWx1ZTtcbiAgICBmbi5jYWxsKG9iaiwgcGFpclswXSwgcGFpclsxXSk7XG4gIH1cbn1cblxuLyoqXG4gKiBJdCB0YWtlcyBhIHJlZ3VsYXIgZXhwcmVzc2lvbiBhbmQgYSBzdHJpbmcsIGFuZCByZXR1cm5zIGFuIGFycmF5IG9mIGFsbCB0aGUgbWF0Y2hlc1xuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSByZWdFeHAgLSBUaGUgcmVndWxhciBleHByZXNzaW9uIHRvIG1hdGNoIGFnYWluc3QuXG4gKiBAcGFyYW0ge3N0cmluZ30gc3RyIC0gVGhlIHN0cmluZyB0byBzZWFyY2guXG4gKlxuICogQHJldHVybnMge0FycmF5PGJvb2xlYW4+fVxuICovXG5jb25zdCBtYXRjaEFsbCA9IChyZWdFeHAsIHN0cikgPT4ge1xuICBsZXQgbWF0Y2hlcztcbiAgY29uc3QgYXJyID0gW107XG5cbiAgd2hpbGUgKChtYXRjaGVzID0gcmVnRXhwLmV4ZWMoc3RyKSkgIT09IG51bGwpIHtcbiAgICBhcnIucHVzaChtYXRjaGVzKTtcbiAgfVxuXG4gIHJldHVybiBhcnI7XG59XG5cbi8qIENoZWNraW5nIGlmIHRoZSBraW5kT2ZUZXN0IGZ1bmN0aW9uIHJldHVybnMgdHJ1ZSB3aGVuIHBhc3NlZCBhbiBIVE1MRm9ybUVsZW1lbnQuICovXG5jb25zdCBpc0hUTUxGb3JtID0ga2luZE9mVGVzdCgnSFRNTEZvcm1FbGVtZW50Jyk7XG5cbmNvbnN0IHRvQ2FtZWxDYXNlID0gc3RyID0+IHtcbiAgcmV0dXJuIHN0ci50b0xvd2VyQ2FzZSgpLnJlcGxhY2UoL1stX1xcc10oW2EtelxcZF0pKFxcdyopL2csXG4gICAgZnVuY3Rpb24gcmVwbGFjZXIobSwgcDEsIHAyKSB7XG4gICAgICByZXR1cm4gcDEudG9VcHBlckNhc2UoKSArIHAyO1xuICAgIH1cbiAgKTtcbn07XG5cbi8qIENyZWF0aW5nIGEgZnVuY3Rpb24gdGhhdCB3aWxsIGNoZWNrIGlmIGFuIG9iamVjdCBoYXMgYSBwcm9wZXJ0eS4gKi9cbmNvbnN0IGhhc093blByb3BlcnR5ID0gKCh7aGFzT3duUHJvcGVydHl9KSA9PiAob2JqLCBwcm9wKSA9PiBoYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwgcHJvcCkpKE9iamVjdC5wcm90b3R5cGUpO1xuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgUmVnRXhwIG9iamVjdFxuICpcbiAqIEBwYXJhbSB7Kn0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKlxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYSBSZWdFeHAgb2JqZWN0LCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuY29uc3QgaXNSZWdFeHAgPSBraW5kT2ZUZXN0KCdSZWdFeHAnKTtcblxuY29uc3QgcmVkdWNlRGVzY3JpcHRvcnMgPSAob2JqLCByZWR1Y2VyKSA9PiB7XG4gIGNvbnN0IGRlc2NyaXB0b3JzID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcnMob2JqKTtcbiAgY29uc3QgcmVkdWNlZERlc2NyaXB0b3JzID0ge307XG5cbiAgZm9yRWFjaChkZXNjcmlwdG9ycywgKGRlc2NyaXB0b3IsIG5hbWUpID0+IHtcbiAgICBpZiAocmVkdWNlcihkZXNjcmlwdG9yLCBuYW1lLCBvYmopICE9PSBmYWxzZSkge1xuICAgICAgcmVkdWNlZERlc2NyaXB0b3JzW25hbWVdID0gZGVzY3JpcHRvcjtcbiAgICB9XG4gIH0pO1xuXG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKG9iaiwgcmVkdWNlZERlc2NyaXB0b3JzKTtcbn1cblxuLyoqXG4gKiBNYWtlcyBhbGwgbWV0aG9kcyByZWFkLW9ubHlcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmpcbiAqL1xuXG5jb25zdCBmcmVlemVNZXRob2RzID0gKG9iaikgPT4ge1xuICByZWR1Y2VEZXNjcmlwdG9ycyhvYmosIChkZXNjcmlwdG9yLCBuYW1lKSA9PiB7XG4gICAgLy8gc2tpcCByZXN0cmljdGVkIHByb3BzIGluIHN0cmljdCBtb2RlXG4gICAgaWYgKGlzRnVuY3Rpb24ob2JqKSAmJiBbJ2FyZ3VtZW50cycsICdjYWxsZXInLCAnY2FsbGVlJ10uaW5kZXhPZihuYW1lKSAhPT0gLTEpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICBjb25zdCB2YWx1ZSA9IG9ialtuYW1lXTtcblxuICAgIGlmICghaXNGdW5jdGlvbih2YWx1ZSkpIHJldHVybjtcblxuICAgIGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGZhbHNlO1xuXG4gICAgaWYgKCd3cml0YWJsZScgaW4gZGVzY3JpcHRvcikge1xuICAgICAgZGVzY3JpcHRvci53cml0YWJsZSA9IGZhbHNlO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlmICghZGVzY3JpcHRvci5zZXQpIHtcbiAgICAgIGRlc2NyaXB0b3Iuc2V0ID0gKCkgPT4ge1xuICAgICAgICB0aHJvdyBFcnJvcignQ2FuIG5vdCByZXdyaXRlIHJlYWQtb25seSBtZXRob2QgXFwnJyArIG5hbWUgKyAnXFwnJyk7XG4gICAgICB9O1xuICAgIH1cbiAgfSk7XG59XG5cbmNvbnN0IHRvT2JqZWN0U2V0ID0gKGFycmF5T3JTdHJpbmcsIGRlbGltaXRlcikgPT4ge1xuICBjb25zdCBvYmogPSB7fTtcblxuICBjb25zdCBkZWZpbmUgPSAoYXJyKSA9PiB7XG4gICAgYXJyLmZvckVhY2godmFsdWUgPT4ge1xuICAgICAgb2JqW3ZhbHVlXSA9IHRydWU7XG4gICAgfSk7XG4gIH1cblxuICBpc0FycmF5KGFycmF5T3JTdHJpbmcpID8gZGVmaW5lKGFycmF5T3JTdHJpbmcpIDogZGVmaW5lKFN0cmluZyhhcnJheU9yU3RyaW5nKS5zcGxpdChkZWxpbWl0ZXIpKTtcblxuICByZXR1cm4gb2JqO1xufVxuXG5jb25zdCBub29wID0gKCkgPT4ge31cblxuY29uc3QgdG9GaW5pdGVOdW1iZXIgPSAodmFsdWUsIGRlZmF1bHRWYWx1ZSkgPT4ge1xuICB2YWx1ZSA9ICt2YWx1ZTtcbiAgcmV0dXJuIE51bWJlci5pc0Zpbml0ZSh2YWx1ZSkgPyB2YWx1ZSA6IGRlZmF1bHRWYWx1ZTtcbn1cblxuY29uc3QgQUxQSEEgPSAnYWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXonXG5cbmNvbnN0IERJR0lUID0gJzAxMjM0NTY3ODknO1xuXG5jb25zdCBBTFBIQUJFVCA9IHtcbiAgRElHSVQsXG4gIEFMUEhBLFxuICBBTFBIQV9ESUdJVDogQUxQSEEgKyBBTFBIQS50b1VwcGVyQ2FzZSgpICsgRElHSVRcbn1cblxuY29uc3QgZ2VuZXJhdGVTdHJpbmcgPSAoc2l6ZSA9IDE2LCBhbHBoYWJldCA9IEFMUEhBQkVULkFMUEhBX0RJR0lUKSA9PiB7XG4gIGxldCBzdHIgPSAnJztcbiAgY29uc3Qge2xlbmd0aH0gPSBhbHBoYWJldDtcbiAgd2hpbGUgKHNpemUtLSkge1xuICAgIHN0ciArPSBhbHBoYWJldFtNYXRoLnJhbmRvbSgpICogbGVuZ3RofDBdXG4gIH1cblxuICByZXR1cm4gc3RyO1xufVxuXG4vKipcbiAqIElmIHRoZSB0aGluZyBpcyBhIEZvcm1EYXRhIG9iamVjdCwgcmV0dXJuIHRydWUsIG90aGVyd2lzZSByZXR1cm4gZmFsc2UuXG4gKlxuICogQHBhcmFtIHt1bmtub3dufSB0aGluZyAtIFRoZSB0aGluZyB0byBjaGVjay5cbiAqXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn1cbiAqL1xuZnVuY3Rpb24gaXNTcGVjQ29tcGxpYW50Rm9ybSh0aGluZykge1xuICByZXR1cm4gISEodGhpbmcgJiYgaXNGdW5jdGlvbih0aGluZy5hcHBlbmQpICYmIHRoaW5nW1N5bWJvbC50b1N0cmluZ1RhZ10gPT09ICdGb3JtRGF0YScgJiYgdGhpbmdbU3ltYm9sLml0ZXJhdG9yXSk7XG59XG5cbmNvbnN0IHRvSlNPTk9iamVjdCA9IChvYmopID0+IHtcbiAgY29uc3Qgc3RhY2sgPSBuZXcgQXJyYXkoMTApO1xuXG4gIGNvbnN0IHZpc2l0ID0gKHNvdXJjZSwgaSkgPT4ge1xuXG4gICAgaWYgKGlzT2JqZWN0KHNvdXJjZSkpIHtcbiAgICAgIGlmIChzdGFjay5pbmRleE9mKHNvdXJjZSkgPj0gMCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGlmKCEoJ3RvSlNPTicgaW4gc291cmNlKSkge1xuICAgICAgICBzdGFja1tpXSA9IHNvdXJjZTtcbiAgICAgICAgY29uc3QgdGFyZ2V0ID0gaXNBcnJheShzb3VyY2UpID8gW10gOiB7fTtcblxuICAgICAgICBmb3JFYWNoKHNvdXJjZSwgKHZhbHVlLCBrZXkpID0+IHtcbiAgICAgICAgICBjb25zdCByZWR1Y2VkVmFsdWUgPSB2aXNpdCh2YWx1ZSwgaSArIDEpO1xuICAgICAgICAgICFpc1VuZGVmaW5lZChyZWR1Y2VkVmFsdWUpICYmICh0YXJnZXRba2V5XSA9IHJlZHVjZWRWYWx1ZSk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIHN0YWNrW2ldID0gdW5kZWZpbmVkO1xuXG4gICAgICAgIHJldHVybiB0YXJnZXQ7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHNvdXJjZTtcbiAgfVxuXG4gIHJldHVybiB2aXNpdChvYmosIDApO1xufVxuXG5jb25zdCBpc0FzeW5jRm4gPSBraW5kT2ZUZXN0KCdBc3luY0Z1bmN0aW9uJyk7XG5cbmNvbnN0IGlzVGhlbmFibGUgPSAodGhpbmcpID0+XG4gIHRoaW5nICYmIChpc09iamVjdCh0aGluZykgfHwgaXNGdW5jdGlvbih0aGluZykpICYmIGlzRnVuY3Rpb24odGhpbmcudGhlbikgJiYgaXNGdW5jdGlvbih0aGluZy5jYXRjaCk7XG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgaXNBcnJheSxcbiAgaXNBcnJheUJ1ZmZlcixcbiAgaXNCdWZmZXIsXG4gIGlzRm9ybURhdGEsXG4gIGlzQXJyYXlCdWZmZXJWaWV3LFxuICBpc1N0cmluZyxcbiAgaXNOdW1iZXIsXG4gIGlzQm9vbGVhbixcbiAgaXNPYmplY3QsXG4gIGlzUGxhaW5PYmplY3QsXG4gIGlzVW5kZWZpbmVkLFxuICBpc0RhdGUsXG4gIGlzRmlsZSxcbiAgaXNCbG9iLFxuICBpc1JlZ0V4cCxcbiAgaXNGdW5jdGlvbixcbiAgaXNTdHJlYW0sXG4gIGlzVVJMU2VhcmNoUGFyYW1zLFxuICBpc1R5cGVkQXJyYXksXG4gIGlzRmlsZUxpc3QsXG4gIGZvckVhY2gsXG4gIG1lcmdlLFxuICBleHRlbmQsXG4gIHRyaW0sXG4gIHN0cmlwQk9NLFxuICBpbmhlcml0cyxcbiAgdG9GbGF0T2JqZWN0LFxuICBraW5kT2YsXG4gIGtpbmRPZlRlc3QsXG4gIGVuZHNXaXRoLFxuICB0b0FycmF5LFxuICBmb3JFYWNoRW50cnksXG4gIG1hdGNoQWxsLFxuICBpc0hUTUxGb3JtLFxuICBoYXNPd25Qcm9wZXJ0eSxcbiAgaGFzT3duUHJvcDogaGFzT3duUHJvcGVydHksIC8vIGFuIGFsaWFzIHRvIGF2b2lkIEVTTGludCBuby1wcm90b3R5cGUtYnVpbHRpbnMgZGV0ZWN0aW9uXG4gIHJlZHVjZURlc2NyaXB0b3JzLFxuICBmcmVlemVNZXRob2RzLFxuICB0b09iamVjdFNldCxcbiAgdG9DYW1lbENhc2UsXG4gIG5vb3AsXG4gIHRvRmluaXRlTnVtYmVyLFxuICBmaW5kS2V5LFxuICBnbG9iYWw6IF9nbG9iYWwsXG4gIGlzQ29udGV4dERlZmluZWQsXG4gIEFMUEhBQkVULFxuICBnZW5lcmF0ZVN0cmluZyxcbiAgaXNTcGVjQ29tcGxpYW50Rm9ybSxcbiAgdG9KU09OT2JqZWN0LFxuICBpc0FzeW5jRm4sXG4gIGlzVGhlbmFibGVcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbmltcG9ydCB1dGlscyBmcm9tICcuLi91dGlscy5qcyc7XG5cbi8qKlxuICogQ3JlYXRlIGFuIEVycm9yIHdpdGggdGhlIHNwZWNpZmllZCBtZXNzYWdlLCBjb25maWcsIGVycm9yIGNvZGUsIHJlcXVlc3QgYW5kIHJlc3BvbnNlLlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBtZXNzYWdlIFRoZSBlcnJvciBtZXNzYWdlLlxuICogQHBhcmFtIHtzdHJpbmd9IFtjb2RlXSBUaGUgZXJyb3IgY29kZSAoZm9yIGV4YW1wbGUsICdFQ09OTkFCT1JURUQnKS5cbiAqIEBwYXJhbSB7T2JqZWN0fSBbY29uZmlnXSBUaGUgY29uZmlnLlxuICogQHBhcmFtIHtPYmplY3R9IFtyZXF1ZXN0XSBUaGUgcmVxdWVzdC5cbiAqIEBwYXJhbSB7T2JqZWN0fSBbcmVzcG9uc2VdIFRoZSByZXNwb25zZS5cbiAqXG4gKiBAcmV0dXJucyB7RXJyb3J9IFRoZSBjcmVhdGVkIGVycm9yLlxuICovXG5mdW5jdGlvbiBBeGlvc0Vycm9yKG1lc3NhZ2UsIGNvZGUsIGNvbmZpZywgcmVxdWVzdCwgcmVzcG9uc2UpIHtcbiAgRXJyb3IuY2FsbCh0aGlzKTtcblxuICBpZiAoRXJyb3IuY2FwdHVyZVN0YWNrVHJhY2UpIHtcbiAgICBFcnJvci5jYXB0dXJlU3RhY2tUcmFjZSh0aGlzLCB0aGlzLmNvbnN0cnVjdG9yKTtcbiAgfSBlbHNlIHtcbiAgICB0aGlzLnN0YWNrID0gKG5ldyBFcnJvcigpKS5zdGFjaztcbiAgfVxuXG4gIHRoaXMubWVzc2FnZSA9IG1lc3NhZ2U7XG4gIHRoaXMubmFtZSA9ICdBeGlvc0Vycm9yJztcbiAgY29kZSAmJiAodGhpcy5jb2RlID0gY29kZSk7XG4gIGNvbmZpZyAmJiAodGhpcy5jb25maWcgPSBjb25maWcpO1xuICByZXF1ZXN0ICYmICh0aGlzLnJlcXVlc3QgPSByZXF1ZXN0KTtcbiAgcmVzcG9uc2UgJiYgKHRoaXMucmVzcG9uc2UgPSByZXNwb25zZSk7XG59XG5cbnV0aWxzLmluaGVyaXRzKEF4aW9zRXJyb3IsIEVycm9yLCB7XG4gIHRvSlNPTjogZnVuY3Rpb24gdG9KU09OKCkge1xuICAgIHJldHVybiB7XG4gICAgICAvLyBTdGFuZGFyZFxuICAgICAgbWVzc2FnZTogdGhpcy5tZXNzYWdlLFxuICAgICAgbmFtZTogdGhpcy5uYW1lLFxuICAgICAgLy8gTWljcm9zb2Z0XG4gICAgICBkZXNjcmlwdGlvbjogdGhpcy5kZXNjcmlwdGlvbixcbiAgICAgIG51bWJlcjogdGhpcy5udW1iZXIsXG4gICAgICAvLyBNb3ppbGxhXG4gICAgICBmaWxlTmFtZTogdGhpcy5maWxlTmFtZSxcbiAgICAgIGxpbmVOdW1iZXI6IHRoaXMubGluZU51bWJlcixcbiAgICAgIGNvbHVtbk51bWJlcjogdGhpcy5jb2x1bW5OdW1iZXIsXG4gICAgICBzdGFjazogdGhpcy5zdGFjayxcbiAgICAgIC8vIEF4aW9zXG4gICAgICBjb25maWc6IHV0aWxzLnRvSlNPTk9iamVjdCh0aGlzLmNvbmZpZyksXG4gICAgICBjb2RlOiB0aGlzLmNvZGUsXG4gICAgICBzdGF0dXM6IHRoaXMucmVzcG9uc2UgJiYgdGhpcy5yZXNwb25zZS5zdGF0dXMgPyB0aGlzLnJlc3BvbnNlLnN0YXR1cyA6IG51bGxcbiAgICB9O1xuICB9XG59KTtcblxuY29uc3QgcHJvdG90eXBlID0gQXhpb3NFcnJvci5wcm90b3R5cGU7XG5jb25zdCBkZXNjcmlwdG9ycyA9IHt9O1xuXG5bXG4gICdFUlJfQkFEX09QVElPTl9WQUxVRScsXG4gICdFUlJfQkFEX09QVElPTicsXG4gICdFQ09OTkFCT1JURUQnLFxuICAnRVRJTUVET1VUJyxcbiAgJ0VSUl9ORVRXT1JLJyxcbiAgJ0VSUl9GUl9UT09fTUFOWV9SRURJUkVDVFMnLFxuICAnRVJSX0RFUFJFQ0FURUQnLFxuICAnRVJSX0JBRF9SRVNQT05TRScsXG4gICdFUlJfQkFEX1JFUVVFU1QnLFxuICAnRVJSX0NBTkNFTEVEJyxcbiAgJ0VSUl9OT1RfU1VQUE9SVCcsXG4gICdFUlJfSU5WQUxJRF9VUkwnXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZnVuYy1uYW1lc1xuXS5mb3JFYWNoKGNvZGUgPT4ge1xuICBkZXNjcmlwdG9yc1tjb2RlXSA9IHt2YWx1ZTogY29kZX07XG59KTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnRpZXMoQXhpb3NFcnJvciwgZGVzY3JpcHRvcnMpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KHByb3RvdHlwZSwgJ2lzQXhpb3NFcnJvcicsIHt2YWx1ZTogdHJ1ZX0pO1xuXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZnVuYy1uYW1lc1xuQXhpb3NFcnJvci5mcm9tID0gKGVycm9yLCBjb2RlLCBjb25maWcsIHJlcXVlc3QsIHJlc3BvbnNlLCBjdXN0b21Qcm9wcykgPT4ge1xuICBjb25zdCBheGlvc0Vycm9yID0gT2JqZWN0LmNyZWF0ZShwcm90b3R5cGUpO1xuXG4gIHV0aWxzLnRvRmxhdE9iamVjdChlcnJvciwgYXhpb3NFcnJvciwgZnVuY3Rpb24gZmlsdGVyKG9iaikge1xuICAgIHJldHVybiBvYmogIT09IEVycm9yLnByb3RvdHlwZTtcbiAgfSwgcHJvcCA9PiB7XG4gICAgcmV0dXJuIHByb3AgIT09ICdpc0F4aW9zRXJyb3InO1xuICB9KTtcblxuICBBeGlvc0Vycm9yLmNhbGwoYXhpb3NFcnJvciwgZXJyb3IubWVzc2FnZSwgY29kZSwgY29uZmlnLCByZXF1ZXN0LCByZXNwb25zZSk7XG5cbiAgYXhpb3NFcnJvci5jYXVzZSA9IGVycm9yO1xuXG4gIGF4aW9zRXJyb3IubmFtZSA9IGVycm9yLm5hbWU7XG5cbiAgY3VzdG9tUHJvcHMgJiYgT2JqZWN0LmFzc2lnbihheGlvc0Vycm9yLCBjdXN0b21Qcm9wcyk7XG5cbiAgcmV0dXJuIGF4aW9zRXJyb3I7XG59O1xuXG5leHBvcnQgZGVmYXVsdCBBeGlvc0Vycm9yO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5pbXBvcnQgdXRpbHMgZnJvbSAnLi4vdXRpbHMuanMnO1xuaW1wb3J0IEF4aW9zRXJyb3IgZnJvbSAnLi4vY29yZS9BeGlvc0Vycm9yLmpzJztcbi8vIHRlbXBvcmFyeSBob3RmaXggdG8gYXZvaWQgY2lyY3VsYXIgcmVmZXJlbmNlcyB1bnRpbCBBeGlvc1VSTFNlYXJjaFBhcmFtcyBpcyByZWZhY3RvcmVkXG5pbXBvcnQgUGxhdGZvcm1Gb3JtRGF0YSBmcm9tICcuLi9wbGF0Zm9ybS9ub2RlL2NsYXNzZXMvRm9ybURhdGEuanMnO1xuXG4vKipcbiAqIERldGVybWluZXMgaWYgdGhlIGdpdmVuIHRoaW5nIGlzIGEgYXJyYXkgb3IganMgb2JqZWN0LlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSB0aGluZyAtIFRoZSBvYmplY3Qgb3IgYXJyYXkgdG8gYmUgdmlzaXRlZC5cbiAqXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn1cbiAqL1xuZnVuY3Rpb24gaXNWaXNpdGFibGUodGhpbmcpIHtcbiAgcmV0dXJuIHV0aWxzLmlzUGxhaW5PYmplY3QodGhpbmcpIHx8IHV0aWxzLmlzQXJyYXkodGhpbmcpO1xufVxuXG4vKipcbiAqIEl0IHJlbW92ZXMgdGhlIGJyYWNrZXRzIGZyb20gdGhlIGVuZCBvZiBhIHN0cmluZ1xuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgLSBUaGUga2V5IG9mIHRoZSBwYXJhbWV0ZXIuXG4gKlxuICogQHJldHVybnMge3N0cmluZ30gdGhlIGtleSB3aXRob3V0IHRoZSBicmFja2V0cy5cbiAqL1xuZnVuY3Rpb24gcmVtb3ZlQnJhY2tldHMoa2V5KSB7XG4gIHJldHVybiB1dGlscy5lbmRzV2l0aChrZXksICdbXScpID8ga2V5LnNsaWNlKDAsIC0yKSA6IGtleTtcbn1cblxuLyoqXG4gKiBJdCB0YWtlcyBhIHBhdGgsIGEga2V5LCBhbmQgYSBib29sZWFuLCBhbmQgcmV0dXJucyBhIHN0cmluZ1xuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBwYXRoIC0gVGhlIHBhdGggdG8gdGhlIGN1cnJlbnQga2V5LlxuICogQHBhcmFtIHtzdHJpbmd9IGtleSAtIFRoZSBrZXkgb2YgdGhlIGN1cnJlbnQgb2JqZWN0IGJlaW5nIGl0ZXJhdGVkIG92ZXIuXG4gKiBAcGFyYW0ge3N0cmluZ30gZG90cyAtIElmIHRydWUsIHRoZSBrZXkgd2lsbCBiZSByZW5kZXJlZCB3aXRoIGRvdHMgaW5zdGVhZCBvZiBicmFja2V0cy5cbiAqXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBUaGUgcGF0aCB0byB0aGUgY3VycmVudCBrZXkuXG4gKi9cbmZ1bmN0aW9uIHJlbmRlcktleShwYXRoLCBrZXksIGRvdHMpIHtcbiAgaWYgKCFwYXRoKSByZXR1cm4ga2V5O1xuICByZXR1cm4gcGF0aC5jb25jYXQoa2V5KS5tYXAoZnVuY3Rpb24gZWFjaCh0b2tlbiwgaSkge1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1wYXJhbS1yZWFzc2lnblxuICAgIHRva2VuID0gcmVtb3ZlQnJhY2tldHModG9rZW4pO1xuICAgIHJldHVybiAhZG90cyAmJiBpID8gJ1snICsgdG9rZW4gKyAnXScgOiB0b2tlbjtcbiAgfSkuam9pbihkb3RzID8gJy4nIDogJycpO1xufVxuXG4vKipcbiAqIElmIHRoZSBhcnJheSBpcyBhbiBhcnJheSBhbmQgbm9uZSBvZiBpdHMgZWxlbWVudHMgYXJlIHZpc2l0YWJsZSwgdGhlbiBpdCdzIGEgZmxhdCBhcnJheS5cbiAqXG4gKiBAcGFyYW0ge0FycmF5PGFueT59IGFyciAtIFRoZSBhcnJheSB0byBjaGVja1xuICpcbiAqIEByZXR1cm5zIHtib29sZWFufVxuICovXG5mdW5jdGlvbiBpc0ZsYXRBcnJheShhcnIpIHtcbiAgcmV0dXJuIHV0aWxzLmlzQXJyYXkoYXJyKSAmJiAhYXJyLnNvbWUoaXNWaXNpdGFibGUpO1xufVxuXG5jb25zdCBwcmVkaWNhdGVzID0gdXRpbHMudG9GbGF0T2JqZWN0KHV0aWxzLCB7fSwgbnVsbCwgZnVuY3Rpb24gZmlsdGVyKHByb3ApIHtcbiAgcmV0dXJuIC9eaXNbQS1aXS8udGVzdChwcm9wKTtcbn0pO1xuXG4vKipcbiAqIENvbnZlcnQgYSBkYXRhIG9iamVjdCB0byBGb3JtRGF0YVxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmpcbiAqIEBwYXJhbSB7P09iamVjdH0gW2Zvcm1EYXRhXVxuICogQHBhcmFtIHs/T2JqZWN0fSBbb3B0aW9uc11cbiAqIEBwYXJhbSB7RnVuY3Rpb259IFtvcHRpb25zLnZpc2l0b3JdXG4gKiBAcGFyYW0ge0Jvb2xlYW59IFtvcHRpb25zLm1ldGFUb2tlbnMgPSB0cnVlXVxuICogQHBhcmFtIHtCb29sZWFufSBbb3B0aW9ucy5kb3RzID0gZmFsc2VdXG4gKiBAcGFyYW0gez9Cb29sZWFufSBbb3B0aW9ucy5pbmRleGVzID0gZmFsc2VdXG4gKlxuICogQHJldHVybnMge09iamVjdH1cbiAqKi9cblxuLyoqXG4gKiBJdCBjb252ZXJ0cyBhbiBvYmplY3QgaW50byBhIEZvcm1EYXRhIG9iamVjdFxuICpcbiAqIEBwYXJhbSB7T2JqZWN0PGFueSwgYW55Pn0gb2JqIC0gVGhlIG9iamVjdCB0byBjb252ZXJ0IHRvIGZvcm0gZGF0YS5cbiAqIEBwYXJhbSB7c3RyaW5nfSBmb3JtRGF0YSAtIFRoZSBGb3JtRGF0YSBvYmplY3QgdG8gYXBwZW5kIHRvLlxuICogQHBhcmFtIHtPYmplY3Q8c3RyaW5nLCBhbnk+fSBvcHRpb25zXG4gKlxuICogQHJldHVybnNcbiAqL1xuZnVuY3Rpb24gdG9Gb3JtRGF0YShvYmosIGZvcm1EYXRhLCBvcHRpb25zKSB7XG4gIGlmICghdXRpbHMuaXNPYmplY3Qob2JqKSkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ3RhcmdldCBtdXN0IGJlIGFuIG9iamVjdCcpO1xuICB9XG5cbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXBhcmFtLXJlYXNzaWduXG4gIGZvcm1EYXRhID0gZm9ybURhdGEgfHwgbmV3IChQbGF0Zm9ybUZvcm1EYXRhIHx8IEZvcm1EYXRhKSgpO1xuXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1wYXJhbS1yZWFzc2lnblxuICBvcHRpb25zID0gdXRpbHMudG9GbGF0T2JqZWN0KG9wdGlvbnMsIHtcbiAgICBtZXRhVG9rZW5zOiB0cnVlLFxuICAgIGRvdHM6IGZhbHNlLFxuICAgIGluZGV4ZXM6IGZhbHNlXG4gIH0sIGZhbHNlLCBmdW5jdGlvbiBkZWZpbmVkKG9wdGlvbiwgc291cmNlKSB7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWVxLW51bGwsZXFlcWVxXG4gICAgcmV0dXJuICF1dGlscy5pc1VuZGVmaW5lZChzb3VyY2Vbb3B0aW9uXSk7XG4gIH0pO1xuXG4gIGNvbnN0IG1ldGFUb2tlbnMgPSBvcHRpb25zLm1ldGFUb2tlbnM7XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11c2UtYmVmb3JlLWRlZmluZVxuICBjb25zdCB2aXNpdG9yID0gb3B0aW9ucy52aXNpdG9yIHx8IGRlZmF1bHRWaXNpdG9yO1xuICBjb25zdCBkb3RzID0gb3B0aW9ucy5kb3RzO1xuICBjb25zdCBpbmRleGVzID0gb3B0aW9ucy5pbmRleGVzO1xuICBjb25zdCBfQmxvYiA9IG9wdGlvbnMuQmxvYiB8fCB0eXBlb2YgQmxvYiAhPT0gJ3VuZGVmaW5lZCcgJiYgQmxvYjtcbiAgY29uc3QgdXNlQmxvYiA9IF9CbG9iICYmIHV0aWxzLmlzU3BlY0NvbXBsaWFudEZvcm0oZm9ybURhdGEpO1xuXG4gIGlmICghdXRpbHMuaXNGdW5jdGlvbih2aXNpdG9yKSkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ3Zpc2l0b3IgbXVzdCBiZSBhIGZ1bmN0aW9uJyk7XG4gIH1cblxuICBmdW5jdGlvbiBjb252ZXJ0VmFsdWUodmFsdWUpIHtcbiAgICBpZiAodmFsdWUgPT09IG51bGwpIHJldHVybiAnJztcblxuICAgIGlmICh1dGlscy5pc0RhdGUodmFsdWUpKSB7XG4gICAgICByZXR1cm4gdmFsdWUudG9JU09TdHJpbmcoKTtcbiAgICB9XG5cbiAgICBpZiAoIXVzZUJsb2IgJiYgdXRpbHMuaXNCbG9iKHZhbHVlKSkge1xuICAgICAgdGhyb3cgbmV3IEF4aW9zRXJyb3IoJ0Jsb2IgaXMgbm90IHN1cHBvcnRlZC4gVXNlIGEgQnVmZmVyIGluc3RlYWQuJyk7XG4gICAgfVxuXG4gICAgaWYgKHV0aWxzLmlzQXJyYXlCdWZmZXIodmFsdWUpIHx8IHV0aWxzLmlzVHlwZWRBcnJheSh2YWx1ZSkpIHtcbiAgICAgIHJldHVybiB1c2VCbG9iICYmIHR5cGVvZiBCbG9iID09PSAnZnVuY3Rpb24nID8gbmV3IEJsb2IoW3ZhbHVlXSkgOiBCdWZmZXIuZnJvbSh2YWx1ZSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHZhbHVlO1xuICB9XG5cbiAgLyoqXG4gICAqIERlZmF1bHQgdmlzaXRvci5cbiAgICpcbiAgICogQHBhcmFtIHsqfSB2YWx1ZVxuICAgKiBAcGFyYW0ge1N0cmluZ3xOdW1iZXJ9IGtleVxuICAgKiBAcGFyYW0ge0FycmF5PFN0cmluZ3xOdW1iZXI+fSBwYXRoXG4gICAqIEB0aGlzIHtGb3JtRGF0YX1cbiAgICpcbiAgICogQHJldHVybnMge2Jvb2xlYW59IHJldHVybiB0cnVlIHRvIHZpc2l0IHRoZSBlYWNoIHByb3Agb2YgdGhlIHZhbHVlIHJlY3Vyc2l2ZWx5XG4gICAqL1xuICBmdW5jdGlvbiBkZWZhdWx0VmlzaXRvcih2YWx1ZSwga2V5LCBwYXRoKSB7XG4gICAgbGV0IGFyciA9IHZhbHVlO1xuXG4gICAgaWYgKHZhbHVlICYmICFwYXRoICYmIHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCcpIHtcbiAgICAgIGlmICh1dGlscy5lbmRzV2l0aChrZXksICd7fScpKSB7XG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1wYXJhbS1yZWFzc2lnblxuICAgICAgICBrZXkgPSBtZXRhVG9rZW5zID8ga2V5IDoga2V5LnNsaWNlKDAsIC0yKTtcbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXBhcmFtLXJlYXNzaWduXG4gICAgICAgIHZhbHVlID0gSlNPTi5zdHJpbmdpZnkodmFsdWUpO1xuICAgICAgfSBlbHNlIGlmIChcbiAgICAgICAgKHV0aWxzLmlzQXJyYXkodmFsdWUpICYmIGlzRmxhdEFycmF5KHZhbHVlKSkgfHxcbiAgICAgICAgKCh1dGlscy5pc0ZpbGVMaXN0KHZhbHVlKSB8fCB1dGlscy5lbmRzV2l0aChrZXksICdbXScpKSAmJiAoYXJyID0gdXRpbHMudG9BcnJheSh2YWx1ZSkpXG4gICAgICAgICkpIHtcbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXBhcmFtLXJlYXNzaWduXG4gICAgICAgIGtleSA9IHJlbW92ZUJyYWNrZXRzKGtleSk7XG5cbiAgICAgICAgYXJyLmZvckVhY2goZnVuY3Rpb24gZWFjaChlbCwgaW5kZXgpIHtcbiAgICAgICAgICAhKHV0aWxzLmlzVW5kZWZpbmVkKGVsKSB8fCBlbCA9PT0gbnVsbCkgJiYgZm9ybURhdGEuYXBwZW5kKFxuICAgICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLW5lc3RlZC10ZXJuYXJ5XG4gICAgICAgICAgICBpbmRleGVzID09PSB0cnVlID8gcmVuZGVyS2V5KFtrZXldLCBpbmRleCwgZG90cykgOiAoaW5kZXhlcyA9PT0gbnVsbCA/IGtleSA6IGtleSArICdbXScpLFxuICAgICAgICAgICAgY29udmVydFZhbHVlKGVsKVxuICAgICAgICAgICk7XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKGlzVmlzaXRhYmxlKHZhbHVlKSkge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuXG4gICAgZm9ybURhdGEuYXBwZW5kKHJlbmRlcktleShwYXRoLCBrZXksIGRvdHMpLCBjb252ZXJ0VmFsdWUodmFsdWUpKTtcblxuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIGNvbnN0IHN0YWNrID0gW107XG5cbiAgY29uc3QgZXhwb3NlZEhlbHBlcnMgPSBPYmplY3QuYXNzaWduKHByZWRpY2F0ZXMsIHtcbiAgICBkZWZhdWx0VmlzaXRvcixcbiAgICBjb252ZXJ0VmFsdWUsXG4gICAgaXNWaXNpdGFibGVcbiAgfSk7XG5cbiAgZnVuY3Rpb24gYnVpbGQodmFsdWUsIHBhdGgpIHtcbiAgICBpZiAodXRpbHMuaXNVbmRlZmluZWQodmFsdWUpKSByZXR1cm47XG5cbiAgICBpZiAoc3RhY2suaW5kZXhPZih2YWx1ZSkgIT09IC0xKSB7XG4gICAgICB0aHJvdyBFcnJvcignQ2lyY3VsYXIgcmVmZXJlbmNlIGRldGVjdGVkIGluICcgKyBwYXRoLmpvaW4oJy4nKSk7XG4gICAgfVxuXG4gICAgc3RhY2sucHVzaCh2YWx1ZSk7XG5cbiAgICB1dGlscy5mb3JFYWNoKHZhbHVlLCBmdW5jdGlvbiBlYWNoKGVsLCBrZXkpIHtcbiAgICAgIGNvbnN0IHJlc3VsdCA9ICEodXRpbHMuaXNVbmRlZmluZWQoZWwpIHx8IGVsID09PSBudWxsKSAmJiB2aXNpdG9yLmNhbGwoXG4gICAgICAgIGZvcm1EYXRhLCBlbCwgdXRpbHMuaXNTdHJpbmcoa2V5KSA/IGtleS50cmltKCkgOiBrZXksIHBhdGgsIGV4cG9zZWRIZWxwZXJzXG4gICAgICApO1xuXG4gICAgICBpZiAocmVzdWx0ID09PSB0cnVlKSB7XG4gICAgICAgIGJ1aWxkKGVsLCBwYXRoID8gcGF0aC5jb25jYXQoa2V5KSA6IFtrZXldKTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIHN0YWNrLnBvcCgpO1xuICB9XG5cbiAgaWYgKCF1dGlscy5pc09iamVjdChvYmopKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignZGF0YSBtdXN0IGJlIGFuIG9iamVjdCcpO1xuICB9XG5cbiAgYnVpbGQob2JqKTtcblxuICByZXR1cm4gZm9ybURhdGE7XG59XG5cbmV4cG9ydCBkZWZhdWx0IHRvRm9ybURhdGE7XG4iLCIndXNlIHN0cmljdCc7XG5cbmltcG9ydCB0b0Zvcm1EYXRhIGZyb20gJy4vdG9Gb3JtRGF0YS5qcyc7XG5cbi8qKlxuICogSXQgZW5jb2RlcyBhIHN0cmluZyBieSByZXBsYWNpbmcgYWxsIGNoYXJhY3RlcnMgdGhhdCBhcmUgbm90IGluIHRoZSB1bnJlc2VydmVkIHNldCB3aXRoXG4gKiB0aGVpciBwZXJjZW50LWVuY29kZWQgZXF1aXZhbGVudHNcbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gc3RyIC0gVGhlIHN0cmluZyB0byBlbmNvZGUuXG4gKlxuICogQHJldHVybnMge3N0cmluZ30gVGhlIGVuY29kZWQgc3RyaW5nLlxuICovXG5mdW5jdGlvbiBlbmNvZGUoc3RyKSB7XG4gIGNvbnN0IGNoYXJNYXAgPSB7XG4gICAgJyEnOiAnJTIxJyxcbiAgICBcIidcIjogJyUyNycsXG4gICAgJygnOiAnJTI4JyxcbiAgICAnKSc6ICclMjknLFxuICAgICd+JzogJyU3RScsXG4gICAgJyUyMCc6ICcrJyxcbiAgICAnJTAwJzogJ1xceDAwJ1xuICB9O1xuICByZXR1cm4gZW5jb2RlVVJJQ29tcG9uZW50KHN0cikucmVwbGFjZSgvWyEnKCl+XXwlMjB8JTAwL2csIGZ1bmN0aW9uIHJlcGxhY2VyKG1hdGNoKSB7XG4gICAgcmV0dXJuIGNoYXJNYXBbbWF0Y2hdO1xuICB9KTtcbn1cblxuLyoqXG4gKiBJdCB0YWtlcyBhIHBhcmFtcyBvYmplY3QgYW5kIGNvbnZlcnRzIGl0IHRvIGEgRm9ybURhdGEgb2JqZWN0XG4gKlxuICogQHBhcmFtIHtPYmplY3Q8c3RyaW5nLCBhbnk+fSBwYXJhbXMgLSBUaGUgcGFyYW1ldGVycyB0byBiZSBjb252ZXJ0ZWQgdG8gYSBGb3JtRGF0YSBvYmplY3QuXG4gKiBAcGFyYW0ge09iamVjdDxzdHJpbmcsIGFueT59IG9wdGlvbnMgLSBUaGUgb3B0aW9ucyBvYmplY3QgcGFzc2VkIHRvIHRoZSBBeGlvcyBjb25zdHJ1Y3Rvci5cbiAqXG4gKiBAcmV0dXJucyB7dm9pZH1cbiAqL1xuZnVuY3Rpb24gQXhpb3NVUkxTZWFyY2hQYXJhbXMocGFyYW1zLCBvcHRpb25zKSB7XG4gIHRoaXMuX3BhaXJzID0gW107XG5cbiAgcGFyYW1zICYmIHRvRm9ybURhdGEocGFyYW1zLCB0aGlzLCBvcHRpb25zKTtcbn1cblxuY29uc3QgcHJvdG90eXBlID0gQXhpb3NVUkxTZWFyY2hQYXJhbXMucHJvdG90eXBlO1xuXG5wcm90b3R5cGUuYXBwZW5kID0gZnVuY3Rpb24gYXBwZW5kKG5hbWUsIHZhbHVlKSB7XG4gIHRoaXMuX3BhaXJzLnB1c2goW25hbWUsIHZhbHVlXSk7XG59O1xuXG5wcm90b3R5cGUudG9TdHJpbmcgPSBmdW5jdGlvbiB0b1N0cmluZyhlbmNvZGVyKSB7XG4gIGNvbnN0IF9lbmNvZGUgPSBlbmNvZGVyID8gZnVuY3Rpb24odmFsdWUpIHtcbiAgICByZXR1cm4gZW5jb2Rlci5jYWxsKHRoaXMsIHZhbHVlLCBlbmNvZGUpO1xuICB9IDogZW5jb2RlO1xuXG4gIHJldHVybiB0aGlzLl9wYWlycy5tYXAoZnVuY3Rpb24gZWFjaChwYWlyKSB7XG4gICAgcmV0dXJuIF9lbmNvZGUocGFpclswXSkgKyAnPScgKyBfZW5jb2RlKHBhaXJbMV0pO1xuICB9LCAnJykuam9pbignJicpO1xufTtcblxuZXhwb3J0IGRlZmF1bHQgQXhpb3NVUkxTZWFyY2hQYXJhbXM7XG4iLCIndXNlIHN0cmljdCc7XG5cbmltcG9ydCB1dGlscyBmcm9tICcuLi91dGlscy5qcyc7XG5pbXBvcnQgQXhpb3NVUkxTZWFyY2hQYXJhbXMgZnJvbSAnLi4vaGVscGVycy9BeGlvc1VSTFNlYXJjaFBhcmFtcy5qcyc7XG5cbi8qKlxuICogSXQgcmVwbGFjZXMgYWxsIGluc3RhbmNlcyBvZiB0aGUgY2hhcmFjdGVycyBgOmAsIGAkYCwgYCxgLCBgK2AsIGBbYCwgYW5kIGBdYCB3aXRoIHRoZWlyXG4gKiBVUkkgZW5jb2RlZCBjb3VudGVycGFydHNcbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gdmFsIFRoZSB2YWx1ZSB0byBiZSBlbmNvZGVkLlxuICpcbiAqIEByZXR1cm5zIHtzdHJpbmd9IFRoZSBlbmNvZGVkIHZhbHVlLlxuICovXG5mdW5jdGlvbiBlbmNvZGUodmFsKSB7XG4gIHJldHVybiBlbmNvZGVVUklDb21wb25lbnQodmFsKS5cbiAgICByZXBsYWNlKC8lM0EvZ2ksICc6JykuXG4gICAgcmVwbGFjZSgvJTI0L2csICckJykuXG4gICAgcmVwbGFjZSgvJTJDL2dpLCAnLCcpLlxuICAgIHJlcGxhY2UoLyUyMC9nLCAnKycpLlxuICAgIHJlcGxhY2UoLyU1Qi9naSwgJ1snKS5cbiAgICByZXBsYWNlKC8lNUQvZ2ksICddJyk7XG59XG5cbi8qKlxuICogQnVpbGQgYSBVUkwgYnkgYXBwZW5kaW5nIHBhcmFtcyB0byB0aGUgZW5kXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IHVybCBUaGUgYmFzZSBvZiB0aGUgdXJsIChlLmcuLCBodHRwOi8vd3d3Lmdvb2dsZS5jb20pXG4gKiBAcGFyYW0ge29iamVjdH0gW3BhcmFtc10gVGhlIHBhcmFtcyB0byBiZSBhcHBlbmRlZFxuICogQHBhcmFtIHs/b2JqZWN0fSBvcHRpb25zXG4gKlxuICogQHJldHVybnMge3N0cmluZ30gVGhlIGZvcm1hdHRlZCB1cmxcbiAqL1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gYnVpbGRVUkwodXJsLCBwYXJhbXMsIG9wdGlvbnMpIHtcbiAgLyplc2xpbnQgbm8tcGFyYW0tcmVhc3NpZ246MCovXG4gIGlmICghcGFyYW1zKSB7XG4gICAgcmV0dXJuIHVybDtcbiAgfVxuICBcbiAgY29uc3QgX2VuY29kZSA9IG9wdGlvbnMgJiYgb3B0aW9ucy5lbmNvZGUgfHwgZW5jb2RlO1xuXG4gIGNvbnN0IHNlcmlhbGl6ZUZuID0gb3B0aW9ucyAmJiBvcHRpb25zLnNlcmlhbGl6ZTtcblxuICBsZXQgc2VyaWFsaXplZFBhcmFtcztcblxuICBpZiAoc2VyaWFsaXplRm4pIHtcbiAgICBzZXJpYWxpemVkUGFyYW1zID0gc2VyaWFsaXplRm4ocGFyYW1zLCBvcHRpb25zKTtcbiAgfSBlbHNlIHtcbiAgICBzZXJpYWxpemVkUGFyYW1zID0gdXRpbHMuaXNVUkxTZWFyY2hQYXJhbXMocGFyYW1zKSA/XG4gICAgICBwYXJhbXMudG9TdHJpbmcoKSA6XG4gICAgICBuZXcgQXhpb3NVUkxTZWFyY2hQYXJhbXMocGFyYW1zLCBvcHRpb25zKS50b1N0cmluZyhfZW5jb2RlKTtcbiAgfVxuXG4gIGlmIChzZXJpYWxpemVkUGFyYW1zKSB7XG4gICAgY29uc3QgaGFzaG1hcmtJbmRleCA9IHVybC5pbmRleE9mKFwiI1wiKTtcblxuICAgIGlmIChoYXNobWFya0luZGV4ICE9PSAtMSkge1xuICAgICAgdXJsID0gdXJsLnNsaWNlKDAsIGhhc2htYXJrSW5kZXgpO1xuICAgIH1cbiAgICB1cmwgKz0gKHVybC5pbmRleE9mKCc/JykgPT09IC0xID8gJz8nIDogJyYnKSArIHNlcmlhbGl6ZWRQYXJhbXM7XG4gIH1cblxuICByZXR1cm4gdXJsO1xufVxuIiwiJ3VzZSBzdHJpY3QnO1xuXG5pbXBvcnQgdXRpbHMgZnJvbSAnLi8uLi91dGlscy5qcyc7XG5cbmNsYXNzIEludGVyY2VwdG9yTWFuYWdlciB7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHRoaXMuaGFuZGxlcnMgPSBbXTtcbiAgfVxuXG4gIC8qKlxuICAgKiBBZGQgYSBuZXcgaW50ZXJjZXB0b3IgdG8gdGhlIHN0YWNrXG4gICAqXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bGZpbGxlZCBUaGUgZnVuY3Rpb24gdG8gaGFuZGxlIGB0aGVuYCBmb3IgYSBgUHJvbWlzZWBcbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gcmVqZWN0ZWQgVGhlIGZ1bmN0aW9uIHRvIGhhbmRsZSBgcmVqZWN0YCBmb3IgYSBgUHJvbWlzZWBcbiAgICpcbiAgICogQHJldHVybiB7TnVtYmVyfSBBbiBJRCB1c2VkIHRvIHJlbW92ZSBpbnRlcmNlcHRvciBsYXRlclxuICAgKi9cbiAgdXNlKGZ1bGZpbGxlZCwgcmVqZWN0ZWQsIG9wdGlvbnMpIHtcbiAgICB0aGlzLmhhbmRsZXJzLnB1c2goe1xuICAgICAgZnVsZmlsbGVkLFxuICAgICAgcmVqZWN0ZWQsXG4gICAgICBzeW5jaHJvbm91czogb3B0aW9ucyA/IG9wdGlvbnMuc3luY2hyb25vdXMgOiBmYWxzZSxcbiAgICAgIHJ1bldoZW46IG9wdGlvbnMgPyBvcHRpb25zLnJ1bldoZW4gOiBudWxsXG4gICAgfSk7XG4gICAgcmV0dXJuIHRoaXMuaGFuZGxlcnMubGVuZ3RoIC0gMTtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZW1vdmUgYW4gaW50ZXJjZXB0b3IgZnJvbSB0aGUgc3RhY2tcbiAgICpcbiAgICogQHBhcmFtIHtOdW1iZXJ9IGlkIFRoZSBJRCB0aGF0IHdhcyByZXR1cm5lZCBieSBgdXNlYFxuICAgKlxuICAgKiBAcmV0dXJucyB7Qm9vbGVhbn0gYHRydWVgIGlmIHRoZSBpbnRlcmNlcHRvciB3YXMgcmVtb3ZlZCwgYGZhbHNlYCBvdGhlcndpc2VcbiAgICovXG4gIGVqZWN0KGlkKSB7XG4gICAgaWYgKHRoaXMuaGFuZGxlcnNbaWRdKSB7XG4gICAgICB0aGlzLmhhbmRsZXJzW2lkXSA9IG51bGw7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIENsZWFyIGFsbCBpbnRlcmNlcHRvcnMgZnJvbSB0aGUgc3RhY2tcbiAgICpcbiAgICogQHJldHVybnMge3ZvaWR9XG4gICAqL1xuICBjbGVhcigpIHtcbiAgICBpZiAodGhpcy5oYW5kbGVycykge1xuICAgICAgdGhpcy5oYW5kbGVycyA9IFtdO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBJdGVyYXRlIG92ZXIgYWxsIHRoZSByZWdpc3RlcmVkIGludGVyY2VwdG9yc1xuICAgKlxuICAgKiBUaGlzIG1ldGhvZCBpcyBwYXJ0aWN1bGFybHkgdXNlZnVsIGZvciBza2lwcGluZyBvdmVyIGFueVxuICAgKiBpbnRlcmNlcHRvcnMgdGhhdCBtYXkgaGF2ZSBiZWNvbWUgYG51bGxgIGNhbGxpbmcgYGVqZWN0YC5cbiAgICpcbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gZm4gVGhlIGZ1bmN0aW9uIHRvIGNhbGwgZm9yIGVhY2ggaW50ZXJjZXB0b3JcbiAgICpcbiAgICogQHJldHVybnMge3ZvaWR9XG4gICAqL1xuICBmb3JFYWNoKGZuKSB7XG4gICAgdXRpbHMuZm9yRWFjaCh0aGlzLmhhbmRsZXJzLCBmdW5jdGlvbiBmb3JFYWNoSGFuZGxlcihoKSB7XG4gICAgICBpZiAoaCAhPT0gbnVsbCkge1xuICAgICAgICBmbihoKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBJbnRlcmNlcHRvck1hbmFnZXI7XG4iLCIndXNlIHN0cmljdCc7XG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgc2lsZW50SlNPTlBhcnNpbmc6IHRydWUsXG4gIGZvcmNlZEpTT05QYXJzaW5nOiB0cnVlLFxuICBjbGFyaWZ5VGltZW91dEVycm9yOiBmYWxzZVxufTtcbiIsImltcG9ydCBVUkxTZWFyY2hQYXJhbXMgZnJvbSAnLi9jbGFzc2VzL1VSTFNlYXJjaFBhcmFtcy5qcydcbmltcG9ydCBGb3JtRGF0YSBmcm9tICcuL2NsYXNzZXMvRm9ybURhdGEuanMnXG5pbXBvcnQgQmxvYiBmcm9tICcuL2NsYXNzZXMvQmxvYi5qcydcblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgd2UncmUgcnVubmluZyBpbiBhIHN0YW5kYXJkIGJyb3dzZXIgZW52aXJvbm1lbnRcbiAqXG4gKiBUaGlzIGFsbG93cyBheGlvcyB0byBydW4gaW4gYSB3ZWIgd29ya2VyLCBhbmQgcmVhY3QtbmF0aXZlLlxuICogQm90aCBlbnZpcm9ubWVudHMgc3VwcG9ydCBYTUxIdHRwUmVxdWVzdCwgYnV0IG5vdCBmdWxseSBzdGFuZGFyZCBnbG9iYWxzLlxuICpcbiAqIHdlYiB3b3JrZXJzOlxuICogIHR5cGVvZiB3aW5kb3cgLT4gdW5kZWZpbmVkXG4gKiAgdHlwZW9mIGRvY3VtZW50IC0+IHVuZGVmaW5lZFxuICpcbiAqIHJlYWN0LW5hdGl2ZTpcbiAqICBuYXZpZ2F0b3IucHJvZHVjdCAtPiAnUmVhY3ROYXRpdmUnXG4gKiBuYXRpdmVzY3JpcHRcbiAqICBuYXZpZ2F0b3IucHJvZHVjdCAtPiAnTmF0aXZlU2NyaXB0JyBvciAnTlMnXG4gKlxuICogQHJldHVybnMge2Jvb2xlYW59XG4gKi9cbmNvbnN0IGlzU3RhbmRhcmRCcm93c2VyRW52ID0gKCgpID0+IHtcbiAgbGV0IHByb2R1Y3Q7XG4gIGlmICh0eXBlb2YgbmF2aWdhdG9yICE9PSAndW5kZWZpbmVkJyAmJiAoXG4gICAgKHByb2R1Y3QgPSBuYXZpZ2F0b3IucHJvZHVjdCkgPT09ICdSZWFjdE5hdGl2ZScgfHxcbiAgICBwcm9kdWN0ID09PSAnTmF0aXZlU2NyaXB0JyB8fFxuICAgIHByb2R1Y3QgPT09ICdOUycpXG4gICkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIHJldHVybiB0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyAmJiB0eXBlb2YgZG9jdW1lbnQgIT09ICd1bmRlZmluZWQnO1xufSkoKTtcblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgd2UncmUgcnVubmluZyBpbiBhIHN0YW5kYXJkIGJyb3dzZXIgd2ViV29ya2VyIGVudmlyb25tZW50XG4gKlxuICogQWx0aG91Z2ggdGhlIGBpc1N0YW5kYXJkQnJvd3NlckVudmAgbWV0aG9kIGluZGljYXRlcyB0aGF0XG4gKiBgYWxsb3dzIGF4aW9zIHRvIHJ1biBpbiBhIHdlYiB3b3JrZXJgLCB0aGUgV2ViV29ya2VyIHdpbGwgc3RpbGwgYmVcbiAqIGZpbHRlcmVkIG91dCBkdWUgdG8gaXRzIGp1ZGdtZW50IHN0YW5kYXJkXG4gKiBgdHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgJiYgdHlwZW9mIGRvY3VtZW50ICE9PSAndW5kZWZpbmVkJ2AuXG4gKiBUaGlzIGxlYWRzIHRvIGEgcHJvYmxlbSB3aGVuIGF4aW9zIHBvc3QgYEZvcm1EYXRhYCBpbiB3ZWJXb3JrZXJcbiAqL1xuIGNvbnN0IGlzU3RhbmRhcmRCcm93c2VyV2ViV29ya2VyRW52ID0gKCgpID0+IHtcbiAgcmV0dXJuIChcbiAgICB0eXBlb2YgV29ya2VyR2xvYmFsU2NvcGUgIT09ICd1bmRlZmluZWQnICYmXG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVuZGVmXG4gICAgc2VsZiBpbnN0YW5jZW9mIFdvcmtlckdsb2JhbFNjb3BlICYmXG4gICAgdHlwZW9mIHNlbGYuaW1wb3J0U2NyaXB0cyA9PT0gJ2Z1bmN0aW9uJ1xuICApO1xufSkoKTtcblxuXG5leHBvcnQgZGVmYXVsdCB7XG4gIGlzQnJvd3NlcjogdHJ1ZSxcbiAgY2xhc3Nlczoge1xuICAgIFVSTFNlYXJjaFBhcmFtcyxcbiAgICBGb3JtRGF0YSxcbiAgICBCbG9iXG4gIH0sXG4gIGlzU3RhbmRhcmRCcm93c2VyRW52LFxuICBpc1N0YW5kYXJkQnJvd3NlcldlYldvcmtlckVudixcbiAgcHJvdG9jb2xzOiBbJ2h0dHAnLCAnaHR0cHMnLCAnZmlsZScsICdibG9iJywgJ3VybCcsICdkYXRhJ11cbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbmltcG9ydCBBeGlvc1VSTFNlYXJjaFBhcmFtcyBmcm9tICcuLi8uLi8uLi9oZWxwZXJzL0F4aW9zVVJMU2VhcmNoUGFyYW1zLmpzJztcbmV4cG9ydCBkZWZhdWx0IHR5cGVvZiBVUkxTZWFyY2hQYXJhbXMgIT09ICd1bmRlZmluZWQnID8gVVJMU2VhcmNoUGFyYW1zIDogQXhpb3NVUkxTZWFyY2hQYXJhbXM7XG4iLCIndXNlIHN0cmljdCc7XG5cbmV4cG9ydCBkZWZhdWx0IHR5cGVvZiBGb3JtRGF0YSAhPT0gJ3VuZGVmaW5lZCcgPyBGb3JtRGF0YSA6IG51bGw7XG4iLCIndXNlIHN0cmljdCdcblxuZXhwb3J0IGRlZmF1bHQgdHlwZW9mIEJsb2IgIT09ICd1bmRlZmluZWQnID8gQmxvYiA6IG51bGxcbiIsIid1c2Ugc3RyaWN0JztcblxuaW1wb3J0IHV0aWxzIGZyb20gJy4uL3V0aWxzLmpzJztcblxuLyoqXG4gKiBJdCB0YWtlcyBhIHN0cmluZyBsaWtlIGBmb29beF1beV1bel1gIGFuZCByZXR1cm5zIGFuIGFycmF5IGxpa2UgYFsnZm9vJywgJ3gnLCAneScsICd6J11cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gbmFtZSAtIFRoZSBuYW1lIG9mIHRoZSBwcm9wZXJ0eSB0byBnZXQuXG4gKlxuICogQHJldHVybnMgQW4gYXJyYXkgb2Ygc3RyaW5ncy5cbiAqL1xuZnVuY3Rpb24gcGFyc2VQcm9wUGF0aChuYW1lKSB7XG4gIC8vIGZvb1t4XVt5XVt6XVxuICAvLyBmb28ueC55LnpcbiAgLy8gZm9vLXgteS16XG4gIC8vIGZvbyB4IHkgelxuICByZXR1cm4gdXRpbHMubWF0Y2hBbGwoL1xcdyt8XFxbKFxcdyopXS9nLCBuYW1lKS5tYXAobWF0Y2ggPT4ge1xuICAgIHJldHVybiBtYXRjaFswXSA9PT0gJ1tdJyA/ICcnIDogbWF0Y2hbMV0gfHwgbWF0Y2hbMF07XG4gIH0pO1xufVxuXG4vKipcbiAqIENvbnZlcnQgYW4gYXJyYXkgdG8gYW4gb2JqZWN0LlxuICpcbiAqIEBwYXJhbSB7QXJyYXk8YW55Pn0gYXJyIC0gVGhlIGFycmF5IHRvIGNvbnZlcnQgdG8gYW4gb2JqZWN0LlxuICpcbiAqIEByZXR1cm5zIEFuIG9iamVjdCB3aXRoIHRoZSBzYW1lIGtleXMgYW5kIHZhbHVlcyBhcyB0aGUgYXJyYXkuXG4gKi9cbmZ1bmN0aW9uIGFycmF5VG9PYmplY3QoYXJyKSB7XG4gIGNvbnN0IG9iaiA9IHt9O1xuICBjb25zdCBrZXlzID0gT2JqZWN0LmtleXMoYXJyKTtcbiAgbGV0IGk7XG4gIGNvbnN0IGxlbiA9IGtleXMubGVuZ3RoO1xuICBsZXQga2V5O1xuICBmb3IgKGkgPSAwOyBpIDwgbGVuOyBpKyspIHtcbiAgICBrZXkgPSBrZXlzW2ldO1xuICAgIG9ialtrZXldID0gYXJyW2tleV07XG4gIH1cbiAgcmV0dXJuIG9iajtcbn1cblxuLyoqXG4gKiBJdCB0YWtlcyBhIEZvcm1EYXRhIG9iamVjdCBhbmQgcmV0dXJucyBhIEphdmFTY3JpcHQgb2JqZWN0XG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IGZvcm1EYXRhIFRoZSBGb3JtRGF0YSBvYmplY3QgdG8gY29udmVydCB0byBKU09OLlxuICpcbiAqIEByZXR1cm5zIHtPYmplY3Q8c3RyaW5nLCBhbnk+IHwgbnVsbH0gVGhlIGNvbnZlcnRlZCBvYmplY3QuXG4gKi9cbmZ1bmN0aW9uIGZvcm1EYXRhVG9KU09OKGZvcm1EYXRhKSB7XG4gIGZ1bmN0aW9uIGJ1aWxkUGF0aChwYXRoLCB2YWx1ZSwgdGFyZ2V0LCBpbmRleCkge1xuICAgIGxldCBuYW1lID0gcGF0aFtpbmRleCsrXTtcbiAgICBjb25zdCBpc051bWVyaWNLZXkgPSBOdW1iZXIuaXNGaW5pdGUoK25hbWUpO1xuICAgIGNvbnN0IGlzTGFzdCA9IGluZGV4ID49IHBhdGgubGVuZ3RoO1xuICAgIG5hbWUgPSAhbmFtZSAmJiB1dGlscy5pc0FycmF5KHRhcmdldCkgPyB0YXJnZXQubGVuZ3RoIDogbmFtZTtcblxuICAgIGlmIChpc0xhc3QpIHtcbiAgICAgIGlmICh1dGlscy5oYXNPd25Qcm9wKHRhcmdldCwgbmFtZSkpIHtcbiAgICAgICAgdGFyZ2V0W25hbWVdID0gW3RhcmdldFtuYW1lXSwgdmFsdWVdO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGFyZ2V0W25hbWVdID0gdmFsdWU7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiAhaXNOdW1lcmljS2V5O1xuICAgIH1cblxuICAgIGlmICghdGFyZ2V0W25hbWVdIHx8ICF1dGlscy5pc09iamVjdCh0YXJnZXRbbmFtZV0pKSB7XG4gICAgICB0YXJnZXRbbmFtZV0gPSBbXTtcbiAgICB9XG5cbiAgICBjb25zdCByZXN1bHQgPSBidWlsZFBhdGgocGF0aCwgdmFsdWUsIHRhcmdldFtuYW1lXSwgaW5kZXgpO1xuXG4gICAgaWYgKHJlc3VsdCAmJiB1dGlscy5pc0FycmF5KHRhcmdldFtuYW1lXSkpIHtcbiAgICAgIHRhcmdldFtuYW1lXSA9IGFycmF5VG9PYmplY3QodGFyZ2V0W25hbWVdKTtcbiAgICB9XG5cbiAgICByZXR1cm4gIWlzTnVtZXJpY0tleTtcbiAgfVxuXG4gIGlmICh1dGlscy5pc0Zvcm1EYXRhKGZvcm1EYXRhKSAmJiB1dGlscy5pc0Z1bmN0aW9uKGZvcm1EYXRhLmVudHJpZXMpKSB7XG4gICAgY29uc3Qgb2JqID0ge307XG5cbiAgICB1dGlscy5mb3JFYWNoRW50cnkoZm9ybURhdGEsIChuYW1lLCB2YWx1ZSkgPT4ge1xuICAgICAgYnVpbGRQYXRoKHBhcnNlUHJvcFBhdGgobmFtZSksIHZhbHVlLCBvYmosIDApO1xuICAgIH0pO1xuXG4gICAgcmV0dXJuIG9iajtcbiAgfVxuXG4gIHJldHVybiBudWxsO1xufVxuXG5leHBvcnQgZGVmYXVsdCBmb3JtRGF0YVRvSlNPTjtcbiIsIid1c2Ugc3RyaWN0JztcblxuaW1wb3J0IHV0aWxzIGZyb20gJy4uL3V0aWxzLmpzJztcbmltcG9ydCBBeGlvc0Vycm9yIGZyb20gJy4uL2NvcmUvQXhpb3NFcnJvci5qcyc7XG5pbXBvcnQgdHJhbnNpdGlvbmFsRGVmYXVsdHMgZnJvbSAnLi90cmFuc2l0aW9uYWwuanMnO1xuaW1wb3J0IHRvRm9ybURhdGEgZnJvbSAnLi4vaGVscGVycy90b0Zvcm1EYXRhLmpzJztcbmltcG9ydCB0b1VSTEVuY29kZWRGb3JtIGZyb20gJy4uL2hlbHBlcnMvdG9VUkxFbmNvZGVkRm9ybS5qcyc7XG5pbXBvcnQgcGxhdGZvcm0gZnJvbSAnLi4vcGxhdGZvcm0vaW5kZXguanMnO1xuaW1wb3J0IGZvcm1EYXRhVG9KU09OIGZyb20gJy4uL2hlbHBlcnMvZm9ybURhdGFUb0pTT04uanMnO1xuXG5jb25zdCBERUZBVUxUX0NPTlRFTlRfVFlQRSA9IHtcbiAgJ0NvbnRlbnQtVHlwZSc6IHVuZGVmaW5lZFxufTtcblxuLyoqXG4gKiBJdCB0YWtlcyBhIHN0cmluZywgdHJpZXMgdG8gcGFyc2UgaXQsIGFuZCBpZiBpdCBmYWlscywgaXQgcmV0dXJucyB0aGUgc3RyaW5naWZpZWQgdmVyc2lvblxuICogb2YgdGhlIGlucHV0XG4gKlxuICogQHBhcmFtIHthbnl9IHJhd1ZhbHVlIC0gVGhlIHZhbHVlIHRvIGJlIHN0cmluZ2lmaWVkLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gcGFyc2VyIC0gQSBmdW5jdGlvbiB0aGF0IHBhcnNlcyBhIHN0cmluZyBpbnRvIGEgSmF2YVNjcmlwdCBvYmplY3QuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBlbmNvZGVyIC0gQSBmdW5jdGlvbiB0aGF0IHRha2VzIGEgdmFsdWUgYW5kIHJldHVybnMgYSBzdHJpbmcuXG4gKlxuICogQHJldHVybnMge3N0cmluZ30gQSBzdHJpbmdpZmllZCB2ZXJzaW9uIG9mIHRoZSByYXdWYWx1ZS5cbiAqL1xuZnVuY3Rpb24gc3RyaW5naWZ5U2FmZWx5KHJhd1ZhbHVlLCBwYXJzZXIsIGVuY29kZXIpIHtcbiAgaWYgKHV0aWxzLmlzU3RyaW5nKHJhd1ZhbHVlKSkge1xuICAgIHRyeSB7XG4gICAgICAocGFyc2VyIHx8IEpTT04ucGFyc2UpKHJhd1ZhbHVlKTtcbiAgICAgIHJldHVybiB1dGlscy50cmltKHJhd1ZhbHVlKTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICBpZiAoZS5uYW1lICE9PSAnU3ludGF4RXJyb3InKSB7XG4gICAgICAgIHRocm93IGU7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIChlbmNvZGVyIHx8IEpTT04uc3RyaW5naWZ5KShyYXdWYWx1ZSk7XG59XG5cbmNvbnN0IGRlZmF1bHRzID0ge1xuXG4gIHRyYW5zaXRpb25hbDogdHJhbnNpdGlvbmFsRGVmYXVsdHMsXG5cbiAgYWRhcHRlcjogWyd4aHInLCAnaHR0cCddLFxuXG4gIHRyYW5zZm9ybVJlcXVlc3Q6IFtmdW5jdGlvbiB0cmFuc2Zvcm1SZXF1ZXN0KGRhdGEsIGhlYWRlcnMpIHtcbiAgICBjb25zdCBjb250ZW50VHlwZSA9IGhlYWRlcnMuZ2V0Q29udGVudFR5cGUoKSB8fCAnJztcbiAgICBjb25zdCBoYXNKU09OQ29udGVudFR5cGUgPSBjb250ZW50VHlwZS5pbmRleE9mKCdhcHBsaWNhdGlvbi9qc29uJykgPiAtMTtcbiAgICBjb25zdCBpc09iamVjdFBheWxvYWQgPSB1dGlscy5pc09iamVjdChkYXRhKTtcblxuICAgIGlmIChpc09iamVjdFBheWxvYWQgJiYgdXRpbHMuaXNIVE1MRm9ybShkYXRhKSkge1xuICAgICAgZGF0YSA9IG5ldyBGb3JtRGF0YShkYXRhKTtcbiAgICB9XG5cbiAgICBjb25zdCBpc0Zvcm1EYXRhID0gdXRpbHMuaXNGb3JtRGF0YShkYXRhKTtcblxuICAgIGlmIChpc0Zvcm1EYXRhKSB7XG4gICAgICBpZiAoIWhhc0pTT05Db250ZW50VHlwZSkge1xuICAgICAgICByZXR1cm4gZGF0YTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBoYXNKU09OQ29udGVudFR5cGUgPyBKU09OLnN0cmluZ2lmeShmb3JtRGF0YVRvSlNPTihkYXRhKSkgOiBkYXRhO1xuICAgIH1cblxuICAgIGlmICh1dGlscy5pc0FycmF5QnVmZmVyKGRhdGEpIHx8XG4gICAgICB1dGlscy5pc0J1ZmZlcihkYXRhKSB8fFxuICAgICAgdXRpbHMuaXNTdHJlYW0oZGF0YSkgfHxcbiAgICAgIHV0aWxzLmlzRmlsZShkYXRhKSB8fFxuICAgICAgdXRpbHMuaXNCbG9iKGRhdGEpXG4gICAgKSB7XG4gICAgICByZXR1cm4gZGF0YTtcbiAgICB9XG4gICAgaWYgKHV0aWxzLmlzQXJyYXlCdWZmZXJWaWV3KGRhdGEpKSB7XG4gICAgICByZXR1cm4gZGF0YS5idWZmZXI7XG4gICAgfVxuICAgIGlmICh1dGlscy5pc1VSTFNlYXJjaFBhcmFtcyhkYXRhKSkge1xuICAgICAgaGVhZGVycy5zZXRDb250ZW50VHlwZSgnYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkO2NoYXJzZXQ9dXRmLTgnLCBmYWxzZSk7XG4gICAgICByZXR1cm4gZGF0YS50b1N0cmluZygpO1xuICAgIH1cblxuICAgIGxldCBpc0ZpbGVMaXN0O1xuXG4gICAgaWYgKGlzT2JqZWN0UGF5bG9hZCkge1xuICAgICAgaWYgKGNvbnRlbnRUeXBlLmluZGV4T2YoJ2FwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZCcpID4gLTEpIHtcbiAgICAgICAgcmV0dXJuIHRvVVJMRW5jb2RlZEZvcm0oZGF0YSwgdGhpcy5mb3JtU2VyaWFsaXplcikudG9TdHJpbmcoKTtcbiAgICAgIH1cblxuICAgICAgaWYgKChpc0ZpbGVMaXN0ID0gdXRpbHMuaXNGaWxlTGlzdChkYXRhKSkgfHwgY29udGVudFR5cGUuaW5kZXhPZignbXVsdGlwYXJ0L2Zvcm0tZGF0YScpID4gLTEpIHtcbiAgICAgICAgY29uc3QgX0Zvcm1EYXRhID0gdGhpcy5lbnYgJiYgdGhpcy5lbnYuRm9ybURhdGE7XG5cbiAgICAgICAgcmV0dXJuIHRvRm9ybURhdGEoXG4gICAgICAgICAgaXNGaWxlTGlzdCA/IHsnZmlsZXNbXSc6IGRhdGF9IDogZGF0YSxcbiAgICAgICAgICBfRm9ybURhdGEgJiYgbmV3IF9Gb3JtRGF0YSgpLFxuICAgICAgICAgIHRoaXMuZm9ybVNlcmlhbGl6ZXJcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoaXNPYmplY3RQYXlsb2FkIHx8IGhhc0pTT05Db250ZW50VHlwZSApIHtcbiAgICAgIGhlYWRlcnMuc2V0Q29udGVudFR5cGUoJ2FwcGxpY2F0aW9uL2pzb24nLCBmYWxzZSk7XG4gICAgICByZXR1cm4gc3RyaW5naWZ5U2FmZWx5KGRhdGEpO1xuICAgIH1cblxuICAgIHJldHVybiBkYXRhO1xuICB9XSxcblxuICB0cmFuc2Zvcm1SZXNwb25zZTogW2Z1bmN0aW9uIHRyYW5zZm9ybVJlc3BvbnNlKGRhdGEpIHtcbiAgICBjb25zdCB0cmFuc2l0aW9uYWwgPSB0aGlzLnRyYW5zaXRpb25hbCB8fCBkZWZhdWx0cy50cmFuc2l0aW9uYWw7XG4gICAgY29uc3QgZm9yY2VkSlNPTlBhcnNpbmcgPSB0cmFuc2l0aW9uYWwgJiYgdHJhbnNpdGlvbmFsLmZvcmNlZEpTT05QYXJzaW5nO1xuICAgIGNvbnN0IEpTT05SZXF1ZXN0ZWQgPSB0aGlzLnJlc3BvbnNlVHlwZSA9PT0gJ2pzb24nO1xuXG4gICAgaWYgKGRhdGEgJiYgdXRpbHMuaXNTdHJpbmcoZGF0YSkgJiYgKChmb3JjZWRKU09OUGFyc2luZyAmJiAhdGhpcy5yZXNwb25zZVR5cGUpIHx8IEpTT05SZXF1ZXN0ZWQpKSB7XG4gICAgICBjb25zdCBzaWxlbnRKU09OUGFyc2luZyA9IHRyYW5zaXRpb25hbCAmJiB0cmFuc2l0aW9uYWwuc2lsZW50SlNPTlBhcnNpbmc7XG4gICAgICBjb25zdCBzdHJpY3RKU09OUGFyc2luZyA9ICFzaWxlbnRKU09OUGFyc2luZyAmJiBKU09OUmVxdWVzdGVkO1xuXG4gICAgICB0cnkge1xuICAgICAgICByZXR1cm4gSlNPTi5wYXJzZShkYXRhKTtcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgaWYgKHN0cmljdEpTT05QYXJzaW5nKSB7XG4gICAgICAgICAgaWYgKGUubmFtZSA9PT0gJ1N5bnRheEVycm9yJykge1xuICAgICAgICAgICAgdGhyb3cgQXhpb3NFcnJvci5mcm9tKGUsIEF4aW9zRXJyb3IuRVJSX0JBRF9SRVNQT05TRSwgdGhpcywgbnVsbCwgdGhpcy5yZXNwb25zZSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHRocm93IGU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gZGF0YTtcbiAgfV0sXG5cbiAgLyoqXG4gICAqIEEgdGltZW91dCBpbiBtaWxsaXNlY29uZHMgdG8gYWJvcnQgYSByZXF1ZXN0LiBJZiBzZXQgdG8gMCAoZGVmYXVsdCkgYVxuICAgKiB0aW1lb3V0IGlzIG5vdCBjcmVhdGVkLlxuICAgKi9cbiAgdGltZW91dDogMCxcblxuICB4c3JmQ29va2llTmFtZTogJ1hTUkYtVE9LRU4nLFxuICB4c3JmSGVhZGVyTmFtZTogJ1gtWFNSRi1UT0tFTicsXG5cbiAgbWF4Q29udGVudExlbmd0aDogLTEsXG4gIG1heEJvZHlMZW5ndGg6IC0xLFxuXG4gIGVudjoge1xuICAgIEZvcm1EYXRhOiBwbGF0Zm9ybS5jbGFzc2VzLkZvcm1EYXRhLFxuICAgIEJsb2I6IHBsYXRmb3JtLmNsYXNzZXMuQmxvYlxuICB9LFxuXG4gIHZhbGlkYXRlU3RhdHVzOiBmdW5jdGlvbiB2YWxpZGF0ZVN0YXR1cyhzdGF0dXMpIHtcbiAgICByZXR1cm4gc3RhdHVzID49IDIwMCAmJiBzdGF0dXMgPCAzMDA7XG4gIH0sXG5cbiAgaGVhZGVyczoge1xuICAgIGNvbW1vbjoge1xuICAgICAgJ0FjY2VwdCc6ICdhcHBsaWNhdGlvbi9qc29uLCB0ZXh0L3BsYWluLCAqLyonXG4gICAgfVxuICB9XG59O1xuXG51dGlscy5mb3JFYWNoKFsnZGVsZXRlJywgJ2dldCcsICdoZWFkJ10sIGZ1bmN0aW9uIGZvckVhY2hNZXRob2ROb0RhdGEobWV0aG9kKSB7XG4gIGRlZmF1bHRzLmhlYWRlcnNbbWV0aG9kXSA9IHt9O1xufSk7XG5cbnV0aWxzLmZvckVhY2goWydwb3N0JywgJ3B1dCcsICdwYXRjaCddLCBmdW5jdGlvbiBmb3JFYWNoTWV0aG9kV2l0aERhdGEobWV0aG9kKSB7XG4gIGRlZmF1bHRzLmhlYWRlcnNbbWV0aG9kXSA9IHV0aWxzLm1lcmdlKERFRkFVTFRfQ09OVEVOVF9UWVBFKTtcbn0pO1xuXG5leHBvcnQgZGVmYXVsdCBkZWZhdWx0cztcbiIsIid1c2Ugc3RyaWN0JztcblxuaW1wb3J0IHV0aWxzIGZyb20gJy4uL3V0aWxzLmpzJztcbmltcG9ydCB0b0Zvcm1EYXRhIGZyb20gJy4vdG9Gb3JtRGF0YS5qcyc7XG5pbXBvcnQgcGxhdGZvcm0gZnJvbSAnLi4vcGxhdGZvcm0vaW5kZXguanMnO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiB0b1VSTEVuY29kZWRGb3JtKGRhdGEsIG9wdGlvbnMpIHtcbiAgcmV0dXJuIHRvRm9ybURhdGEoZGF0YSwgbmV3IHBsYXRmb3JtLmNsYXNzZXMuVVJMU2VhcmNoUGFyYW1zKCksIE9iamVjdC5hc3NpZ24oe1xuICAgIHZpc2l0b3I6IGZ1bmN0aW9uKHZhbHVlLCBrZXksIHBhdGgsIGhlbHBlcnMpIHtcbiAgICAgIGlmIChwbGF0Zm9ybS5pc05vZGUgJiYgdXRpbHMuaXNCdWZmZXIodmFsdWUpKSB7XG4gICAgICAgIHRoaXMuYXBwZW5kKGtleSwgdmFsdWUudG9TdHJpbmcoJ2Jhc2U2NCcpKTtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gaGVscGVycy5kZWZhdWx0VmlzaXRvci5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgIH1cbiAgfSwgb3B0aW9ucykpO1xufVxuIiwiJ3VzZSBzdHJpY3QnO1xuXG5pbXBvcnQgdXRpbHMgZnJvbSAnLi8uLi91dGlscy5qcyc7XG5cbi8vIFJhd0F4aW9zSGVhZGVycyB3aG9zZSBkdXBsaWNhdGVzIGFyZSBpZ25vcmVkIGJ5IG5vZGVcbi8vIGMuZi4gaHR0cHM6Ly9ub2RlanMub3JnL2FwaS9odHRwLmh0bWwjaHR0cF9tZXNzYWdlX2hlYWRlcnNcbmNvbnN0IGlnbm9yZUR1cGxpY2F0ZU9mID0gdXRpbHMudG9PYmplY3RTZXQoW1xuICAnYWdlJywgJ2F1dGhvcml6YXRpb24nLCAnY29udGVudC1sZW5ndGgnLCAnY29udGVudC10eXBlJywgJ2V0YWcnLFxuICAnZXhwaXJlcycsICdmcm9tJywgJ2hvc3QnLCAnaWYtbW9kaWZpZWQtc2luY2UnLCAnaWYtdW5tb2RpZmllZC1zaW5jZScsXG4gICdsYXN0LW1vZGlmaWVkJywgJ2xvY2F0aW9uJywgJ21heC1mb3J3YXJkcycsICdwcm94eS1hdXRob3JpemF0aW9uJyxcbiAgJ3JlZmVyZXInLCAncmV0cnktYWZ0ZXInLCAndXNlci1hZ2VudCdcbl0pO1xuXG4vKipcbiAqIFBhcnNlIGhlYWRlcnMgaW50byBhbiBvYmplY3RcbiAqXG4gKiBgYGBcbiAqIERhdGU6IFdlZCwgMjcgQXVnIDIwMTQgMDg6NTg6NDkgR01UXG4gKiBDb250ZW50LVR5cGU6IGFwcGxpY2F0aW9uL2pzb25cbiAqIENvbm5lY3Rpb246IGtlZXAtYWxpdmVcbiAqIFRyYW5zZmVyLUVuY29kaW5nOiBjaHVua2VkXG4gKiBgYGBcbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gcmF3SGVhZGVycyBIZWFkZXJzIG5lZWRpbmcgdG8gYmUgcGFyc2VkXG4gKlxuICogQHJldHVybnMge09iamVjdH0gSGVhZGVycyBwYXJzZWQgaW50byBhbiBvYmplY3RcbiAqL1xuZXhwb3J0IGRlZmF1bHQgcmF3SGVhZGVycyA9PiB7XG4gIGNvbnN0IHBhcnNlZCA9IHt9O1xuICBsZXQga2V5O1xuICBsZXQgdmFsO1xuICBsZXQgaTtcblxuICByYXdIZWFkZXJzICYmIHJhd0hlYWRlcnMuc3BsaXQoJ1xcbicpLmZvckVhY2goZnVuY3Rpb24gcGFyc2VyKGxpbmUpIHtcbiAgICBpID0gbGluZS5pbmRleE9mKCc6Jyk7XG4gICAga2V5ID0gbGluZS5zdWJzdHJpbmcoMCwgaSkudHJpbSgpLnRvTG93ZXJDYXNlKCk7XG4gICAgdmFsID0gbGluZS5zdWJzdHJpbmcoaSArIDEpLnRyaW0oKTtcblxuICAgIGlmICgha2V5IHx8IChwYXJzZWRba2V5XSAmJiBpZ25vcmVEdXBsaWNhdGVPZltrZXldKSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlmIChrZXkgPT09ICdzZXQtY29va2llJykge1xuICAgICAgaWYgKHBhcnNlZFtrZXldKSB7XG4gICAgICAgIHBhcnNlZFtrZXldLnB1c2godmFsKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHBhcnNlZFtrZXldID0gW3ZhbF07XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHBhcnNlZFtrZXldID0gcGFyc2VkW2tleV0gPyBwYXJzZWRba2V5XSArICcsICcgKyB2YWwgOiB2YWw7XG4gICAgfVxuICB9KTtcblxuICByZXR1cm4gcGFyc2VkO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxuaW1wb3J0IHV0aWxzIGZyb20gJy4uL3V0aWxzLmpzJztcbmltcG9ydCBwYXJzZUhlYWRlcnMgZnJvbSAnLi4vaGVscGVycy9wYXJzZUhlYWRlcnMuanMnO1xuXG5jb25zdCAkaW50ZXJuYWxzID0gU3ltYm9sKCdpbnRlcm5hbHMnKTtcblxuZnVuY3Rpb24gbm9ybWFsaXplSGVhZGVyKGhlYWRlcikge1xuICByZXR1cm4gaGVhZGVyICYmIFN0cmluZyhoZWFkZXIpLnRyaW0oKS50b0xvd2VyQ2FzZSgpO1xufVxuXG5mdW5jdGlvbiBub3JtYWxpemVWYWx1ZSh2YWx1ZSkge1xuICBpZiAodmFsdWUgPT09IGZhbHNlIHx8IHZhbHVlID09IG51bGwpIHtcbiAgICByZXR1cm4gdmFsdWU7XG4gIH1cblxuICByZXR1cm4gdXRpbHMuaXNBcnJheSh2YWx1ZSkgPyB2YWx1ZS5tYXAobm9ybWFsaXplVmFsdWUpIDogU3RyaW5nKHZhbHVlKTtcbn1cblxuZnVuY3Rpb24gcGFyc2VUb2tlbnMoc3RyKSB7XG4gIGNvbnN0IHRva2VucyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gIGNvbnN0IHRva2Vuc1JFID0gLyhbXlxccyw7PV0rKVxccyooPzo9XFxzKihbXiw7XSspKT8vZztcbiAgbGV0IG1hdGNoO1xuXG4gIHdoaWxlICgobWF0Y2ggPSB0b2tlbnNSRS5leGVjKHN0cikpKSB7XG4gICAgdG9rZW5zW21hdGNoWzFdXSA9IG1hdGNoWzJdO1xuICB9XG5cbiAgcmV0dXJuIHRva2Vucztcbn1cblxuY29uc3QgaXNWYWxpZEhlYWRlck5hbWUgPSAoc3RyKSA9PiAvXlstX2EtekEtWjAtOV5gfH4sISMkJSYnKisuXSskLy50ZXN0KHN0ci50cmltKCkpO1xuXG5mdW5jdGlvbiBtYXRjaEhlYWRlclZhbHVlKGNvbnRleHQsIHZhbHVlLCBoZWFkZXIsIGZpbHRlciwgaXNIZWFkZXJOYW1lRmlsdGVyKSB7XG4gIGlmICh1dGlscy5pc0Z1bmN0aW9uKGZpbHRlcikpIHtcbiAgICByZXR1cm4gZmlsdGVyLmNhbGwodGhpcywgdmFsdWUsIGhlYWRlcik7XG4gIH1cblxuICBpZiAoaXNIZWFkZXJOYW1lRmlsdGVyKSB7XG4gICAgdmFsdWUgPSBoZWFkZXI7XG4gIH1cblxuICBpZiAoIXV0aWxzLmlzU3RyaW5nKHZhbHVlKSkgcmV0dXJuO1xuXG4gIGlmICh1dGlscy5pc1N0cmluZyhmaWx0ZXIpKSB7XG4gICAgcmV0dXJuIHZhbHVlLmluZGV4T2YoZmlsdGVyKSAhPT0gLTE7XG4gIH1cblxuICBpZiAodXRpbHMuaXNSZWdFeHAoZmlsdGVyKSkge1xuICAgIHJldHVybiBmaWx0ZXIudGVzdCh2YWx1ZSk7XG4gIH1cbn1cblxuZnVuY3Rpb24gZm9ybWF0SGVhZGVyKGhlYWRlcikge1xuICByZXR1cm4gaGVhZGVyLnRyaW0oKVxuICAgIC50b0xvd2VyQ2FzZSgpLnJlcGxhY2UoLyhbYS16XFxkXSkoXFx3KikvZywgKHcsIGNoYXIsIHN0cikgPT4ge1xuICAgICAgcmV0dXJuIGNoYXIudG9VcHBlckNhc2UoKSArIHN0cjtcbiAgICB9KTtcbn1cblxuZnVuY3Rpb24gYnVpbGRBY2Nlc3NvcnMob2JqLCBoZWFkZXIpIHtcbiAgY29uc3QgYWNjZXNzb3JOYW1lID0gdXRpbHMudG9DYW1lbENhc2UoJyAnICsgaGVhZGVyKTtcblxuICBbJ2dldCcsICdzZXQnLCAnaGFzJ10uZm9yRWFjaChtZXRob2ROYW1lID0+IHtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkob2JqLCBtZXRob2ROYW1lICsgYWNjZXNzb3JOYW1lLCB7XG4gICAgICB2YWx1ZTogZnVuY3Rpb24oYXJnMSwgYXJnMiwgYXJnMykge1xuICAgICAgICByZXR1cm4gdGhpc1ttZXRob2ROYW1lXS5jYWxsKHRoaXMsIGhlYWRlciwgYXJnMSwgYXJnMiwgYXJnMyk7XG4gICAgICB9LFxuICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgfSk7XG4gIH0pO1xufVxuXG5jbGFzcyBBeGlvc0hlYWRlcnMge1xuICBjb25zdHJ1Y3RvcihoZWFkZXJzKSB7XG4gICAgaGVhZGVycyAmJiB0aGlzLnNldChoZWFkZXJzKTtcbiAgfVxuXG4gIHNldChoZWFkZXIsIHZhbHVlT3JSZXdyaXRlLCByZXdyaXRlKSB7XG4gICAgY29uc3Qgc2VsZiA9IHRoaXM7XG5cbiAgICBmdW5jdGlvbiBzZXRIZWFkZXIoX3ZhbHVlLCBfaGVhZGVyLCBfcmV3cml0ZSkge1xuICAgICAgY29uc3QgbEhlYWRlciA9IG5vcm1hbGl6ZUhlYWRlcihfaGVhZGVyKTtcblxuICAgICAgaWYgKCFsSGVhZGVyKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignaGVhZGVyIG5hbWUgbXVzdCBiZSBhIG5vbi1lbXB0eSBzdHJpbmcnKTtcbiAgICAgIH1cblxuICAgICAgY29uc3Qga2V5ID0gdXRpbHMuZmluZEtleShzZWxmLCBsSGVhZGVyKTtcblxuICAgICAgaWYoIWtleSB8fCBzZWxmW2tleV0gPT09IHVuZGVmaW5lZCB8fCBfcmV3cml0ZSA9PT0gdHJ1ZSB8fCAoX3Jld3JpdGUgPT09IHVuZGVmaW5lZCAmJiBzZWxmW2tleV0gIT09IGZhbHNlKSkge1xuICAgICAgICBzZWxmW2tleSB8fCBfaGVhZGVyXSA9IG5vcm1hbGl6ZVZhbHVlKF92YWx1ZSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgY29uc3Qgc2V0SGVhZGVycyA9IChoZWFkZXJzLCBfcmV3cml0ZSkgPT5cbiAgICAgIHV0aWxzLmZvckVhY2goaGVhZGVycywgKF92YWx1ZSwgX2hlYWRlcikgPT4gc2V0SGVhZGVyKF92YWx1ZSwgX2hlYWRlciwgX3Jld3JpdGUpKTtcblxuICAgIGlmICh1dGlscy5pc1BsYWluT2JqZWN0KGhlYWRlcikgfHwgaGVhZGVyIGluc3RhbmNlb2YgdGhpcy5jb25zdHJ1Y3Rvcikge1xuICAgICAgc2V0SGVhZGVycyhoZWFkZXIsIHZhbHVlT3JSZXdyaXRlKVxuICAgIH0gZWxzZSBpZih1dGlscy5pc1N0cmluZyhoZWFkZXIpICYmIChoZWFkZXIgPSBoZWFkZXIudHJpbSgpKSAmJiAhaXNWYWxpZEhlYWRlck5hbWUoaGVhZGVyKSkge1xuICAgICAgc2V0SGVhZGVycyhwYXJzZUhlYWRlcnMoaGVhZGVyKSwgdmFsdWVPclJld3JpdGUpO1xuICAgIH0gZWxzZSB7XG4gICAgICBoZWFkZXIgIT0gbnVsbCAmJiBzZXRIZWFkZXIodmFsdWVPclJld3JpdGUsIGhlYWRlciwgcmV3cml0ZSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICBnZXQoaGVhZGVyLCBwYXJzZXIpIHtcbiAgICBoZWFkZXIgPSBub3JtYWxpemVIZWFkZXIoaGVhZGVyKTtcblxuICAgIGlmIChoZWFkZXIpIHtcbiAgICAgIGNvbnN0IGtleSA9IHV0aWxzLmZpbmRLZXkodGhpcywgaGVhZGVyKTtcblxuICAgICAgaWYgKGtleSkge1xuICAgICAgICBjb25zdCB2YWx1ZSA9IHRoaXNba2V5XTtcblxuICAgICAgICBpZiAoIXBhcnNlcikge1xuICAgICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChwYXJzZXIgPT09IHRydWUpIHtcbiAgICAgICAgICByZXR1cm4gcGFyc2VUb2tlbnModmFsdWUpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHV0aWxzLmlzRnVuY3Rpb24ocGFyc2VyKSkge1xuICAgICAgICAgIHJldHVybiBwYXJzZXIuY2FsbCh0aGlzLCB2YWx1ZSwga2V5KTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh1dGlscy5pc1JlZ0V4cChwYXJzZXIpKSB7XG4gICAgICAgICAgcmV0dXJuIHBhcnNlci5leGVjKHZhbHVlKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ3BhcnNlciBtdXN0IGJlIGJvb2xlYW58cmVnZXhwfGZ1bmN0aW9uJyk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgaGFzKGhlYWRlciwgbWF0Y2hlcikge1xuICAgIGhlYWRlciA9IG5vcm1hbGl6ZUhlYWRlcihoZWFkZXIpO1xuXG4gICAgaWYgKGhlYWRlcikge1xuICAgICAgY29uc3Qga2V5ID0gdXRpbHMuZmluZEtleSh0aGlzLCBoZWFkZXIpO1xuXG4gICAgICByZXR1cm4gISEoa2V5ICYmIHRoaXNba2V5XSAhPT0gdW5kZWZpbmVkICYmICghbWF0Y2hlciB8fCBtYXRjaEhlYWRlclZhbHVlKHRoaXMsIHRoaXNba2V5XSwga2V5LCBtYXRjaGVyKSkpO1xuICAgIH1cblxuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIGRlbGV0ZShoZWFkZXIsIG1hdGNoZXIpIHtcbiAgICBjb25zdCBzZWxmID0gdGhpcztcbiAgICBsZXQgZGVsZXRlZCA9IGZhbHNlO1xuXG4gICAgZnVuY3Rpb24gZGVsZXRlSGVhZGVyKF9oZWFkZXIpIHtcbiAgICAgIF9oZWFkZXIgPSBub3JtYWxpemVIZWFkZXIoX2hlYWRlcik7XG5cbiAgICAgIGlmIChfaGVhZGVyKSB7XG4gICAgICAgIGNvbnN0IGtleSA9IHV0aWxzLmZpbmRLZXkoc2VsZiwgX2hlYWRlcik7XG5cbiAgICAgICAgaWYgKGtleSAmJiAoIW1hdGNoZXIgfHwgbWF0Y2hIZWFkZXJWYWx1ZShzZWxmLCBzZWxmW2tleV0sIGtleSwgbWF0Y2hlcikpKSB7XG4gICAgICAgICAgZGVsZXRlIHNlbGZba2V5XTtcblxuICAgICAgICAgIGRlbGV0ZWQgPSB0cnVlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKHV0aWxzLmlzQXJyYXkoaGVhZGVyKSkge1xuICAgICAgaGVhZGVyLmZvckVhY2goZGVsZXRlSGVhZGVyKTtcbiAgICB9IGVsc2Uge1xuICAgICAgZGVsZXRlSGVhZGVyKGhlYWRlcik7XG4gICAgfVxuXG4gICAgcmV0dXJuIGRlbGV0ZWQ7XG4gIH1cblxuICBjbGVhcihtYXRjaGVyKSB7XG4gICAgY29uc3Qga2V5cyA9IE9iamVjdC5rZXlzKHRoaXMpO1xuICAgIGxldCBpID0ga2V5cy5sZW5ndGg7XG4gICAgbGV0IGRlbGV0ZWQgPSBmYWxzZTtcblxuICAgIHdoaWxlIChpLS0pIHtcbiAgICAgIGNvbnN0IGtleSA9IGtleXNbaV07XG4gICAgICBpZighbWF0Y2hlciB8fCBtYXRjaEhlYWRlclZhbHVlKHRoaXMsIHRoaXNba2V5XSwga2V5LCBtYXRjaGVyLCB0cnVlKSkge1xuICAgICAgICBkZWxldGUgdGhpc1trZXldO1xuICAgICAgICBkZWxldGVkID0gdHJ1ZTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gZGVsZXRlZDtcbiAgfVxuXG4gIG5vcm1hbGl6ZShmb3JtYXQpIHtcbiAgICBjb25zdCBzZWxmID0gdGhpcztcbiAgICBjb25zdCBoZWFkZXJzID0ge307XG5cbiAgICB1dGlscy5mb3JFYWNoKHRoaXMsICh2YWx1ZSwgaGVhZGVyKSA9PiB7XG4gICAgICBjb25zdCBrZXkgPSB1dGlscy5maW5kS2V5KGhlYWRlcnMsIGhlYWRlcik7XG5cbiAgICAgIGlmIChrZXkpIHtcbiAgICAgICAgc2VsZltrZXldID0gbm9ybWFsaXplVmFsdWUodmFsdWUpO1xuICAgICAgICBkZWxldGUgc2VsZltoZWFkZXJdO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGNvbnN0IG5vcm1hbGl6ZWQgPSBmb3JtYXQgPyBmb3JtYXRIZWFkZXIoaGVhZGVyKSA6IFN0cmluZyhoZWFkZXIpLnRyaW0oKTtcblxuICAgICAgaWYgKG5vcm1hbGl6ZWQgIT09IGhlYWRlcikge1xuICAgICAgICBkZWxldGUgc2VsZltoZWFkZXJdO1xuICAgICAgfVxuXG4gICAgICBzZWxmW25vcm1hbGl6ZWRdID0gbm9ybWFsaXplVmFsdWUodmFsdWUpO1xuXG4gICAgICBoZWFkZXJzW25vcm1hbGl6ZWRdID0gdHJ1ZTtcbiAgICB9KTtcblxuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgY29uY2F0KC4uLnRhcmdldHMpIHtcbiAgICByZXR1cm4gdGhpcy5jb25zdHJ1Y3Rvci5jb25jYXQodGhpcywgLi4udGFyZ2V0cyk7XG4gIH1cblxuICB0b0pTT04oYXNTdHJpbmdzKSB7XG4gICAgY29uc3Qgb2JqID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcblxuICAgIHV0aWxzLmZvckVhY2godGhpcywgKHZhbHVlLCBoZWFkZXIpID0+IHtcbiAgICAgIHZhbHVlICE9IG51bGwgJiYgdmFsdWUgIT09IGZhbHNlICYmIChvYmpbaGVhZGVyXSA9IGFzU3RyaW5ncyAmJiB1dGlscy5pc0FycmF5KHZhbHVlKSA/IHZhbHVlLmpvaW4oJywgJykgOiB2YWx1ZSk7XG4gICAgfSk7XG5cbiAgICByZXR1cm4gb2JqO1xuICB9XG5cbiAgW1N5bWJvbC5pdGVyYXRvcl0oKSB7XG4gICAgcmV0dXJuIE9iamVjdC5lbnRyaWVzKHRoaXMudG9KU09OKCkpW1N5bWJvbC5pdGVyYXRvcl0oKTtcbiAgfVxuXG4gIHRvU3RyaW5nKCkge1xuICAgIHJldHVybiBPYmplY3QuZW50cmllcyh0aGlzLnRvSlNPTigpKS5tYXAoKFtoZWFkZXIsIHZhbHVlXSkgPT4gaGVhZGVyICsgJzogJyArIHZhbHVlKS5qb2luKCdcXG4nKTtcbiAgfVxuXG4gIGdldCBbU3ltYm9sLnRvU3RyaW5nVGFnXSgpIHtcbiAgICByZXR1cm4gJ0F4aW9zSGVhZGVycyc7XG4gIH1cblxuICBzdGF0aWMgZnJvbSh0aGluZykge1xuICAgIHJldHVybiB0aGluZyBpbnN0YW5jZW9mIHRoaXMgPyB0aGluZyA6IG5ldyB0aGlzKHRoaW5nKTtcbiAgfVxuXG4gIHN0YXRpYyBjb25jYXQoZmlyc3QsIC4uLnRhcmdldHMpIHtcbiAgICBjb25zdCBjb21wdXRlZCA9IG5ldyB0aGlzKGZpcnN0KTtcblxuICAgIHRhcmdldHMuZm9yRWFjaCgodGFyZ2V0KSA9PiBjb21wdXRlZC5zZXQodGFyZ2V0KSk7XG5cbiAgICByZXR1cm4gY29tcHV0ZWQ7XG4gIH1cblxuICBzdGF0aWMgYWNjZXNzb3IoaGVhZGVyKSB7XG4gICAgY29uc3QgaW50ZXJuYWxzID0gdGhpc1skaW50ZXJuYWxzXSA9ICh0aGlzWyRpbnRlcm5hbHNdID0ge1xuICAgICAgYWNjZXNzb3JzOiB7fVxuICAgIH0pO1xuXG4gICAgY29uc3QgYWNjZXNzb3JzID0gaW50ZXJuYWxzLmFjY2Vzc29ycztcbiAgICBjb25zdCBwcm90b3R5cGUgPSB0aGlzLnByb3RvdHlwZTtcblxuICAgIGZ1bmN0aW9uIGRlZmluZUFjY2Vzc29yKF9oZWFkZXIpIHtcbiAgICAgIGNvbnN0IGxIZWFkZXIgPSBub3JtYWxpemVIZWFkZXIoX2hlYWRlcik7XG5cbiAgICAgIGlmICghYWNjZXNzb3JzW2xIZWFkZXJdKSB7XG4gICAgICAgIGJ1aWxkQWNjZXNzb3JzKHByb3RvdHlwZSwgX2hlYWRlcik7XG4gICAgICAgIGFjY2Vzc29yc1tsSGVhZGVyXSA9IHRydWU7XG4gICAgICB9XG4gICAgfVxuXG4gICAgdXRpbHMuaXNBcnJheShoZWFkZXIpID8gaGVhZGVyLmZvckVhY2goZGVmaW5lQWNjZXNzb3IpIDogZGVmaW5lQWNjZXNzb3IoaGVhZGVyKTtcblxuICAgIHJldHVybiB0aGlzO1xuICB9XG59XG5cbkF4aW9zSGVhZGVycy5hY2Nlc3NvcihbJ0NvbnRlbnQtVHlwZScsICdDb250ZW50LUxlbmd0aCcsICdBY2NlcHQnLCAnQWNjZXB0LUVuY29kaW5nJywgJ1VzZXItQWdlbnQnLCAnQXV0aG9yaXphdGlvbiddKTtcblxudXRpbHMuZnJlZXplTWV0aG9kcyhBeGlvc0hlYWRlcnMucHJvdG90eXBlKTtcbnV0aWxzLmZyZWV6ZU1ldGhvZHMoQXhpb3NIZWFkZXJzKTtcblxuZXhwb3J0IGRlZmF1bHQgQXhpb3NIZWFkZXJzO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5pbXBvcnQgdXRpbHMgZnJvbSAnLi8uLi91dGlscy5qcyc7XG5pbXBvcnQgZGVmYXVsdHMgZnJvbSAnLi4vZGVmYXVsdHMvaW5kZXguanMnO1xuaW1wb3J0IEF4aW9zSGVhZGVycyBmcm9tICcuLi9jb3JlL0F4aW9zSGVhZGVycy5qcyc7XG5cbi8qKlxuICogVHJhbnNmb3JtIHRoZSBkYXRhIGZvciBhIHJlcXVlc3Qgb3IgYSByZXNwb25zZVxuICpcbiAqIEBwYXJhbSB7QXJyYXl8RnVuY3Rpb259IGZucyBBIHNpbmdsZSBmdW5jdGlvbiBvciBBcnJheSBvZiBmdW5jdGlvbnNcbiAqIEBwYXJhbSB7P09iamVjdH0gcmVzcG9uc2UgVGhlIHJlc3BvbnNlIG9iamVjdFxuICpcbiAqIEByZXR1cm5zIHsqfSBUaGUgcmVzdWx0aW5nIHRyYW5zZm9ybWVkIGRhdGFcbiAqL1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gdHJhbnNmb3JtRGF0YShmbnMsIHJlc3BvbnNlKSB7XG4gIGNvbnN0IGNvbmZpZyA9IHRoaXMgfHwgZGVmYXVsdHM7XG4gIGNvbnN0IGNvbnRleHQgPSByZXNwb25zZSB8fCBjb25maWc7XG4gIGNvbnN0IGhlYWRlcnMgPSBBeGlvc0hlYWRlcnMuZnJvbShjb250ZXh0LmhlYWRlcnMpO1xuICBsZXQgZGF0YSA9IGNvbnRleHQuZGF0YTtcblxuICB1dGlscy5mb3JFYWNoKGZucywgZnVuY3Rpb24gdHJhbnNmb3JtKGZuKSB7XG4gICAgZGF0YSA9IGZuLmNhbGwoY29uZmlnLCBkYXRhLCBoZWFkZXJzLm5vcm1hbGl6ZSgpLCByZXNwb25zZSA/IHJlc3BvbnNlLnN0YXR1cyA6IHVuZGVmaW5lZCk7XG4gIH0pO1xuXG4gIGhlYWRlcnMubm9ybWFsaXplKCk7XG5cbiAgcmV0dXJuIGRhdGE7XG59XG4iLCIndXNlIHN0cmljdCc7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGlzQ2FuY2VsKHZhbHVlKSB7XG4gIHJldHVybiAhISh2YWx1ZSAmJiB2YWx1ZS5fX0NBTkNFTF9fKTtcbn1cbiIsIid1c2Ugc3RyaWN0JztcblxuaW1wb3J0IEF4aW9zRXJyb3IgZnJvbSAnLi4vY29yZS9BeGlvc0Vycm9yLmpzJztcbmltcG9ydCB1dGlscyBmcm9tICcuLi91dGlscy5qcyc7XG5cbi8qKlxuICogQSBgQ2FuY2VsZWRFcnJvcmAgaXMgYW4gb2JqZWN0IHRoYXQgaXMgdGhyb3duIHdoZW4gYW4gb3BlcmF0aW9uIGlzIGNhbmNlbGVkLlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nPX0gbWVzc2FnZSBUaGUgbWVzc2FnZS5cbiAqIEBwYXJhbSB7T2JqZWN0PX0gY29uZmlnIFRoZSBjb25maWcuXG4gKiBAcGFyYW0ge09iamVjdD19IHJlcXVlc3QgVGhlIHJlcXVlc3QuXG4gKlxuICogQHJldHVybnMge0NhbmNlbGVkRXJyb3J9IFRoZSBjcmVhdGVkIGVycm9yLlxuICovXG5mdW5jdGlvbiBDYW5jZWxlZEVycm9yKG1lc3NhZ2UsIGNvbmZpZywgcmVxdWVzdCkge1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tZXEtbnVsbCxlcWVxZXFcbiAgQXhpb3NFcnJvci5jYWxsKHRoaXMsIG1lc3NhZ2UgPT0gbnVsbCA/ICdjYW5jZWxlZCcgOiBtZXNzYWdlLCBBeGlvc0Vycm9yLkVSUl9DQU5DRUxFRCwgY29uZmlnLCByZXF1ZXN0KTtcbiAgdGhpcy5uYW1lID0gJ0NhbmNlbGVkRXJyb3InO1xufVxuXG51dGlscy5pbmhlcml0cyhDYW5jZWxlZEVycm9yLCBBeGlvc0Vycm9yLCB7XG4gIF9fQ0FOQ0VMX186IHRydWVcbn0pO1xuXG5leHBvcnQgZGVmYXVsdCBDYW5jZWxlZEVycm9yO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5pbXBvcnQgdXRpbHMgZnJvbSAnLi8uLi91dGlscy5qcyc7XG5pbXBvcnQgcGxhdGZvcm0gZnJvbSAnLi4vcGxhdGZvcm0vaW5kZXguanMnO1xuXG5leHBvcnQgZGVmYXVsdCBwbGF0Zm9ybS5pc1N0YW5kYXJkQnJvd3NlckVudiA/XG5cbi8vIFN0YW5kYXJkIGJyb3dzZXIgZW52cyBzdXBwb3J0IGRvY3VtZW50LmNvb2tpZVxuICAoZnVuY3Rpb24gc3RhbmRhcmRCcm93c2VyRW52KCkge1xuICAgIHJldHVybiB7XG4gICAgICB3cml0ZTogZnVuY3Rpb24gd3JpdGUobmFtZSwgdmFsdWUsIGV4cGlyZXMsIHBhdGgsIGRvbWFpbiwgc2VjdXJlKSB7XG4gICAgICAgIGNvbnN0IGNvb2tpZSA9IFtdO1xuICAgICAgICBjb29raWUucHVzaChuYW1lICsgJz0nICsgZW5jb2RlVVJJQ29tcG9uZW50KHZhbHVlKSk7XG5cbiAgICAgICAgaWYgKHV0aWxzLmlzTnVtYmVyKGV4cGlyZXMpKSB7XG4gICAgICAgICAgY29va2llLnB1c2goJ2V4cGlyZXM9JyArIG5ldyBEYXRlKGV4cGlyZXMpLnRvR01UU3RyaW5nKCkpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHV0aWxzLmlzU3RyaW5nKHBhdGgpKSB7XG4gICAgICAgICAgY29va2llLnB1c2goJ3BhdGg9JyArIHBhdGgpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHV0aWxzLmlzU3RyaW5nKGRvbWFpbikpIHtcbiAgICAgICAgICBjb29raWUucHVzaCgnZG9tYWluPScgKyBkb21haW4pO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHNlY3VyZSA9PT0gdHJ1ZSkge1xuICAgICAgICAgIGNvb2tpZS5wdXNoKCdzZWN1cmUnKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGRvY3VtZW50LmNvb2tpZSA9IGNvb2tpZS5qb2luKCc7ICcpO1xuICAgICAgfSxcblxuICAgICAgcmVhZDogZnVuY3Rpb24gcmVhZChuYW1lKSB7XG4gICAgICAgIGNvbnN0IG1hdGNoID0gZG9jdW1lbnQuY29va2llLm1hdGNoKG5ldyBSZWdFeHAoJyhefDtcXFxccyopKCcgKyBuYW1lICsgJyk9KFteO10qKScpKTtcbiAgICAgICAgcmV0dXJuIChtYXRjaCA/IGRlY29kZVVSSUNvbXBvbmVudChtYXRjaFszXSkgOiBudWxsKTtcbiAgICAgIH0sXG5cbiAgICAgIHJlbW92ZTogZnVuY3Rpb24gcmVtb3ZlKG5hbWUpIHtcbiAgICAgICAgdGhpcy53cml0ZShuYW1lLCAnJywgRGF0ZS5ub3coKSAtIDg2NDAwMDAwKTtcbiAgICAgIH1cbiAgICB9O1xuICB9KSgpIDpcblxuLy8gTm9uIHN0YW5kYXJkIGJyb3dzZXIgZW52ICh3ZWIgd29ya2VycywgcmVhY3QtbmF0aXZlKSBsYWNrIG5lZWRlZCBzdXBwb3J0LlxuICAoZnVuY3Rpb24gbm9uU3RhbmRhcmRCcm93c2VyRW52KCkge1xuICAgIHJldHVybiB7XG4gICAgICB3cml0ZTogZnVuY3Rpb24gd3JpdGUoKSB7fSxcbiAgICAgIHJlYWQ6IGZ1bmN0aW9uIHJlYWQoKSB7IHJldHVybiBudWxsOyB9LFxuICAgICAgcmVtb3ZlOiBmdW5jdGlvbiByZW1vdmUoKSB7fVxuICAgIH07XG4gIH0pKCk7XG4iLCIndXNlIHN0cmljdCc7XG5cbmltcG9ydCBpc0Fic29sdXRlVVJMIGZyb20gJy4uL2hlbHBlcnMvaXNBYnNvbHV0ZVVSTC5qcyc7XG5pbXBvcnQgY29tYmluZVVSTHMgZnJvbSAnLi4vaGVscGVycy9jb21iaW5lVVJMcy5qcyc7XG5cbi8qKlxuICogQ3JlYXRlcyBhIG5ldyBVUkwgYnkgY29tYmluaW5nIHRoZSBiYXNlVVJMIHdpdGggdGhlIHJlcXVlc3RlZFVSTCxcbiAqIG9ubHkgd2hlbiB0aGUgcmVxdWVzdGVkVVJMIGlzIG5vdCBhbHJlYWR5IGFuIGFic29sdXRlIFVSTC5cbiAqIElmIHRoZSByZXF1ZXN0VVJMIGlzIGFic29sdXRlLCB0aGlzIGZ1bmN0aW9uIHJldHVybnMgdGhlIHJlcXVlc3RlZFVSTCB1bnRvdWNoZWQuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IGJhc2VVUkwgVGhlIGJhc2UgVVJMXG4gKiBAcGFyYW0ge3N0cmluZ30gcmVxdWVzdGVkVVJMIEFic29sdXRlIG9yIHJlbGF0aXZlIFVSTCB0byBjb21iaW5lXG4gKlxuICogQHJldHVybnMge3N0cmluZ30gVGhlIGNvbWJpbmVkIGZ1bGwgcGF0aFxuICovXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBidWlsZEZ1bGxQYXRoKGJhc2VVUkwsIHJlcXVlc3RlZFVSTCkge1xuICBpZiAoYmFzZVVSTCAmJiAhaXNBYnNvbHV0ZVVSTChyZXF1ZXN0ZWRVUkwpKSB7XG4gICAgcmV0dXJuIGNvbWJpbmVVUkxzKGJhc2VVUkwsIHJlcXVlc3RlZFVSTCk7XG4gIH1cbiAgcmV0dXJuIHJlcXVlc3RlZFVSTDtcbn1cbiIsIid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBEZXRlcm1pbmVzIHdoZXRoZXIgdGhlIHNwZWNpZmllZCBVUkwgaXMgYWJzb2x1dGVcbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gdXJsIFRoZSBVUkwgdG8gdGVzdFxuICpcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHRoZSBzcGVjaWZpZWQgVVJMIGlzIGFic29sdXRlLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gaXNBYnNvbHV0ZVVSTCh1cmwpIHtcbiAgLy8gQSBVUkwgaXMgY29uc2lkZXJlZCBhYnNvbHV0ZSBpZiBpdCBiZWdpbnMgd2l0aCBcIjxzY2hlbWU+Oi8vXCIgb3IgXCIvL1wiIChwcm90b2NvbC1yZWxhdGl2ZSBVUkwpLlxuICAvLyBSRkMgMzk4NiBkZWZpbmVzIHNjaGVtZSBuYW1lIGFzIGEgc2VxdWVuY2Ugb2YgY2hhcmFjdGVycyBiZWdpbm5pbmcgd2l0aCBhIGxldHRlciBhbmQgZm9sbG93ZWRcbiAgLy8gYnkgYW55IGNvbWJpbmF0aW9uIG9mIGxldHRlcnMsIGRpZ2l0cywgcGx1cywgcGVyaW9kLCBvciBoeXBoZW4uXG4gIHJldHVybiAvXihbYS16XVthLXpcXGQrXFwtLl0qOik/XFwvXFwvL2kudGVzdCh1cmwpO1xufVxuIiwiJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIENyZWF0ZXMgYSBuZXcgVVJMIGJ5IGNvbWJpbmluZyB0aGUgc3BlY2lmaWVkIFVSTHNcbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gYmFzZVVSTCBUaGUgYmFzZSBVUkxcbiAqIEBwYXJhbSB7c3RyaW5nfSByZWxhdGl2ZVVSTCBUaGUgcmVsYXRpdmUgVVJMXG4gKlxuICogQHJldHVybnMge3N0cmluZ30gVGhlIGNvbWJpbmVkIFVSTFxuICovXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBjb21iaW5lVVJMcyhiYXNlVVJMLCByZWxhdGl2ZVVSTCkge1xuICByZXR1cm4gcmVsYXRpdmVVUkxcbiAgICA/IGJhc2VVUkwucmVwbGFjZSgvXFwvKyQvLCAnJykgKyAnLycgKyByZWxhdGl2ZVVSTC5yZXBsYWNlKC9eXFwvKy8sICcnKVxuICAgIDogYmFzZVVSTDtcbn1cbiIsIid1c2Ugc3RyaWN0JztcblxuaW1wb3J0IHV0aWxzIGZyb20gJy4vLi4vdXRpbHMuanMnO1xuaW1wb3J0IHBsYXRmb3JtIGZyb20gJy4uL3BsYXRmb3JtL2luZGV4LmpzJztcblxuZXhwb3J0IGRlZmF1bHQgcGxhdGZvcm0uaXNTdGFuZGFyZEJyb3dzZXJFbnYgP1xuXG4vLyBTdGFuZGFyZCBicm93c2VyIGVudnMgaGF2ZSBmdWxsIHN1cHBvcnQgb2YgdGhlIEFQSXMgbmVlZGVkIHRvIHRlc3Rcbi8vIHdoZXRoZXIgdGhlIHJlcXVlc3QgVVJMIGlzIG9mIHRoZSBzYW1lIG9yaWdpbiBhcyBjdXJyZW50IGxvY2F0aW9uLlxuICAoZnVuY3Rpb24gc3RhbmRhcmRCcm93c2VyRW52KCkge1xuICAgIGNvbnN0IG1zaWUgPSAvKG1zaWV8dHJpZGVudCkvaS50ZXN0KG5hdmlnYXRvci51c2VyQWdlbnQpO1xuICAgIGNvbnN0IHVybFBhcnNpbmdOb2RlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnYScpO1xuICAgIGxldCBvcmlnaW5VUkw7XG5cbiAgICAvKipcbiAgICAqIFBhcnNlIGEgVVJMIHRvIGRpc2NvdmVyIGl0J3MgY29tcG9uZW50c1xuICAgICpcbiAgICAqIEBwYXJhbSB7U3RyaW5nfSB1cmwgVGhlIFVSTCB0byBiZSBwYXJzZWRcbiAgICAqIEByZXR1cm5zIHtPYmplY3R9XG4gICAgKi9cbiAgICBmdW5jdGlvbiByZXNvbHZlVVJMKHVybCkge1xuICAgICAgbGV0IGhyZWYgPSB1cmw7XG5cbiAgICAgIGlmIChtc2llKSB7XG4gICAgICAgIC8vIElFIG5lZWRzIGF0dHJpYnV0ZSBzZXQgdHdpY2UgdG8gbm9ybWFsaXplIHByb3BlcnRpZXNcbiAgICAgICAgdXJsUGFyc2luZ05vZGUuc2V0QXR0cmlidXRlKCdocmVmJywgaHJlZik7XG4gICAgICAgIGhyZWYgPSB1cmxQYXJzaW5nTm9kZS5ocmVmO1xuICAgICAgfVxuXG4gICAgICB1cmxQYXJzaW5nTm9kZS5zZXRBdHRyaWJ1dGUoJ2hyZWYnLCBocmVmKTtcblxuICAgICAgLy8gdXJsUGFyc2luZ05vZGUgcHJvdmlkZXMgdGhlIFVybFV0aWxzIGludGVyZmFjZSAtIGh0dHA6Ly91cmwuc3BlYy53aGF0d2cub3JnLyN1cmx1dGlsc1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgaHJlZjogdXJsUGFyc2luZ05vZGUuaHJlZixcbiAgICAgICAgcHJvdG9jb2w6IHVybFBhcnNpbmdOb2RlLnByb3RvY29sID8gdXJsUGFyc2luZ05vZGUucHJvdG9jb2wucmVwbGFjZSgvOiQvLCAnJykgOiAnJyxcbiAgICAgICAgaG9zdDogdXJsUGFyc2luZ05vZGUuaG9zdCxcbiAgICAgICAgc2VhcmNoOiB1cmxQYXJzaW5nTm9kZS5zZWFyY2ggPyB1cmxQYXJzaW5nTm9kZS5zZWFyY2gucmVwbGFjZSgvXlxcPy8sICcnKSA6ICcnLFxuICAgICAgICBoYXNoOiB1cmxQYXJzaW5nTm9kZS5oYXNoID8gdXJsUGFyc2luZ05vZGUuaGFzaC5yZXBsYWNlKC9eIy8sICcnKSA6ICcnLFxuICAgICAgICBob3N0bmFtZTogdXJsUGFyc2luZ05vZGUuaG9zdG5hbWUsXG4gICAgICAgIHBvcnQ6IHVybFBhcnNpbmdOb2RlLnBvcnQsXG4gICAgICAgIHBhdGhuYW1lOiAodXJsUGFyc2luZ05vZGUucGF0aG5hbWUuY2hhckF0KDApID09PSAnLycpID9cbiAgICAgICAgICB1cmxQYXJzaW5nTm9kZS5wYXRobmFtZSA6XG4gICAgICAgICAgJy8nICsgdXJsUGFyc2luZ05vZGUucGF0aG5hbWVcbiAgICAgIH07XG4gICAgfVxuXG4gICAgb3JpZ2luVVJMID0gcmVzb2x2ZVVSTCh3aW5kb3cubG9jYXRpb24uaHJlZik7XG5cbiAgICAvKipcbiAgICAqIERldGVybWluZSBpZiBhIFVSTCBzaGFyZXMgdGhlIHNhbWUgb3JpZ2luIGFzIHRoZSBjdXJyZW50IGxvY2F0aW9uXG4gICAgKlxuICAgICogQHBhcmFtIHtTdHJpbmd9IHJlcXVlc3RVUkwgVGhlIFVSTCB0byB0ZXN0XG4gICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiBVUkwgc2hhcmVzIHRoZSBzYW1lIG9yaWdpbiwgb3RoZXJ3aXNlIGZhbHNlXG4gICAgKi9cbiAgICByZXR1cm4gZnVuY3Rpb24gaXNVUkxTYW1lT3JpZ2luKHJlcXVlc3RVUkwpIHtcbiAgICAgIGNvbnN0IHBhcnNlZCA9ICh1dGlscy5pc1N0cmluZyhyZXF1ZXN0VVJMKSkgPyByZXNvbHZlVVJMKHJlcXVlc3RVUkwpIDogcmVxdWVzdFVSTDtcbiAgICAgIHJldHVybiAocGFyc2VkLnByb3RvY29sID09PSBvcmlnaW5VUkwucHJvdG9jb2wgJiZcbiAgICAgICAgICBwYXJzZWQuaG9zdCA9PT0gb3JpZ2luVVJMLmhvc3QpO1xuICAgIH07XG4gIH0pKCkgOlxuXG4gIC8vIE5vbiBzdGFuZGFyZCBicm93c2VyIGVudnMgKHdlYiB3b3JrZXJzLCByZWFjdC1uYXRpdmUpIGxhY2sgbmVlZGVkIHN1cHBvcnQuXG4gIChmdW5jdGlvbiBub25TdGFuZGFyZEJyb3dzZXJFbnYoKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIGlzVVJMU2FtZU9yaWdpbigpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH07XG4gIH0pKCk7XG4iLCIndXNlIHN0cmljdCc7XG5cbmltcG9ydCB1dGlscyBmcm9tICcuLy4uL3V0aWxzLmpzJztcbmltcG9ydCBzZXR0bGUgZnJvbSAnLi8uLi9jb3JlL3NldHRsZS5qcyc7XG5pbXBvcnQgY29va2llcyBmcm9tICcuLy4uL2hlbHBlcnMvY29va2llcy5qcyc7XG5pbXBvcnQgYnVpbGRVUkwgZnJvbSAnLi8uLi9oZWxwZXJzL2J1aWxkVVJMLmpzJztcbmltcG9ydCBidWlsZEZ1bGxQYXRoIGZyb20gJy4uL2NvcmUvYnVpbGRGdWxsUGF0aC5qcyc7XG5pbXBvcnQgaXNVUkxTYW1lT3JpZ2luIGZyb20gJy4vLi4vaGVscGVycy9pc1VSTFNhbWVPcmlnaW4uanMnO1xuaW1wb3J0IHRyYW5zaXRpb25hbERlZmF1bHRzIGZyb20gJy4uL2RlZmF1bHRzL3RyYW5zaXRpb25hbC5qcyc7XG5pbXBvcnQgQXhpb3NFcnJvciBmcm9tICcuLi9jb3JlL0F4aW9zRXJyb3IuanMnO1xuaW1wb3J0IENhbmNlbGVkRXJyb3IgZnJvbSAnLi4vY2FuY2VsL0NhbmNlbGVkRXJyb3IuanMnO1xuaW1wb3J0IHBhcnNlUHJvdG9jb2wgZnJvbSAnLi4vaGVscGVycy9wYXJzZVByb3RvY29sLmpzJztcbmltcG9ydCBwbGF0Zm9ybSBmcm9tICcuLi9wbGF0Zm9ybS9pbmRleC5qcyc7XG5pbXBvcnQgQXhpb3NIZWFkZXJzIGZyb20gJy4uL2NvcmUvQXhpb3NIZWFkZXJzLmpzJztcbmltcG9ydCBzcGVlZG9tZXRlciBmcm9tICcuLi9oZWxwZXJzL3NwZWVkb21ldGVyLmpzJztcblxuZnVuY3Rpb24gcHJvZ3Jlc3NFdmVudFJlZHVjZXIobGlzdGVuZXIsIGlzRG93bmxvYWRTdHJlYW0pIHtcbiAgbGV0IGJ5dGVzTm90aWZpZWQgPSAwO1xuICBjb25zdCBfc3BlZWRvbWV0ZXIgPSBzcGVlZG9tZXRlcig1MCwgMjUwKTtcblxuICByZXR1cm4gZSA9PiB7XG4gICAgY29uc3QgbG9hZGVkID0gZS5sb2FkZWQ7XG4gICAgY29uc3QgdG90YWwgPSBlLmxlbmd0aENvbXB1dGFibGUgPyBlLnRvdGFsIDogdW5kZWZpbmVkO1xuICAgIGNvbnN0IHByb2dyZXNzQnl0ZXMgPSBsb2FkZWQgLSBieXRlc05vdGlmaWVkO1xuICAgIGNvbnN0IHJhdGUgPSBfc3BlZWRvbWV0ZXIocHJvZ3Jlc3NCeXRlcyk7XG4gICAgY29uc3QgaW5SYW5nZSA9IGxvYWRlZCA8PSB0b3RhbDtcblxuICAgIGJ5dGVzTm90aWZpZWQgPSBsb2FkZWQ7XG5cbiAgICBjb25zdCBkYXRhID0ge1xuICAgICAgbG9hZGVkLFxuICAgICAgdG90YWwsXG4gICAgICBwcm9ncmVzczogdG90YWwgPyAobG9hZGVkIC8gdG90YWwpIDogdW5kZWZpbmVkLFxuICAgICAgYnl0ZXM6IHByb2dyZXNzQnl0ZXMsXG4gICAgICByYXRlOiByYXRlID8gcmF0ZSA6IHVuZGVmaW5lZCxcbiAgICAgIGVzdGltYXRlZDogcmF0ZSAmJiB0b3RhbCAmJiBpblJhbmdlID8gKHRvdGFsIC0gbG9hZGVkKSAvIHJhdGUgOiB1bmRlZmluZWQsXG4gICAgICBldmVudDogZVxuICAgIH07XG5cbiAgICBkYXRhW2lzRG93bmxvYWRTdHJlYW0gPyAnZG93bmxvYWQnIDogJ3VwbG9hZCddID0gdHJ1ZTtcblxuICAgIGxpc3RlbmVyKGRhdGEpO1xuICB9O1xufVxuXG5jb25zdCBpc1hIUkFkYXB0ZXJTdXBwb3J0ZWQgPSB0eXBlb2YgWE1MSHR0cFJlcXVlc3QgIT09ICd1bmRlZmluZWQnO1xuXG5leHBvcnQgZGVmYXVsdCBpc1hIUkFkYXB0ZXJTdXBwb3J0ZWQgJiYgZnVuY3Rpb24gKGNvbmZpZykge1xuICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gZGlzcGF0Y2hYaHJSZXF1ZXN0KHJlc29sdmUsIHJlamVjdCkge1xuICAgIGxldCByZXF1ZXN0RGF0YSA9IGNvbmZpZy5kYXRhO1xuICAgIGNvbnN0IHJlcXVlc3RIZWFkZXJzID0gQXhpb3NIZWFkZXJzLmZyb20oY29uZmlnLmhlYWRlcnMpLm5vcm1hbGl6ZSgpO1xuICAgIGNvbnN0IHJlc3BvbnNlVHlwZSA9IGNvbmZpZy5yZXNwb25zZVR5cGU7XG4gICAgbGV0IG9uQ2FuY2VsZWQ7XG4gICAgZnVuY3Rpb24gZG9uZSgpIHtcbiAgICAgIGlmIChjb25maWcuY2FuY2VsVG9rZW4pIHtcbiAgICAgICAgY29uZmlnLmNhbmNlbFRva2VuLnVuc3Vic2NyaWJlKG9uQ2FuY2VsZWQpO1xuICAgICAgfVxuXG4gICAgICBpZiAoY29uZmlnLnNpZ25hbCkge1xuICAgICAgICBjb25maWcuc2lnbmFsLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2Fib3J0Jywgb25DYW5jZWxlZCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKHV0aWxzLmlzRm9ybURhdGEocmVxdWVzdERhdGEpKSB7XG4gICAgICBpZiAocGxhdGZvcm0uaXNTdGFuZGFyZEJyb3dzZXJFbnYgfHwgcGxhdGZvcm0uaXNTdGFuZGFyZEJyb3dzZXJXZWJXb3JrZXJFbnYpIHtcbiAgICAgICAgcmVxdWVzdEhlYWRlcnMuc2V0Q29udGVudFR5cGUoZmFsc2UpOyAvLyBMZXQgdGhlIGJyb3dzZXIgc2V0IGl0XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXF1ZXN0SGVhZGVycy5zZXRDb250ZW50VHlwZSgnbXVsdGlwYXJ0L2Zvcm0tZGF0YTsnLCBmYWxzZSk7IC8vIG1vYmlsZS9kZXNrdG9wIGFwcCBmcmFtZXdvcmtzXG4gICAgICB9XG4gICAgfVxuXG4gICAgbGV0IHJlcXVlc3QgPSBuZXcgWE1MSHR0cFJlcXVlc3QoKTtcblxuICAgIC8vIEhUVFAgYmFzaWMgYXV0aGVudGljYXRpb25cbiAgICBpZiAoY29uZmlnLmF1dGgpIHtcbiAgICAgIGNvbnN0IHVzZXJuYW1lID0gY29uZmlnLmF1dGgudXNlcm5hbWUgfHwgJyc7XG4gICAgICBjb25zdCBwYXNzd29yZCA9IGNvbmZpZy5hdXRoLnBhc3N3b3JkID8gdW5lc2NhcGUoZW5jb2RlVVJJQ29tcG9uZW50KGNvbmZpZy5hdXRoLnBhc3N3b3JkKSkgOiAnJztcbiAgICAgIHJlcXVlc3RIZWFkZXJzLnNldCgnQXV0aG9yaXphdGlvbicsICdCYXNpYyAnICsgYnRvYSh1c2VybmFtZSArICc6JyArIHBhc3N3b3JkKSk7XG4gICAgfVxuXG4gICAgY29uc3QgZnVsbFBhdGggPSBidWlsZEZ1bGxQYXRoKGNvbmZpZy5iYXNlVVJMLCBjb25maWcudXJsKTtcblxuICAgIHJlcXVlc3Qub3Blbihjb25maWcubWV0aG9kLnRvVXBwZXJDYXNlKCksIGJ1aWxkVVJMKGZ1bGxQYXRoLCBjb25maWcucGFyYW1zLCBjb25maWcucGFyYW1zU2VyaWFsaXplciksIHRydWUpO1xuXG4gICAgLy8gU2V0IHRoZSByZXF1ZXN0IHRpbWVvdXQgaW4gTVNcbiAgICByZXF1ZXN0LnRpbWVvdXQgPSBjb25maWcudGltZW91dDtcblxuICAgIGZ1bmN0aW9uIG9ubG9hZGVuZCgpIHtcbiAgICAgIGlmICghcmVxdWVzdCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICAvLyBQcmVwYXJlIHRoZSByZXNwb25zZVxuICAgICAgY29uc3QgcmVzcG9uc2VIZWFkZXJzID0gQXhpb3NIZWFkZXJzLmZyb20oXG4gICAgICAgICdnZXRBbGxSZXNwb25zZUhlYWRlcnMnIGluIHJlcXVlc3QgJiYgcmVxdWVzdC5nZXRBbGxSZXNwb25zZUhlYWRlcnMoKVxuICAgICAgKTtcbiAgICAgIGNvbnN0IHJlc3BvbnNlRGF0YSA9ICFyZXNwb25zZVR5cGUgfHwgcmVzcG9uc2VUeXBlID09PSAndGV4dCcgfHwgcmVzcG9uc2VUeXBlID09PSAnanNvbicgP1xuICAgICAgICByZXF1ZXN0LnJlc3BvbnNlVGV4dCA6IHJlcXVlc3QucmVzcG9uc2U7XG4gICAgICBjb25zdCByZXNwb25zZSA9IHtcbiAgICAgICAgZGF0YTogcmVzcG9uc2VEYXRhLFxuICAgICAgICBzdGF0dXM6IHJlcXVlc3Quc3RhdHVzLFxuICAgICAgICBzdGF0dXNUZXh0OiByZXF1ZXN0LnN0YXR1c1RleHQsXG4gICAgICAgIGhlYWRlcnM6IHJlc3BvbnNlSGVhZGVycyxcbiAgICAgICAgY29uZmlnLFxuICAgICAgICByZXF1ZXN0XG4gICAgICB9O1xuXG4gICAgICBzZXR0bGUoZnVuY3Rpb24gX3Jlc29sdmUodmFsdWUpIHtcbiAgICAgICAgcmVzb2x2ZSh2YWx1ZSk7XG4gICAgICAgIGRvbmUoKTtcbiAgICAgIH0sIGZ1bmN0aW9uIF9yZWplY3QoZXJyKSB7XG4gICAgICAgIHJlamVjdChlcnIpO1xuICAgICAgICBkb25lKCk7XG4gICAgICB9LCByZXNwb25zZSk7XG5cbiAgICAgIC8vIENsZWFuIHVwIHJlcXVlc3RcbiAgICAgIHJlcXVlc3QgPSBudWxsO1xuICAgIH1cblxuICAgIGlmICgnb25sb2FkZW5kJyBpbiByZXF1ZXN0KSB7XG4gICAgICAvLyBVc2Ugb25sb2FkZW5kIGlmIGF2YWlsYWJsZVxuICAgICAgcmVxdWVzdC5vbmxvYWRlbmQgPSBvbmxvYWRlbmQ7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIExpc3RlbiBmb3IgcmVhZHkgc3RhdGUgdG8gZW11bGF0ZSBvbmxvYWRlbmRcbiAgICAgIHJlcXVlc3Qub25yZWFkeXN0YXRlY2hhbmdlID0gZnVuY3Rpb24gaGFuZGxlTG9hZCgpIHtcbiAgICAgICAgaWYgKCFyZXF1ZXN0IHx8IHJlcXVlc3QucmVhZHlTdGF0ZSAhPT0gNCkge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFRoZSByZXF1ZXN0IGVycm9yZWQgb3V0IGFuZCB3ZSBkaWRuJ3QgZ2V0IGEgcmVzcG9uc2UsIHRoaXMgd2lsbCBiZVxuICAgICAgICAvLyBoYW5kbGVkIGJ5IG9uZXJyb3IgaW5zdGVhZFxuICAgICAgICAvLyBXaXRoIG9uZSBleGNlcHRpb246IHJlcXVlc3QgdGhhdCB1c2luZyBmaWxlOiBwcm90b2NvbCwgbW9zdCBicm93c2Vyc1xuICAgICAgICAvLyB3aWxsIHJldHVybiBzdGF0dXMgYXMgMCBldmVuIHRob3VnaCBpdCdzIGEgc3VjY2Vzc2Z1bCByZXF1ZXN0XG4gICAgICAgIGlmIChyZXF1ZXN0LnN0YXR1cyA9PT0gMCAmJiAhKHJlcXVlc3QucmVzcG9uc2VVUkwgJiYgcmVxdWVzdC5yZXNwb25zZVVSTC5pbmRleE9mKCdmaWxlOicpID09PSAwKSkge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICAvLyByZWFkeXN0YXRlIGhhbmRsZXIgaXMgY2FsbGluZyBiZWZvcmUgb25lcnJvciBvciBvbnRpbWVvdXQgaGFuZGxlcnMsXG4gICAgICAgIC8vIHNvIHdlIHNob3VsZCBjYWxsIG9ubG9hZGVuZCBvbiB0aGUgbmV4dCAndGljaydcbiAgICAgICAgc2V0VGltZW91dChvbmxvYWRlbmQpO1xuICAgICAgfTtcbiAgICB9XG5cbiAgICAvLyBIYW5kbGUgYnJvd3NlciByZXF1ZXN0IGNhbmNlbGxhdGlvbiAoYXMgb3Bwb3NlZCB0byBhIG1hbnVhbCBjYW5jZWxsYXRpb24pXG4gICAgcmVxdWVzdC5vbmFib3J0ID0gZnVuY3Rpb24gaGFuZGxlQWJvcnQoKSB7XG4gICAgICBpZiAoIXJlcXVlc3QpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICByZWplY3QobmV3IEF4aW9zRXJyb3IoJ1JlcXVlc3QgYWJvcnRlZCcsIEF4aW9zRXJyb3IuRUNPTk5BQk9SVEVELCBjb25maWcsIHJlcXVlc3QpKTtcblxuICAgICAgLy8gQ2xlYW4gdXAgcmVxdWVzdFxuICAgICAgcmVxdWVzdCA9IG51bGw7XG4gICAgfTtcblxuICAgIC8vIEhhbmRsZSBsb3cgbGV2ZWwgbmV0d29yayBlcnJvcnNcbiAgICByZXF1ZXN0Lm9uZXJyb3IgPSBmdW5jdGlvbiBoYW5kbGVFcnJvcigpIHtcbiAgICAgIC8vIFJlYWwgZXJyb3JzIGFyZSBoaWRkZW4gZnJvbSB1cyBieSB0aGUgYnJvd3NlclxuICAgICAgLy8gb25lcnJvciBzaG91bGQgb25seSBmaXJlIGlmIGl0J3MgYSBuZXR3b3JrIGVycm9yXG4gICAgICByZWplY3QobmV3IEF4aW9zRXJyb3IoJ05ldHdvcmsgRXJyb3InLCBBeGlvc0Vycm9yLkVSUl9ORVRXT1JLLCBjb25maWcsIHJlcXVlc3QpKTtcblxuICAgICAgLy8gQ2xlYW4gdXAgcmVxdWVzdFxuICAgICAgcmVxdWVzdCA9IG51bGw7XG4gICAgfTtcblxuICAgIC8vIEhhbmRsZSB0aW1lb3V0XG4gICAgcmVxdWVzdC5vbnRpbWVvdXQgPSBmdW5jdGlvbiBoYW5kbGVUaW1lb3V0KCkge1xuICAgICAgbGV0IHRpbWVvdXRFcnJvck1lc3NhZ2UgPSBjb25maWcudGltZW91dCA/ICd0aW1lb3V0IG9mICcgKyBjb25maWcudGltZW91dCArICdtcyBleGNlZWRlZCcgOiAndGltZW91dCBleGNlZWRlZCc7XG4gICAgICBjb25zdCB0cmFuc2l0aW9uYWwgPSBjb25maWcudHJhbnNpdGlvbmFsIHx8IHRyYW5zaXRpb25hbERlZmF1bHRzO1xuICAgICAgaWYgKGNvbmZpZy50aW1lb3V0RXJyb3JNZXNzYWdlKSB7XG4gICAgICAgIHRpbWVvdXRFcnJvck1lc3NhZ2UgPSBjb25maWcudGltZW91dEVycm9yTWVzc2FnZTtcbiAgICAgIH1cbiAgICAgIHJlamVjdChuZXcgQXhpb3NFcnJvcihcbiAgICAgICAgdGltZW91dEVycm9yTWVzc2FnZSxcbiAgICAgICAgdHJhbnNpdGlvbmFsLmNsYXJpZnlUaW1lb3V0RXJyb3IgPyBBeGlvc0Vycm9yLkVUSU1FRE9VVCA6IEF4aW9zRXJyb3IuRUNPTk5BQk9SVEVELFxuICAgICAgICBjb25maWcsXG4gICAgICAgIHJlcXVlc3QpKTtcblxuICAgICAgLy8gQ2xlYW4gdXAgcmVxdWVzdFxuICAgICAgcmVxdWVzdCA9IG51bGw7XG4gICAgfTtcblxuICAgIC8vIEFkZCB4c3JmIGhlYWRlclxuICAgIC8vIFRoaXMgaXMgb25seSBkb25lIGlmIHJ1bm5pbmcgaW4gYSBzdGFuZGFyZCBicm93c2VyIGVudmlyb25tZW50LlxuICAgIC8vIFNwZWNpZmljYWxseSBub3QgaWYgd2UncmUgaW4gYSB3ZWIgd29ya2VyLCBvciByZWFjdC1uYXRpdmUuXG4gICAgaWYgKHBsYXRmb3JtLmlzU3RhbmRhcmRCcm93c2VyRW52KSB7XG4gICAgICAvLyBBZGQgeHNyZiBoZWFkZXJcbiAgICAgIGNvbnN0IHhzcmZWYWx1ZSA9IChjb25maWcud2l0aENyZWRlbnRpYWxzIHx8IGlzVVJMU2FtZU9yaWdpbihmdWxsUGF0aCkpXG4gICAgICAgICYmIGNvbmZpZy54c3JmQ29va2llTmFtZSAmJiBjb29raWVzLnJlYWQoY29uZmlnLnhzcmZDb29raWVOYW1lKTtcblxuICAgICAgaWYgKHhzcmZWYWx1ZSkge1xuICAgICAgICByZXF1ZXN0SGVhZGVycy5zZXQoY29uZmlnLnhzcmZIZWFkZXJOYW1lLCB4c3JmVmFsdWUpO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8vIFJlbW92ZSBDb250ZW50LVR5cGUgaWYgZGF0YSBpcyB1bmRlZmluZWRcbiAgICByZXF1ZXN0RGF0YSA9PT0gdW5kZWZpbmVkICYmIHJlcXVlc3RIZWFkZXJzLnNldENvbnRlbnRUeXBlKG51bGwpO1xuXG4gICAgLy8gQWRkIGhlYWRlcnMgdG8gdGhlIHJlcXVlc3RcbiAgICBpZiAoJ3NldFJlcXVlc3RIZWFkZXInIGluIHJlcXVlc3QpIHtcbiAgICAgIHV0aWxzLmZvckVhY2gocmVxdWVzdEhlYWRlcnMudG9KU09OKCksIGZ1bmN0aW9uIHNldFJlcXVlc3RIZWFkZXIodmFsLCBrZXkpIHtcbiAgICAgICAgcmVxdWVzdC5zZXRSZXF1ZXN0SGVhZGVyKGtleSwgdmFsKTtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIC8vIEFkZCB3aXRoQ3JlZGVudGlhbHMgdG8gcmVxdWVzdCBpZiBuZWVkZWRcbiAgICBpZiAoIXV0aWxzLmlzVW5kZWZpbmVkKGNvbmZpZy53aXRoQ3JlZGVudGlhbHMpKSB7XG4gICAgICByZXF1ZXN0LndpdGhDcmVkZW50aWFscyA9ICEhY29uZmlnLndpdGhDcmVkZW50aWFscztcbiAgICB9XG5cbiAgICAvLyBBZGQgcmVzcG9uc2VUeXBlIHRvIHJlcXVlc3QgaWYgbmVlZGVkXG4gICAgaWYgKHJlc3BvbnNlVHlwZSAmJiByZXNwb25zZVR5cGUgIT09ICdqc29uJykge1xuICAgICAgcmVxdWVzdC5yZXNwb25zZVR5cGUgPSBjb25maWcucmVzcG9uc2VUeXBlO1xuICAgIH1cblxuICAgIC8vIEhhbmRsZSBwcm9ncmVzcyBpZiBuZWVkZWRcbiAgICBpZiAodHlwZW9mIGNvbmZpZy5vbkRvd25sb2FkUHJvZ3Jlc3MgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIHJlcXVlc3QuYWRkRXZlbnRMaXN0ZW5lcigncHJvZ3Jlc3MnLCBwcm9ncmVzc0V2ZW50UmVkdWNlcihjb25maWcub25Eb3dubG9hZFByb2dyZXNzLCB0cnVlKSk7XG4gICAgfVxuXG4gICAgLy8gTm90IGFsbCBicm93c2VycyBzdXBwb3J0IHVwbG9hZCBldmVudHNcbiAgICBpZiAodHlwZW9mIGNvbmZpZy5vblVwbG9hZFByb2dyZXNzID09PSAnZnVuY3Rpb24nICYmIHJlcXVlc3QudXBsb2FkKSB7XG4gICAgICByZXF1ZXN0LnVwbG9hZC5hZGRFdmVudExpc3RlbmVyKCdwcm9ncmVzcycsIHByb2dyZXNzRXZlbnRSZWR1Y2VyKGNvbmZpZy5vblVwbG9hZFByb2dyZXNzKSk7XG4gICAgfVxuXG4gICAgaWYgKGNvbmZpZy5jYW5jZWxUb2tlbiB8fCBjb25maWcuc2lnbmFsKSB7XG4gICAgICAvLyBIYW5kbGUgY2FuY2VsbGF0aW9uXG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZnVuYy1uYW1lc1xuICAgICAgb25DYW5jZWxlZCA9IGNhbmNlbCA9PiB7XG4gICAgICAgIGlmICghcmVxdWVzdCkge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICByZWplY3QoIWNhbmNlbCB8fCBjYW5jZWwudHlwZSA/IG5ldyBDYW5jZWxlZEVycm9yKG51bGwsIGNvbmZpZywgcmVxdWVzdCkgOiBjYW5jZWwpO1xuICAgICAgICByZXF1ZXN0LmFib3J0KCk7XG4gICAgICAgIHJlcXVlc3QgPSBudWxsO1xuICAgICAgfTtcblxuICAgICAgY29uZmlnLmNhbmNlbFRva2VuICYmIGNvbmZpZy5jYW5jZWxUb2tlbi5zdWJzY3JpYmUob25DYW5jZWxlZCk7XG4gICAgICBpZiAoY29uZmlnLnNpZ25hbCkge1xuICAgICAgICBjb25maWcuc2lnbmFsLmFib3J0ZWQgPyBvbkNhbmNlbGVkKCkgOiBjb25maWcuc2lnbmFsLmFkZEV2ZW50TGlzdGVuZXIoJ2Fib3J0Jywgb25DYW5jZWxlZCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgY29uc3QgcHJvdG9jb2wgPSBwYXJzZVByb3RvY29sKGZ1bGxQYXRoKTtcblxuICAgIGlmIChwcm90b2NvbCAmJiBwbGF0Zm9ybS5wcm90b2NvbHMuaW5kZXhPZihwcm90b2NvbCkgPT09IC0xKSB7XG4gICAgICByZWplY3QobmV3IEF4aW9zRXJyb3IoJ1Vuc3VwcG9ydGVkIHByb3RvY29sICcgKyBwcm90b2NvbCArICc6JywgQXhpb3NFcnJvci5FUlJfQkFEX1JFUVVFU1QsIGNvbmZpZykpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuXG4gICAgLy8gU2VuZCB0aGUgcmVxdWVzdFxuICAgIHJlcXVlc3Quc2VuZChyZXF1ZXN0RGF0YSB8fCBudWxsKTtcbiAgfSk7XG59XG4iLCIndXNlIHN0cmljdCc7XG5cbi8qKlxuICogQ2FsY3VsYXRlIGRhdGEgbWF4UmF0ZVxuICogQHBhcmFtIHtOdW1iZXJ9IFtzYW1wbGVzQ291bnQ9IDEwXVxuICogQHBhcmFtIHtOdW1iZXJ9IFttaW49IDEwMDBdXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259XG4gKi9cbmZ1bmN0aW9uIHNwZWVkb21ldGVyKHNhbXBsZXNDb3VudCwgbWluKSB7XG4gIHNhbXBsZXNDb3VudCA9IHNhbXBsZXNDb3VudCB8fCAxMDtcbiAgY29uc3QgYnl0ZXMgPSBuZXcgQXJyYXkoc2FtcGxlc0NvdW50KTtcbiAgY29uc3QgdGltZXN0YW1wcyA9IG5ldyBBcnJheShzYW1wbGVzQ291bnQpO1xuICBsZXQgaGVhZCA9IDA7XG4gIGxldCB0YWlsID0gMDtcbiAgbGV0IGZpcnN0U2FtcGxlVFM7XG5cbiAgbWluID0gbWluICE9PSB1bmRlZmluZWQgPyBtaW4gOiAxMDAwO1xuXG4gIHJldHVybiBmdW5jdGlvbiBwdXNoKGNodW5rTGVuZ3RoKSB7XG4gICAgY29uc3Qgbm93ID0gRGF0ZS5ub3coKTtcblxuICAgIGNvbnN0IHN0YXJ0ZWRBdCA9IHRpbWVzdGFtcHNbdGFpbF07XG5cbiAgICBpZiAoIWZpcnN0U2FtcGxlVFMpIHtcbiAgICAgIGZpcnN0U2FtcGxlVFMgPSBub3c7XG4gICAgfVxuXG4gICAgYnl0ZXNbaGVhZF0gPSBjaHVua0xlbmd0aDtcbiAgICB0aW1lc3RhbXBzW2hlYWRdID0gbm93O1xuXG4gICAgbGV0IGkgPSB0YWlsO1xuICAgIGxldCBieXRlc0NvdW50ID0gMDtcblxuICAgIHdoaWxlIChpICE9PSBoZWFkKSB7XG4gICAgICBieXRlc0NvdW50ICs9IGJ5dGVzW2krK107XG4gICAgICBpID0gaSAlIHNhbXBsZXNDb3VudDtcbiAgICB9XG5cbiAgICBoZWFkID0gKGhlYWQgKyAxKSAlIHNhbXBsZXNDb3VudDtcblxuICAgIGlmIChoZWFkID09PSB0YWlsKSB7XG4gICAgICB0YWlsID0gKHRhaWwgKyAxKSAlIHNhbXBsZXNDb3VudDtcbiAgICB9XG5cbiAgICBpZiAobm93IC0gZmlyc3RTYW1wbGVUUyA8IG1pbikge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGNvbnN0IHBhc3NlZCA9IHN0YXJ0ZWRBdCAmJiBub3cgLSBzdGFydGVkQXQ7XG5cbiAgICByZXR1cm4gcGFzc2VkID8gTWF0aC5yb3VuZChieXRlc0NvdW50ICogMTAwMCAvIHBhc3NlZCkgOiB1bmRlZmluZWQ7XG4gIH07XG59XG5cbmV4cG9ydCBkZWZhdWx0IHNwZWVkb21ldGVyO1xuIiwiaW1wb3J0IHV0aWxzIGZyb20gJy4uL3V0aWxzLmpzJztcbmltcG9ydCBodHRwQWRhcHRlciBmcm9tICcuL2h0dHAuanMnO1xuaW1wb3J0IHhockFkYXB0ZXIgZnJvbSAnLi94aHIuanMnO1xuaW1wb3J0IEF4aW9zRXJyb3IgZnJvbSBcIi4uL2NvcmUvQXhpb3NFcnJvci5qc1wiO1xuXG5jb25zdCBrbm93bkFkYXB0ZXJzID0ge1xuICBodHRwOiBodHRwQWRhcHRlcixcbiAgeGhyOiB4aHJBZGFwdGVyXG59XG5cbnV0aWxzLmZvckVhY2goa25vd25BZGFwdGVycywgKGZuLCB2YWx1ZSkgPT4ge1xuICBpZihmbikge1xuICAgIHRyeSB7XG4gICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoZm4sICduYW1lJywge3ZhbHVlfSk7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWVtcHR5XG4gICAgfVxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShmbiwgJ2FkYXB0ZXJOYW1lJywge3ZhbHVlfSk7XG4gIH1cbn0pO1xuXG5leHBvcnQgZGVmYXVsdCB7XG4gIGdldEFkYXB0ZXI6IChhZGFwdGVycykgPT4ge1xuICAgIGFkYXB0ZXJzID0gdXRpbHMuaXNBcnJheShhZGFwdGVycykgPyBhZGFwdGVycyA6IFthZGFwdGVyc107XG5cbiAgICBjb25zdCB7bGVuZ3RofSA9IGFkYXB0ZXJzO1xuICAgIGxldCBuYW1lT3JBZGFwdGVyO1xuICAgIGxldCBhZGFwdGVyO1xuXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBsZW5ndGg7IGkrKykge1xuICAgICAgbmFtZU9yQWRhcHRlciA9IGFkYXB0ZXJzW2ldO1xuICAgICAgaWYoKGFkYXB0ZXIgPSB1dGlscy5pc1N0cmluZyhuYW1lT3JBZGFwdGVyKSA/IGtub3duQWRhcHRlcnNbbmFtZU9yQWRhcHRlci50b0xvd2VyQ2FzZSgpXSA6IG5hbWVPckFkYXB0ZXIpKSB7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmICghYWRhcHRlcikge1xuICAgICAgaWYgKGFkYXB0ZXIgPT09IGZhbHNlKSB7XG4gICAgICAgIHRocm93IG5ldyBBeGlvc0Vycm9yKFxuICAgICAgICAgIGBBZGFwdGVyICR7bmFtZU9yQWRhcHRlcn0gaXMgbm90IHN1cHBvcnRlZCBieSB0aGUgZW52aXJvbm1lbnRgLFxuICAgICAgICAgICdFUlJfTk9UX1NVUFBPUlQnXG4gICAgICAgICk7XG4gICAgICB9XG5cbiAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgdXRpbHMuaGFzT3duUHJvcChrbm93bkFkYXB0ZXJzLCBuYW1lT3JBZGFwdGVyKSA/XG4gICAgICAgICAgYEFkYXB0ZXIgJyR7bmFtZU9yQWRhcHRlcn0nIGlzIG5vdCBhdmFpbGFibGUgaW4gdGhlIGJ1aWxkYCA6XG4gICAgICAgICAgYFVua25vd24gYWRhcHRlciAnJHtuYW1lT3JBZGFwdGVyfSdgXG4gICAgICApO1xuICAgIH1cblxuICAgIGlmICghdXRpbHMuaXNGdW5jdGlvbihhZGFwdGVyKSkge1xuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignYWRhcHRlciBpcyBub3QgYSBmdW5jdGlvbicpO1xuICAgIH1cblxuICAgIHJldHVybiBhZGFwdGVyO1xuICB9LFxuICBhZGFwdGVyczoga25vd25BZGFwdGVyc1xufVxuIiwiLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHN0cmljdFxuZXhwb3J0IGRlZmF1bHQgbnVsbDtcbiIsIid1c2Ugc3RyaWN0JztcblxuaW1wb3J0IEF4aW9zRXJyb3IgZnJvbSAnLi9BeGlvc0Vycm9yLmpzJztcblxuLyoqXG4gKiBSZXNvbHZlIG9yIHJlamVjdCBhIFByb21pc2UgYmFzZWQgb24gcmVzcG9uc2Ugc3RhdHVzLlxuICpcbiAqIEBwYXJhbSB7RnVuY3Rpb259IHJlc29sdmUgQSBmdW5jdGlvbiB0aGF0IHJlc29sdmVzIHRoZSBwcm9taXNlLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gcmVqZWN0IEEgZnVuY3Rpb24gdGhhdCByZWplY3RzIHRoZSBwcm9taXNlLlxuICogQHBhcmFtIHtvYmplY3R9IHJlc3BvbnNlIFRoZSByZXNwb25zZS5cbiAqXG4gKiBAcmV0dXJucyB7b2JqZWN0fSBUaGUgcmVzcG9uc2UuXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHNldHRsZShyZXNvbHZlLCByZWplY3QsIHJlc3BvbnNlKSB7XG4gIGNvbnN0IHZhbGlkYXRlU3RhdHVzID0gcmVzcG9uc2UuY29uZmlnLnZhbGlkYXRlU3RhdHVzO1xuICBpZiAoIXJlc3BvbnNlLnN0YXR1cyB8fCAhdmFsaWRhdGVTdGF0dXMgfHwgdmFsaWRhdGVTdGF0dXMocmVzcG9uc2Uuc3RhdHVzKSkge1xuICAgIHJlc29sdmUocmVzcG9uc2UpO1xuICB9IGVsc2Uge1xuICAgIHJlamVjdChuZXcgQXhpb3NFcnJvcihcbiAgICAgICdSZXF1ZXN0IGZhaWxlZCB3aXRoIHN0YXR1cyBjb2RlICcgKyByZXNwb25zZS5zdGF0dXMsXG4gICAgICBbQXhpb3NFcnJvci5FUlJfQkFEX1JFUVVFU1QsIEF4aW9zRXJyb3IuRVJSX0JBRF9SRVNQT05TRV1bTWF0aC5mbG9vcihyZXNwb25zZS5zdGF0dXMgLyAxMDApIC0gNF0sXG4gICAgICByZXNwb25zZS5jb25maWcsXG4gICAgICByZXNwb25zZS5yZXF1ZXN0LFxuICAgICAgcmVzcG9uc2VcbiAgICApKTtcbiAgfVxufVxuIiwiJ3VzZSBzdHJpY3QnO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBwYXJzZVByb3RvY29sKHVybCkge1xuICBjb25zdCBtYXRjaCA9IC9eKFstK1xcd117MSwyNX0pKDo/XFwvXFwvfDopLy5leGVjKHVybCk7XG4gIHJldHVybiBtYXRjaCAmJiBtYXRjaFsxXSB8fCAnJztcbn1cbiIsIid1c2Ugc3RyaWN0JztcblxuaW1wb3J0IHRyYW5zZm9ybURhdGEgZnJvbSAnLi90cmFuc2Zvcm1EYXRhLmpzJztcbmltcG9ydCBpc0NhbmNlbCBmcm9tICcuLi9jYW5jZWwvaXNDYW5jZWwuanMnO1xuaW1wb3J0IGRlZmF1bHRzIGZyb20gJy4uL2RlZmF1bHRzL2luZGV4LmpzJztcbmltcG9ydCBDYW5jZWxlZEVycm9yIGZyb20gJy4uL2NhbmNlbC9DYW5jZWxlZEVycm9yLmpzJztcbmltcG9ydCBBeGlvc0hlYWRlcnMgZnJvbSAnLi4vY29yZS9BeGlvc0hlYWRlcnMuanMnO1xuaW1wb3J0IGFkYXB0ZXJzIGZyb20gXCIuLi9hZGFwdGVycy9hZGFwdGVycy5qc1wiO1xuXG4vKipcbiAqIFRocm93cyBhIGBDYW5jZWxlZEVycm9yYCBpZiBjYW5jZWxsYXRpb24gaGFzIGJlZW4gcmVxdWVzdGVkLlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBjb25maWcgVGhlIGNvbmZpZyB0aGF0IGlzIHRvIGJlIHVzZWQgZm9yIHRoZSByZXF1ZXN0XG4gKlxuICogQHJldHVybnMge3ZvaWR9XG4gKi9cbmZ1bmN0aW9uIHRocm93SWZDYW5jZWxsYXRpb25SZXF1ZXN0ZWQoY29uZmlnKSB7XG4gIGlmIChjb25maWcuY2FuY2VsVG9rZW4pIHtcbiAgICBjb25maWcuY2FuY2VsVG9rZW4udGhyb3dJZlJlcXVlc3RlZCgpO1xuICB9XG5cbiAgaWYgKGNvbmZpZy5zaWduYWwgJiYgY29uZmlnLnNpZ25hbC5hYm9ydGVkKSB7XG4gICAgdGhyb3cgbmV3IENhbmNlbGVkRXJyb3IobnVsbCwgY29uZmlnKTtcbiAgfVxufVxuXG4vKipcbiAqIERpc3BhdGNoIGEgcmVxdWVzdCB0byB0aGUgc2VydmVyIHVzaW5nIHRoZSBjb25maWd1cmVkIGFkYXB0ZXIuXG4gKlxuICogQHBhcmFtIHtvYmplY3R9IGNvbmZpZyBUaGUgY29uZmlnIHRoYXQgaXMgdG8gYmUgdXNlZCBmb3IgdGhlIHJlcXVlc3RcbiAqXG4gKiBAcmV0dXJucyB7UHJvbWlzZX0gVGhlIFByb21pc2UgdG8gYmUgZnVsZmlsbGVkXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGRpc3BhdGNoUmVxdWVzdChjb25maWcpIHtcbiAgdGhyb3dJZkNhbmNlbGxhdGlvblJlcXVlc3RlZChjb25maWcpO1xuXG4gIGNvbmZpZy5oZWFkZXJzID0gQXhpb3NIZWFkZXJzLmZyb20oY29uZmlnLmhlYWRlcnMpO1xuXG4gIC8vIFRyYW5zZm9ybSByZXF1ZXN0IGRhdGFcbiAgY29uZmlnLmRhdGEgPSB0cmFuc2Zvcm1EYXRhLmNhbGwoXG4gICAgY29uZmlnLFxuICAgIGNvbmZpZy50cmFuc2Zvcm1SZXF1ZXN0XG4gICk7XG5cbiAgaWYgKFsncG9zdCcsICdwdXQnLCAncGF0Y2gnXS5pbmRleE9mKGNvbmZpZy5tZXRob2QpICE9PSAtMSkge1xuICAgIGNvbmZpZy5oZWFkZXJzLnNldENvbnRlbnRUeXBlKCdhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWQnLCBmYWxzZSk7XG4gIH1cblxuICBjb25zdCBhZGFwdGVyID0gYWRhcHRlcnMuZ2V0QWRhcHRlcihjb25maWcuYWRhcHRlciB8fCBkZWZhdWx0cy5hZGFwdGVyKTtcblxuICByZXR1cm4gYWRhcHRlcihjb25maWcpLnRoZW4oZnVuY3Rpb24gb25BZGFwdGVyUmVzb2x1dGlvbihyZXNwb25zZSkge1xuICAgIHRocm93SWZDYW5jZWxsYXRpb25SZXF1ZXN0ZWQoY29uZmlnKTtcblxuICAgIC8vIFRyYW5zZm9ybSByZXNwb25zZSBkYXRhXG4gICAgcmVzcG9uc2UuZGF0YSA9IHRyYW5zZm9ybURhdGEuY2FsbChcbiAgICAgIGNvbmZpZyxcbiAgICAgIGNvbmZpZy50cmFuc2Zvcm1SZXNwb25zZSxcbiAgICAgIHJlc3BvbnNlXG4gICAgKTtcblxuICAgIHJlc3BvbnNlLmhlYWRlcnMgPSBBeGlvc0hlYWRlcnMuZnJvbShyZXNwb25zZS5oZWFkZXJzKTtcblxuICAgIHJldHVybiByZXNwb25zZTtcbiAgfSwgZnVuY3Rpb24gb25BZGFwdGVyUmVqZWN0aW9uKHJlYXNvbikge1xuICAgIGlmICghaXNDYW5jZWwocmVhc29uKSkge1xuICAgICAgdGhyb3dJZkNhbmNlbGxhdGlvblJlcXVlc3RlZChjb25maWcpO1xuXG4gICAgICAvLyBUcmFuc2Zvcm0gcmVzcG9uc2UgZGF0YVxuICAgICAgaWYgKHJlYXNvbiAmJiByZWFzb24ucmVzcG9uc2UpIHtcbiAgICAgICAgcmVhc29uLnJlc3BvbnNlLmRhdGEgPSB0cmFuc2Zvcm1EYXRhLmNhbGwoXG4gICAgICAgICAgY29uZmlnLFxuICAgICAgICAgIGNvbmZpZy50cmFuc2Zvcm1SZXNwb25zZSxcbiAgICAgICAgICByZWFzb24ucmVzcG9uc2VcbiAgICAgICAgKTtcbiAgICAgICAgcmVhc29uLnJlc3BvbnNlLmhlYWRlcnMgPSBBeGlvc0hlYWRlcnMuZnJvbShyZWFzb24ucmVzcG9uc2UuaGVhZGVycyk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIFByb21pc2UucmVqZWN0KHJlYXNvbik7XG4gIH0pO1xufVxuIiwiJ3VzZSBzdHJpY3QnO1xuXG5pbXBvcnQgdXRpbHMgZnJvbSAnLi4vdXRpbHMuanMnO1xuaW1wb3J0IEF4aW9zSGVhZGVycyBmcm9tIFwiLi9BeGlvc0hlYWRlcnMuanNcIjtcblxuY29uc3QgaGVhZGVyc1RvT2JqZWN0ID0gKHRoaW5nKSA9PiB0aGluZyBpbnN0YW5jZW9mIEF4aW9zSGVhZGVycyA/IHRoaW5nLnRvSlNPTigpIDogdGhpbmc7XG5cbi8qKlxuICogQ29uZmlnLXNwZWNpZmljIG1lcmdlLWZ1bmN0aW9uIHdoaWNoIGNyZWF0ZXMgYSBuZXcgY29uZmlnLW9iamVjdFxuICogYnkgbWVyZ2luZyB0d28gY29uZmlndXJhdGlvbiBvYmplY3RzIHRvZ2V0aGVyLlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBjb25maWcxXG4gKiBAcGFyYW0ge09iamVjdH0gY29uZmlnMlxuICpcbiAqIEByZXR1cm5zIHtPYmplY3R9IE5ldyBvYmplY3QgcmVzdWx0aW5nIGZyb20gbWVyZ2luZyBjb25maWcyIHRvIGNvbmZpZzFcbiAqL1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gbWVyZ2VDb25maWcoY29uZmlnMSwgY29uZmlnMikge1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tcGFyYW0tcmVhc3NpZ25cbiAgY29uZmlnMiA9IGNvbmZpZzIgfHwge307XG4gIGNvbnN0IGNvbmZpZyA9IHt9O1xuXG4gIGZ1bmN0aW9uIGdldE1lcmdlZFZhbHVlKHRhcmdldCwgc291cmNlLCBjYXNlbGVzcykge1xuICAgIGlmICh1dGlscy5pc1BsYWluT2JqZWN0KHRhcmdldCkgJiYgdXRpbHMuaXNQbGFpbk9iamVjdChzb3VyY2UpKSB7XG4gICAgICByZXR1cm4gdXRpbHMubWVyZ2UuY2FsbCh7Y2FzZWxlc3N9LCB0YXJnZXQsIHNvdXJjZSk7XG4gICAgfSBlbHNlIGlmICh1dGlscy5pc1BsYWluT2JqZWN0KHNvdXJjZSkpIHtcbiAgICAgIHJldHVybiB1dGlscy5tZXJnZSh7fSwgc291cmNlKTtcbiAgICB9IGVsc2UgaWYgKHV0aWxzLmlzQXJyYXkoc291cmNlKSkge1xuICAgICAgcmV0dXJuIHNvdXJjZS5zbGljZSgpO1xuICAgIH1cbiAgICByZXR1cm4gc291cmNlO1xuICB9XG5cbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGNvbnNpc3RlbnQtcmV0dXJuXG4gIGZ1bmN0aW9uIG1lcmdlRGVlcFByb3BlcnRpZXMoYSwgYiwgY2FzZWxlc3MpIHtcbiAgICBpZiAoIXV0aWxzLmlzVW5kZWZpbmVkKGIpKSB7XG4gICAgICByZXR1cm4gZ2V0TWVyZ2VkVmFsdWUoYSwgYiwgY2FzZWxlc3MpO1xuICAgIH0gZWxzZSBpZiAoIXV0aWxzLmlzVW5kZWZpbmVkKGEpKSB7XG4gICAgICByZXR1cm4gZ2V0TWVyZ2VkVmFsdWUodW5kZWZpbmVkLCBhLCBjYXNlbGVzcyk7XG4gICAgfVxuICB9XG5cbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGNvbnNpc3RlbnQtcmV0dXJuXG4gIGZ1bmN0aW9uIHZhbHVlRnJvbUNvbmZpZzIoYSwgYikge1xuICAgIGlmICghdXRpbHMuaXNVbmRlZmluZWQoYikpIHtcbiAgICAgIHJldHVybiBnZXRNZXJnZWRWYWx1ZSh1bmRlZmluZWQsIGIpO1xuICAgIH1cbiAgfVxuXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBjb25zaXN0ZW50LXJldHVyblxuICBmdW5jdGlvbiBkZWZhdWx0VG9Db25maWcyKGEsIGIpIHtcbiAgICBpZiAoIXV0aWxzLmlzVW5kZWZpbmVkKGIpKSB7XG4gICAgICByZXR1cm4gZ2V0TWVyZ2VkVmFsdWUodW5kZWZpbmVkLCBiKTtcbiAgICB9IGVsc2UgaWYgKCF1dGlscy5pc1VuZGVmaW5lZChhKSkge1xuICAgICAgcmV0dXJuIGdldE1lcmdlZFZhbHVlKHVuZGVmaW5lZCwgYSk7XG4gICAgfVxuICB9XG5cbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGNvbnNpc3RlbnQtcmV0dXJuXG4gIGZ1bmN0aW9uIG1lcmdlRGlyZWN0S2V5cyhhLCBiLCBwcm9wKSB7XG4gICAgaWYgKHByb3AgaW4gY29uZmlnMikge1xuICAgICAgcmV0dXJuIGdldE1lcmdlZFZhbHVlKGEsIGIpO1xuICAgIH0gZWxzZSBpZiAocHJvcCBpbiBjb25maWcxKSB7XG4gICAgICByZXR1cm4gZ2V0TWVyZ2VkVmFsdWUodW5kZWZpbmVkLCBhKTtcbiAgICB9XG4gIH1cblxuICBjb25zdCBtZXJnZU1hcCA9IHtcbiAgICB1cmw6IHZhbHVlRnJvbUNvbmZpZzIsXG4gICAgbWV0aG9kOiB2YWx1ZUZyb21Db25maWcyLFxuICAgIGRhdGE6IHZhbHVlRnJvbUNvbmZpZzIsXG4gICAgYmFzZVVSTDogZGVmYXVsdFRvQ29uZmlnMixcbiAgICB0cmFuc2Zvcm1SZXF1ZXN0OiBkZWZhdWx0VG9Db25maWcyLFxuICAgIHRyYW5zZm9ybVJlc3BvbnNlOiBkZWZhdWx0VG9Db25maWcyLFxuICAgIHBhcmFtc1NlcmlhbGl6ZXI6IGRlZmF1bHRUb0NvbmZpZzIsXG4gICAgdGltZW91dDogZGVmYXVsdFRvQ29uZmlnMixcbiAgICB0aW1lb3V0TWVzc2FnZTogZGVmYXVsdFRvQ29uZmlnMixcbiAgICB3aXRoQ3JlZGVudGlhbHM6IGRlZmF1bHRUb0NvbmZpZzIsXG4gICAgYWRhcHRlcjogZGVmYXVsdFRvQ29uZmlnMixcbiAgICByZXNwb25zZVR5cGU6IGRlZmF1bHRUb0NvbmZpZzIsXG4gICAgeHNyZkNvb2tpZU5hbWU6IGRlZmF1bHRUb0NvbmZpZzIsXG4gICAgeHNyZkhlYWRlck5hbWU6IGRlZmF1bHRUb0NvbmZpZzIsXG4gICAgb25VcGxvYWRQcm9ncmVzczogZGVmYXVsdFRvQ29uZmlnMixcbiAgICBvbkRvd25sb2FkUHJvZ3Jlc3M6IGRlZmF1bHRUb0NvbmZpZzIsXG4gICAgZGVjb21wcmVzczogZGVmYXVsdFRvQ29uZmlnMixcbiAgICBtYXhDb250ZW50TGVuZ3RoOiBkZWZhdWx0VG9Db25maWcyLFxuICAgIG1heEJvZHlMZW5ndGg6IGRlZmF1bHRUb0NvbmZpZzIsXG4gICAgYmVmb3JlUmVkaXJlY3Q6IGRlZmF1bHRUb0NvbmZpZzIsXG4gICAgdHJhbnNwb3J0OiBkZWZhdWx0VG9Db25maWcyLFxuICAgIGh0dHBBZ2VudDogZGVmYXVsdFRvQ29uZmlnMixcbiAgICBodHRwc0FnZW50OiBkZWZhdWx0VG9Db25maWcyLFxuICAgIGNhbmNlbFRva2VuOiBkZWZhdWx0VG9Db25maWcyLFxuICAgIHNvY2tldFBhdGg6IGRlZmF1bHRUb0NvbmZpZzIsXG4gICAgcmVzcG9uc2VFbmNvZGluZzogZGVmYXVsdFRvQ29uZmlnMixcbiAgICB2YWxpZGF0ZVN0YXR1czogbWVyZ2VEaXJlY3RLZXlzLFxuICAgIGhlYWRlcnM6IChhLCBiKSA9PiBtZXJnZURlZXBQcm9wZXJ0aWVzKGhlYWRlcnNUb09iamVjdChhKSwgaGVhZGVyc1RvT2JqZWN0KGIpLCB0cnVlKVxuICB9O1xuXG4gIHV0aWxzLmZvckVhY2goT2JqZWN0LmtleXMoT2JqZWN0LmFzc2lnbih7fSwgY29uZmlnMSwgY29uZmlnMikpLCBmdW5jdGlvbiBjb21wdXRlQ29uZmlnVmFsdWUocHJvcCkge1xuICAgIGNvbnN0IG1lcmdlID0gbWVyZ2VNYXBbcHJvcF0gfHwgbWVyZ2VEZWVwUHJvcGVydGllcztcbiAgICBjb25zdCBjb25maWdWYWx1ZSA9IG1lcmdlKGNvbmZpZzFbcHJvcF0sIGNvbmZpZzJbcHJvcF0sIHByb3ApO1xuICAgICh1dGlscy5pc1VuZGVmaW5lZChjb25maWdWYWx1ZSkgJiYgbWVyZ2UgIT09IG1lcmdlRGlyZWN0S2V5cykgfHwgKGNvbmZpZ1twcm9wXSA9IGNvbmZpZ1ZhbHVlKTtcbiAgfSk7XG5cbiAgcmV0dXJuIGNvbmZpZztcbn1cbiIsImV4cG9ydCBjb25zdCBWRVJTSU9OID0gXCIxLjQuMFwiOyIsIid1c2Ugc3RyaWN0JztcblxuaW1wb3J0IHtWRVJTSU9OfSBmcm9tICcuLi9lbnYvZGF0YS5qcyc7XG5pbXBvcnQgQXhpb3NFcnJvciBmcm9tICcuLi9jb3JlL0F4aW9zRXJyb3IuanMnO1xuXG5jb25zdCB2YWxpZGF0b3JzID0ge307XG5cbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBmdW5jLW5hbWVzXG5bJ29iamVjdCcsICdib29sZWFuJywgJ251bWJlcicsICdmdW5jdGlvbicsICdzdHJpbmcnLCAnc3ltYm9sJ10uZm9yRWFjaCgodHlwZSwgaSkgPT4ge1xuICB2YWxpZGF0b3JzW3R5cGVdID0gZnVuY3Rpb24gdmFsaWRhdG9yKHRoaW5nKSB7XG4gICAgcmV0dXJuIHR5cGVvZiB0aGluZyA9PT0gdHlwZSB8fCAnYScgKyAoaSA8IDEgPyAnbiAnIDogJyAnKSArIHR5cGU7XG4gIH07XG59KTtcblxuY29uc3QgZGVwcmVjYXRlZFdhcm5pbmdzID0ge307XG5cbi8qKlxuICogVHJhbnNpdGlvbmFsIG9wdGlvbiB2YWxpZGF0b3JcbiAqXG4gKiBAcGFyYW0ge2Z1bmN0aW9ufGJvb2xlYW4/fSB2YWxpZGF0b3IgLSBzZXQgdG8gZmFsc2UgaWYgdGhlIHRyYW5zaXRpb25hbCBvcHRpb24gaGFzIGJlZW4gcmVtb3ZlZFxuICogQHBhcmFtIHtzdHJpbmc/fSB2ZXJzaW9uIC0gZGVwcmVjYXRlZCB2ZXJzaW9uIC8gcmVtb3ZlZCBzaW5jZSB2ZXJzaW9uXG4gKiBAcGFyYW0ge3N0cmluZz99IG1lc3NhZ2UgLSBzb21lIG1lc3NhZ2Ugd2l0aCBhZGRpdGlvbmFsIGluZm9cbiAqXG4gKiBAcmV0dXJucyB7ZnVuY3Rpb259XG4gKi9cbnZhbGlkYXRvcnMudHJhbnNpdGlvbmFsID0gZnVuY3Rpb24gdHJhbnNpdGlvbmFsKHZhbGlkYXRvciwgdmVyc2lvbiwgbWVzc2FnZSkge1xuICBmdW5jdGlvbiBmb3JtYXRNZXNzYWdlKG9wdCwgZGVzYykge1xuICAgIHJldHVybiAnW0F4aW9zIHYnICsgVkVSU0lPTiArICddIFRyYW5zaXRpb25hbCBvcHRpb24gXFwnJyArIG9wdCArICdcXCcnICsgZGVzYyArIChtZXNzYWdlID8gJy4gJyArIG1lc3NhZ2UgOiAnJyk7XG4gIH1cblxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZnVuYy1uYW1lc1xuICByZXR1cm4gKHZhbHVlLCBvcHQsIG9wdHMpID0+IHtcbiAgICBpZiAodmFsaWRhdG9yID09PSBmYWxzZSkge1xuICAgICAgdGhyb3cgbmV3IEF4aW9zRXJyb3IoXG4gICAgICAgIGZvcm1hdE1lc3NhZ2Uob3B0LCAnIGhhcyBiZWVuIHJlbW92ZWQnICsgKHZlcnNpb24gPyAnIGluICcgKyB2ZXJzaW9uIDogJycpKSxcbiAgICAgICAgQXhpb3NFcnJvci5FUlJfREVQUkVDQVRFRFxuICAgICAgKTtcbiAgICB9XG5cbiAgICBpZiAodmVyc2lvbiAmJiAhZGVwcmVjYXRlZFdhcm5pbmdzW29wdF0pIHtcbiAgICAgIGRlcHJlY2F0ZWRXYXJuaW5nc1tvcHRdID0gdHJ1ZTtcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1jb25zb2xlXG4gICAgICBjb25zb2xlLndhcm4oXG4gICAgICAgIGZvcm1hdE1lc3NhZ2UoXG4gICAgICAgICAgb3B0LFxuICAgICAgICAgICcgaGFzIGJlZW4gZGVwcmVjYXRlZCBzaW5jZSB2JyArIHZlcnNpb24gKyAnIGFuZCB3aWxsIGJlIHJlbW92ZWQgaW4gdGhlIG5lYXIgZnV0dXJlJ1xuICAgICAgICApXG4gICAgICApO1xuICAgIH1cblxuICAgIHJldHVybiB2YWxpZGF0b3IgPyB2YWxpZGF0b3IodmFsdWUsIG9wdCwgb3B0cykgOiB0cnVlO1xuICB9O1xufTtcblxuLyoqXG4gKiBBc3NlcnQgb2JqZWN0J3MgcHJvcGVydGllcyB0eXBlXG4gKlxuICogQHBhcmFtIHtvYmplY3R9IG9wdGlvbnNcbiAqIEBwYXJhbSB7b2JqZWN0fSBzY2hlbWFcbiAqIEBwYXJhbSB7Ym9vbGVhbj99IGFsbG93VW5rbm93blxuICpcbiAqIEByZXR1cm5zIHtvYmplY3R9XG4gKi9cblxuZnVuY3Rpb24gYXNzZXJ0T3B0aW9ucyhvcHRpb25zLCBzY2hlbWEsIGFsbG93VW5rbm93bikge1xuICBpZiAodHlwZW9mIG9wdGlvbnMgIT09ICdvYmplY3QnKSB7XG4gICAgdGhyb3cgbmV3IEF4aW9zRXJyb3IoJ29wdGlvbnMgbXVzdCBiZSBhbiBvYmplY3QnLCBBeGlvc0Vycm9yLkVSUl9CQURfT1BUSU9OX1ZBTFVFKTtcbiAgfVxuICBjb25zdCBrZXlzID0gT2JqZWN0LmtleXMob3B0aW9ucyk7XG4gIGxldCBpID0ga2V5cy5sZW5ndGg7XG4gIHdoaWxlIChpLS0gPiAwKSB7XG4gICAgY29uc3Qgb3B0ID0ga2V5c1tpXTtcbiAgICBjb25zdCB2YWxpZGF0b3IgPSBzY2hlbWFbb3B0XTtcbiAgICBpZiAodmFsaWRhdG9yKSB7XG4gICAgICBjb25zdCB2YWx1ZSA9IG9wdGlvbnNbb3B0XTtcbiAgICAgIGNvbnN0IHJlc3VsdCA9IHZhbHVlID09PSB1bmRlZmluZWQgfHwgdmFsaWRhdG9yKHZhbHVlLCBvcHQsIG9wdGlvbnMpO1xuICAgICAgaWYgKHJlc3VsdCAhPT0gdHJ1ZSkge1xuICAgICAgICB0aHJvdyBuZXcgQXhpb3NFcnJvcignb3B0aW9uICcgKyBvcHQgKyAnIG11c3QgYmUgJyArIHJlc3VsdCwgQXhpb3NFcnJvci5FUlJfQkFEX09QVElPTl9WQUxVRSk7XG4gICAgICB9XG4gICAgICBjb250aW51ZTtcbiAgICB9XG4gICAgaWYgKGFsbG93VW5rbm93biAhPT0gdHJ1ZSkge1xuICAgICAgdGhyb3cgbmV3IEF4aW9zRXJyb3IoJ1Vua25vd24gb3B0aW9uICcgKyBvcHQsIEF4aW9zRXJyb3IuRVJSX0JBRF9PUFRJT04pO1xuICAgIH1cbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCB7XG4gIGFzc2VydE9wdGlvbnMsXG4gIHZhbGlkYXRvcnNcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbmltcG9ydCB1dGlscyBmcm9tICcuLy4uL3V0aWxzLmpzJztcbmltcG9ydCBidWlsZFVSTCBmcm9tICcuLi9oZWxwZXJzL2J1aWxkVVJMLmpzJztcbmltcG9ydCBJbnRlcmNlcHRvck1hbmFnZXIgZnJvbSAnLi9JbnRlcmNlcHRvck1hbmFnZXIuanMnO1xuaW1wb3J0IGRpc3BhdGNoUmVxdWVzdCBmcm9tICcuL2Rpc3BhdGNoUmVxdWVzdC5qcyc7XG5pbXBvcnQgbWVyZ2VDb25maWcgZnJvbSAnLi9tZXJnZUNvbmZpZy5qcyc7XG5pbXBvcnQgYnVpbGRGdWxsUGF0aCBmcm9tICcuL2J1aWxkRnVsbFBhdGguanMnO1xuaW1wb3J0IHZhbGlkYXRvciBmcm9tICcuLi9oZWxwZXJzL3ZhbGlkYXRvci5qcyc7XG5pbXBvcnQgQXhpb3NIZWFkZXJzIGZyb20gJy4vQXhpb3NIZWFkZXJzLmpzJztcblxuY29uc3QgdmFsaWRhdG9ycyA9IHZhbGlkYXRvci52YWxpZGF0b3JzO1xuXG4vKipcbiAqIENyZWF0ZSBhIG5ldyBpbnN0YW5jZSBvZiBBeGlvc1xuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBpbnN0YW5jZUNvbmZpZyBUaGUgZGVmYXVsdCBjb25maWcgZm9yIHRoZSBpbnN0YW5jZVxuICpcbiAqIEByZXR1cm4ge0F4aW9zfSBBIG5ldyBpbnN0YW5jZSBvZiBBeGlvc1xuICovXG5jbGFzcyBBeGlvcyB7XG4gIGNvbnN0cnVjdG9yKGluc3RhbmNlQ29uZmlnKSB7XG4gICAgdGhpcy5kZWZhdWx0cyA9IGluc3RhbmNlQ29uZmlnO1xuICAgIHRoaXMuaW50ZXJjZXB0b3JzID0ge1xuICAgICAgcmVxdWVzdDogbmV3IEludGVyY2VwdG9yTWFuYWdlcigpLFxuICAgICAgcmVzcG9uc2U6IG5ldyBJbnRlcmNlcHRvck1hbmFnZXIoKVxuICAgIH07XG4gIH1cblxuICAvKipcbiAgICogRGlzcGF0Y2ggYSByZXF1ZXN0XG4gICAqXG4gICAqIEBwYXJhbSB7U3RyaW5nfE9iamVjdH0gY29uZmlnT3JVcmwgVGhlIGNvbmZpZyBzcGVjaWZpYyBmb3IgdGhpcyByZXF1ZXN0IChtZXJnZWQgd2l0aCB0aGlzLmRlZmF1bHRzKVxuICAgKiBAcGFyYW0gez9PYmplY3R9IGNvbmZpZ1xuICAgKlxuICAgKiBAcmV0dXJucyB7UHJvbWlzZX0gVGhlIFByb21pc2UgdG8gYmUgZnVsZmlsbGVkXG4gICAqL1xuICByZXF1ZXN0KGNvbmZpZ09yVXJsLCBjb25maWcpIHtcbiAgICAvKmVzbGludCBuby1wYXJhbS1yZWFzc2lnbjowKi9cbiAgICAvLyBBbGxvdyBmb3IgYXhpb3MoJ2V4YW1wbGUvdXJsJ1ssIGNvbmZpZ10pIGEgbGEgZmV0Y2ggQVBJXG4gICAgaWYgKHR5cGVvZiBjb25maWdPclVybCA9PT0gJ3N0cmluZycpIHtcbiAgICAgIGNvbmZpZyA9IGNvbmZpZyB8fCB7fTtcbiAgICAgIGNvbmZpZy51cmwgPSBjb25maWdPclVybDtcbiAgICB9IGVsc2Uge1xuICAgICAgY29uZmlnID0gY29uZmlnT3JVcmwgfHwge307XG4gICAgfVxuXG4gICAgY29uZmlnID0gbWVyZ2VDb25maWcodGhpcy5kZWZhdWx0cywgY29uZmlnKTtcblxuICAgIGNvbnN0IHt0cmFuc2l0aW9uYWwsIHBhcmFtc1NlcmlhbGl6ZXIsIGhlYWRlcnN9ID0gY29uZmlnO1xuXG4gICAgaWYgKHRyYW5zaXRpb25hbCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICB2YWxpZGF0b3IuYXNzZXJ0T3B0aW9ucyh0cmFuc2l0aW9uYWwsIHtcbiAgICAgICAgc2lsZW50SlNPTlBhcnNpbmc6IHZhbGlkYXRvcnMudHJhbnNpdGlvbmFsKHZhbGlkYXRvcnMuYm9vbGVhbiksXG4gICAgICAgIGZvcmNlZEpTT05QYXJzaW5nOiB2YWxpZGF0b3JzLnRyYW5zaXRpb25hbCh2YWxpZGF0b3JzLmJvb2xlYW4pLFxuICAgICAgICBjbGFyaWZ5VGltZW91dEVycm9yOiB2YWxpZGF0b3JzLnRyYW5zaXRpb25hbCh2YWxpZGF0b3JzLmJvb2xlYW4pXG4gICAgICB9LCBmYWxzZSk7XG4gICAgfVxuXG4gICAgaWYgKHBhcmFtc1NlcmlhbGl6ZXIgIT0gbnVsbCkge1xuICAgICAgaWYgKHV0aWxzLmlzRnVuY3Rpb24ocGFyYW1zU2VyaWFsaXplcikpIHtcbiAgICAgICAgY29uZmlnLnBhcmFtc1NlcmlhbGl6ZXIgPSB7XG4gICAgICAgICAgc2VyaWFsaXplOiBwYXJhbXNTZXJpYWxpemVyXG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHZhbGlkYXRvci5hc3NlcnRPcHRpb25zKHBhcmFtc1NlcmlhbGl6ZXIsIHtcbiAgICAgICAgICBlbmNvZGU6IHZhbGlkYXRvcnMuZnVuY3Rpb24sXG4gICAgICAgICAgc2VyaWFsaXplOiB2YWxpZGF0b3JzLmZ1bmN0aW9uXG4gICAgICAgIH0sIHRydWUpO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8vIFNldCBjb25maWcubWV0aG9kXG4gICAgY29uZmlnLm1ldGhvZCA9IChjb25maWcubWV0aG9kIHx8IHRoaXMuZGVmYXVsdHMubWV0aG9kIHx8ICdnZXQnKS50b0xvd2VyQ2FzZSgpO1xuXG4gICAgbGV0IGNvbnRleHRIZWFkZXJzO1xuXG4gICAgLy8gRmxhdHRlbiBoZWFkZXJzXG4gICAgY29udGV4dEhlYWRlcnMgPSBoZWFkZXJzICYmIHV0aWxzLm1lcmdlKFxuICAgICAgaGVhZGVycy5jb21tb24sXG4gICAgICBoZWFkZXJzW2NvbmZpZy5tZXRob2RdXG4gICAgKTtcblxuICAgIGNvbnRleHRIZWFkZXJzICYmIHV0aWxzLmZvckVhY2goXG4gICAgICBbJ2RlbGV0ZScsICdnZXQnLCAnaGVhZCcsICdwb3N0JywgJ3B1dCcsICdwYXRjaCcsICdjb21tb24nXSxcbiAgICAgIChtZXRob2QpID0+IHtcbiAgICAgICAgZGVsZXRlIGhlYWRlcnNbbWV0aG9kXTtcbiAgICAgIH1cbiAgICApO1xuXG4gICAgY29uZmlnLmhlYWRlcnMgPSBBeGlvc0hlYWRlcnMuY29uY2F0KGNvbnRleHRIZWFkZXJzLCBoZWFkZXJzKTtcblxuICAgIC8vIGZpbHRlciBvdXQgc2tpcHBlZCBpbnRlcmNlcHRvcnNcbiAgICBjb25zdCByZXF1ZXN0SW50ZXJjZXB0b3JDaGFpbiA9IFtdO1xuICAgIGxldCBzeW5jaHJvbm91c1JlcXVlc3RJbnRlcmNlcHRvcnMgPSB0cnVlO1xuICAgIHRoaXMuaW50ZXJjZXB0b3JzLnJlcXVlc3QuZm9yRWFjaChmdW5jdGlvbiB1bnNoaWZ0UmVxdWVzdEludGVyY2VwdG9ycyhpbnRlcmNlcHRvcikge1xuICAgICAgaWYgKHR5cGVvZiBpbnRlcmNlcHRvci5ydW5XaGVuID09PSAnZnVuY3Rpb24nICYmIGludGVyY2VwdG9yLnJ1bldoZW4oY29uZmlnKSA9PT0gZmFsc2UpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBzeW5jaHJvbm91c1JlcXVlc3RJbnRlcmNlcHRvcnMgPSBzeW5jaHJvbm91c1JlcXVlc3RJbnRlcmNlcHRvcnMgJiYgaW50ZXJjZXB0b3Iuc3luY2hyb25vdXM7XG5cbiAgICAgIHJlcXVlc3RJbnRlcmNlcHRvckNoYWluLnVuc2hpZnQoaW50ZXJjZXB0b3IuZnVsZmlsbGVkLCBpbnRlcmNlcHRvci5yZWplY3RlZCk7XG4gICAgfSk7XG5cbiAgICBjb25zdCByZXNwb25zZUludGVyY2VwdG9yQ2hhaW4gPSBbXTtcbiAgICB0aGlzLmludGVyY2VwdG9ycy5yZXNwb25zZS5mb3JFYWNoKGZ1bmN0aW9uIHB1c2hSZXNwb25zZUludGVyY2VwdG9ycyhpbnRlcmNlcHRvcikge1xuICAgICAgcmVzcG9uc2VJbnRlcmNlcHRvckNoYWluLnB1c2goaW50ZXJjZXB0b3IuZnVsZmlsbGVkLCBpbnRlcmNlcHRvci5yZWplY3RlZCk7XG4gICAgfSk7XG5cbiAgICBsZXQgcHJvbWlzZTtcbiAgICBsZXQgaSA9IDA7XG4gICAgbGV0IGxlbjtcblxuICAgIGlmICghc3luY2hyb25vdXNSZXF1ZXN0SW50ZXJjZXB0b3JzKSB7XG4gICAgICBjb25zdCBjaGFpbiA9IFtkaXNwYXRjaFJlcXVlc3QuYmluZCh0aGlzKSwgdW5kZWZpbmVkXTtcbiAgICAgIGNoYWluLnVuc2hpZnQuYXBwbHkoY2hhaW4sIHJlcXVlc3RJbnRlcmNlcHRvckNoYWluKTtcbiAgICAgIGNoYWluLnB1c2guYXBwbHkoY2hhaW4sIHJlc3BvbnNlSW50ZXJjZXB0b3JDaGFpbik7XG4gICAgICBsZW4gPSBjaGFpbi5sZW5ndGg7XG5cbiAgICAgIHByb21pc2UgPSBQcm9taXNlLnJlc29sdmUoY29uZmlnKTtcblxuICAgICAgd2hpbGUgKGkgPCBsZW4pIHtcbiAgICAgICAgcHJvbWlzZSA9IHByb21pc2UudGhlbihjaGFpbltpKytdLCBjaGFpbltpKytdKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHByb21pc2U7XG4gICAgfVxuXG4gICAgbGVuID0gcmVxdWVzdEludGVyY2VwdG9yQ2hhaW4ubGVuZ3RoO1xuXG4gICAgbGV0IG5ld0NvbmZpZyA9IGNvbmZpZztcblxuICAgIGkgPSAwO1xuXG4gICAgd2hpbGUgKGkgPCBsZW4pIHtcbiAgICAgIGNvbnN0IG9uRnVsZmlsbGVkID0gcmVxdWVzdEludGVyY2VwdG9yQ2hhaW5baSsrXTtcbiAgICAgIGNvbnN0IG9uUmVqZWN0ZWQgPSByZXF1ZXN0SW50ZXJjZXB0b3JDaGFpbltpKytdO1xuICAgICAgdHJ5IHtcbiAgICAgICAgbmV3Q29uZmlnID0gb25GdWxmaWxsZWQobmV3Q29uZmlnKTtcbiAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgIG9uUmVqZWN0ZWQuY2FsbCh0aGlzLCBlcnJvcik7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgIH1cblxuICAgIHRyeSB7XG4gICAgICBwcm9taXNlID0gZGlzcGF0Y2hSZXF1ZXN0LmNhbGwodGhpcywgbmV3Q29uZmlnKTtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgcmV0dXJuIFByb21pc2UucmVqZWN0KGVycm9yKTtcbiAgICB9XG5cbiAgICBpID0gMDtcbiAgICBsZW4gPSByZXNwb25zZUludGVyY2VwdG9yQ2hhaW4ubGVuZ3RoO1xuXG4gICAgd2hpbGUgKGkgPCBsZW4pIHtcbiAgICAgIHByb21pc2UgPSBwcm9taXNlLnRoZW4ocmVzcG9uc2VJbnRlcmNlcHRvckNoYWluW2krK10sIHJlc3BvbnNlSW50ZXJjZXB0b3JDaGFpbltpKytdKTtcbiAgICB9XG5cbiAgICByZXR1cm4gcHJvbWlzZTtcbiAgfVxuXG4gIGdldFVyaShjb25maWcpIHtcbiAgICBjb25maWcgPSBtZXJnZUNvbmZpZyh0aGlzLmRlZmF1bHRzLCBjb25maWcpO1xuICAgIGNvbnN0IGZ1bGxQYXRoID0gYnVpbGRGdWxsUGF0aChjb25maWcuYmFzZVVSTCwgY29uZmlnLnVybCk7XG4gICAgcmV0dXJuIGJ1aWxkVVJMKGZ1bGxQYXRoLCBjb25maWcucGFyYW1zLCBjb25maWcucGFyYW1zU2VyaWFsaXplcik7XG4gIH1cbn1cblxuLy8gUHJvdmlkZSBhbGlhc2VzIGZvciBzdXBwb3J0ZWQgcmVxdWVzdCBtZXRob2RzXG51dGlscy5mb3JFYWNoKFsnZGVsZXRlJywgJ2dldCcsICdoZWFkJywgJ29wdGlvbnMnXSwgZnVuY3Rpb24gZm9yRWFjaE1ldGhvZE5vRGF0YShtZXRob2QpIHtcbiAgLyplc2xpbnQgZnVuYy1uYW1lczowKi9cbiAgQXhpb3MucHJvdG90eXBlW21ldGhvZF0gPSBmdW5jdGlvbih1cmwsIGNvbmZpZykge1xuICAgIHJldHVybiB0aGlzLnJlcXVlc3QobWVyZ2VDb25maWcoY29uZmlnIHx8IHt9LCB7XG4gICAgICBtZXRob2QsXG4gICAgICB1cmwsXG4gICAgICBkYXRhOiAoY29uZmlnIHx8IHt9KS5kYXRhXG4gICAgfSkpO1xuICB9O1xufSk7XG5cbnV0aWxzLmZvckVhY2goWydwb3N0JywgJ3B1dCcsICdwYXRjaCddLCBmdW5jdGlvbiBmb3JFYWNoTWV0aG9kV2l0aERhdGEobWV0aG9kKSB7XG4gIC8qZXNsaW50IGZ1bmMtbmFtZXM6MCovXG5cbiAgZnVuY3Rpb24gZ2VuZXJhdGVIVFRQTWV0aG9kKGlzRm9ybSkge1xuICAgIHJldHVybiBmdW5jdGlvbiBodHRwTWV0aG9kKHVybCwgZGF0YSwgY29uZmlnKSB7XG4gICAgICByZXR1cm4gdGhpcy5yZXF1ZXN0KG1lcmdlQ29uZmlnKGNvbmZpZyB8fCB7fSwge1xuICAgICAgICBtZXRob2QsXG4gICAgICAgIGhlYWRlcnM6IGlzRm9ybSA/IHtcbiAgICAgICAgICAnQ29udGVudC1UeXBlJzogJ211bHRpcGFydC9mb3JtLWRhdGEnXG4gICAgICAgIH0gOiB7fSxcbiAgICAgICAgdXJsLFxuICAgICAgICBkYXRhXG4gICAgICB9KSk7XG4gICAgfTtcbiAgfVxuXG4gIEF4aW9zLnByb3RvdHlwZVttZXRob2RdID0gZ2VuZXJhdGVIVFRQTWV0aG9kKCk7XG5cbiAgQXhpb3MucHJvdG90eXBlW21ldGhvZCArICdGb3JtJ10gPSBnZW5lcmF0ZUhUVFBNZXRob2QodHJ1ZSk7XG59KTtcblxuZXhwb3J0IGRlZmF1bHQgQXhpb3M7XG4iLCIndXNlIHN0cmljdCc7XG5cbmltcG9ydCBDYW5jZWxlZEVycm9yIGZyb20gJy4vQ2FuY2VsZWRFcnJvci5qcyc7XG5cbi8qKlxuICogQSBgQ2FuY2VsVG9rZW5gIGlzIGFuIG9iamVjdCB0aGF0IGNhbiBiZSB1c2VkIHRvIHJlcXVlc3QgY2FuY2VsbGF0aW9uIG9mIGFuIG9wZXJhdGlvbi5cbiAqXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBleGVjdXRvciBUaGUgZXhlY3V0b3IgZnVuY3Rpb24uXG4gKlxuICogQHJldHVybnMge0NhbmNlbFRva2VufVxuICovXG5jbGFzcyBDYW5jZWxUb2tlbiB7XG4gIGNvbnN0cnVjdG9yKGV4ZWN1dG9yKSB7XG4gICAgaWYgKHR5cGVvZiBleGVjdXRvciAhPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignZXhlY3V0b3IgbXVzdCBiZSBhIGZ1bmN0aW9uLicpO1xuICAgIH1cblxuICAgIGxldCByZXNvbHZlUHJvbWlzZTtcblxuICAgIHRoaXMucHJvbWlzZSA9IG5ldyBQcm9taXNlKGZ1bmN0aW9uIHByb21pc2VFeGVjdXRvcihyZXNvbHZlKSB7XG4gICAgICByZXNvbHZlUHJvbWlzZSA9IHJlc29sdmU7XG4gICAgfSk7XG5cbiAgICBjb25zdCB0b2tlbiA9IHRoaXM7XG5cbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZnVuYy1uYW1lc1xuICAgIHRoaXMucHJvbWlzZS50aGVuKGNhbmNlbCA9PiB7XG4gICAgICBpZiAoIXRva2VuLl9saXN0ZW5lcnMpIHJldHVybjtcblxuICAgICAgbGV0IGkgPSB0b2tlbi5fbGlzdGVuZXJzLmxlbmd0aDtcblxuICAgICAgd2hpbGUgKGktLSA+IDApIHtcbiAgICAgICAgdG9rZW4uX2xpc3RlbmVyc1tpXShjYW5jZWwpO1xuICAgICAgfVxuICAgICAgdG9rZW4uX2xpc3RlbmVycyA9IG51bGw7XG4gICAgfSk7XG5cbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZnVuYy1uYW1lc1xuICAgIHRoaXMucHJvbWlzZS50aGVuID0gb25mdWxmaWxsZWQgPT4ge1xuICAgICAgbGV0IF9yZXNvbHZlO1xuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGZ1bmMtbmFtZXNcbiAgICAgIGNvbnN0IHByb21pc2UgPSBuZXcgUHJvbWlzZShyZXNvbHZlID0+IHtcbiAgICAgICAgdG9rZW4uc3Vic2NyaWJlKHJlc29sdmUpO1xuICAgICAgICBfcmVzb2x2ZSA9IHJlc29sdmU7XG4gICAgICB9KS50aGVuKG9uZnVsZmlsbGVkKTtcblxuICAgICAgcHJvbWlzZS5jYW5jZWwgPSBmdW5jdGlvbiByZWplY3QoKSB7XG4gICAgICAgIHRva2VuLnVuc3Vic2NyaWJlKF9yZXNvbHZlKTtcbiAgICAgIH07XG5cbiAgICAgIHJldHVybiBwcm9taXNlO1xuICAgIH07XG5cbiAgICBleGVjdXRvcihmdW5jdGlvbiBjYW5jZWwobWVzc2FnZSwgY29uZmlnLCByZXF1ZXN0KSB7XG4gICAgICBpZiAodG9rZW4ucmVhc29uKSB7XG4gICAgICAgIC8vIENhbmNlbGxhdGlvbiBoYXMgYWxyZWFkeSBiZWVuIHJlcXVlc3RlZFxuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIHRva2VuLnJlYXNvbiA9IG5ldyBDYW5jZWxlZEVycm9yKG1lc3NhZ2UsIGNvbmZpZywgcmVxdWVzdCk7XG4gICAgICByZXNvbHZlUHJvbWlzZSh0b2tlbi5yZWFzb24pO1xuICAgIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIFRocm93cyBhIGBDYW5jZWxlZEVycm9yYCBpZiBjYW5jZWxsYXRpb24gaGFzIGJlZW4gcmVxdWVzdGVkLlxuICAgKi9cbiAgdGhyb3dJZlJlcXVlc3RlZCgpIHtcbiAgICBpZiAodGhpcy5yZWFzb24pIHtcbiAgICAgIHRocm93IHRoaXMucmVhc29uO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBTdWJzY3JpYmUgdG8gdGhlIGNhbmNlbCBzaWduYWxcbiAgICovXG5cbiAgc3Vic2NyaWJlKGxpc3RlbmVyKSB7XG4gICAgaWYgKHRoaXMucmVhc29uKSB7XG4gICAgICBsaXN0ZW5lcih0aGlzLnJlYXNvbik7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaWYgKHRoaXMuX2xpc3RlbmVycykge1xuICAgICAgdGhpcy5fbGlzdGVuZXJzLnB1c2gobGlzdGVuZXIpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLl9saXN0ZW5lcnMgPSBbbGlzdGVuZXJdO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBVbnN1YnNjcmliZSBmcm9tIHRoZSBjYW5jZWwgc2lnbmFsXG4gICAqL1xuXG4gIHVuc3Vic2NyaWJlKGxpc3RlbmVyKSB7XG4gICAgaWYgKCF0aGlzLl9saXN0ZW5lcnMpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgY29uc3QgaW5kZXggPSB0aGlzLl9saXN0ZW5lcnMuaW5kZXhPZihsaXN0ZW5lcik7XG4gICAgaWYgKGluZGV4ICE9PSAtMSkge1xuICAgICAgdGhpcy5fbGlzdGVuZXJzLnNwbGljZShpbmRleCwgMSk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgYW4gb2JqZWN0IHRoYXQgY29udGFpbnMgYSBuZXcgYENhbmNlbFRva2VuYCBhbmQgYSBmdW5jdGlvbiB0aGF0LCB3aGVuIGNhbGxlZCxcbiAgICogY2FuY2VscyB0aGUgYENhbmNlbFRva2VuYC5cbiAgICovXG4gIHN0YXRpYyBzb3VyY2UoKSB7XG4gICAgbGV0IGNhbmNlbDtcbiAgICBjb25zdCB0b2tlbiA9IG5ldyBDYW5jZWxUb2tlbihmdW5jdGlvbiBleGVjdXRvcihjKSB7XG4gICAgICBjYW5jZWwgPSBjO1xuICAgIH0pO1xuICAgIHJldHVybiB7XG4gICAgICB0b2tlbixcbiAgICAgIGNhbmNlbFxuICAgIH07XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgQ2FuY2VsVG9rZW47XG4iLCJjb25zdCBIdHRwU3RhdHVzQ29kZSA9IHtcbiAgQ29udGludWU6IDEwMCxcbiAgU3dpdGNoaW5nUHJvdG9jb2xzOiAxMDEsXG4gIFByb2Nlc3Npbmc6IDEwMixcbiAgRWFybHlIaW50czogMTAzLFxuICBPazogMjAwLFxuICBDcmVhdGVkOiAyMDEsXG4gIEFjY2VwdGVkOiAyMDIsXG4gIE5vbkF1dGhvcml0YXRpdmVJbmZvcm1hdGlvbjogMjAzLFxuICBOb0NvbnRlbnQ6IDIwNCxcbiAgUmVzZXRDb250ZW50OiAyMDUsXG4gIFBhcnRpYWxDb250ZW50OiAyMDYsXG4gIE11bHRpU3RhdHVzOiAyMDcsXG4gIEFscmVhZHlSZXBvcnRlZDogMjA4LFxuICBJbVVzZWQ6IDIyNixcbiAgTXVsdGlwbGVDaG9pY2VzOiAzMDAsXG4gIE1vdmVkUGVybWFuZW50bHk6IDMwMSxcbiAgRm91bmQ6IDMwMixcbiAgU2VlT3RoZXI6IDMwMyxcbiAgTm90TW9kaWZpZWQ6IDMwNCxcbiAgVXNlUHJveHk6IDMwNSxcbiAgVW51c2VkOiAzMDYsXG4gIFRlbXBvcmFyeVJlZGlyZWN0OiAzMDcsXG4gIFBlcm1hbmVudFJlZGlyZWN0OiAzMDgsXG4gIEJhZFJlcXVlc3Q6IDQwMCxcbiAgVW5hdXRob3JpemVkOiA0MDEsXG4gIFBheW1lbnRSZXF1aXJlZDogNDAyLFxuICBGb3JiaWRkZW46IDQwMyxcbiAgTm90Rm91bmQ6IDQwNCxcbiAgTWV0aG9kTm90QWxsb3dlZDogNDA1LFxuICBOb3RBY2NlcHRhYmxlOiA0MDYsXG4gIFByb3h5QXV0aGVudGljYXRpb25SZXF1aXJlZDogNDA3LFxuICBSZXF1ZXN0VGltZW91dDogNDA4LFxuICBDb25mbGljdDogNDA5LFxuICBHb25lOiA0MTAsXG4gIExlbmd0aFJlcXVpcmVkOiA0MTEsXG4gIFByZWNvbmRpdGlvbkZhaWxlZDogNDEyLFxuICBQYXlsb2FkVG9vTGFyZ2U6IDQxMyxcbiAgVXJpVG9vTG9uZzogNDE0LFxuICBVbnN1cHBvcnRlZE1lZGlhVHlwZTogNDE1LFxuICBSYW5nZU5vdFNhdGlzZmlhYmxlOiA0MTYsXG4gIEV4cGVjdGF0aW9uRmFpbGVkOiA0MTcsXG4gIEltQVRlYXBvdDogNDE4LFxuICBNaXNkaXJlY3RlZFJlcXVlc3Q6IDQyMSxcbiAgVW5wcm9jZXNzYWJsZUVudGl0eTogNDIyLFxuICBMb2NrZWQ6IDQyMyxcbiAgRmFpbGVkRGVwZW5kZW5jeTogNDI0LFxuICBUb29FYXJseTogNDI1LFxuICBVcGdyYWRlUmVxdWlyZWQ6IDQyNixcbiAgUHJlY29uZGl0aW9uUmVxdWlyZWQ6IDQyOCxcbiAgVG9vTWFueVJlcXVlc3RzOiA0MjksXG4gIFJlcXVlc3RIZWFkZXJGaWVsZHNUb29MYXJnZTogNDMxLFxuICBVbmF2YWlsYWJsZUZvckxlZ2FsUmVhc29uczogNDUxLFxuICBJbnRlcm5hbFNlcnZlckVycm9yOiA1MDAsXG4gIE5vdEltcGxlbWVudGVkOiA1MDEsXG4gIEJhZEdhdGV3YXk6IDUwMixcbiAgU2VydmljZVVuYXZhaWxhYmxlOiA1MDMsXG4gIEdhdGV3YXlUaW1lb3V0OiA1MDQsXG4gIEh0dHBWZXJzaW9uTm90U3VwcG9ydGVkOiA1MDUsXG4gIFZhcmlhbnRBbHNvTmVnb3RpYXRlczogNTA2LFxuICBJbnN1ZmZpY2llbnRTdG9yYWdlOiA1MDcsXG4gIExvb3BEZXRlY3RlZDogNTA4LFxuICBOb3RFeHRlbmRlZDogNTEwLFxuICBOZXR3b3JrQXV0aGVudGljYXRpb25SZXF1aXJlZDogNTExLFxufTtcblxuT2JqZWN0LmVudHJpZXMoSHR0cFN0YXR1c0NvZGUpLmZvckVhY2goKFtrZXksIHZhbHVlXSkgPT4ge1xuICBIdHRwU3RhdHVzQ29kZVt2YWx1ZV0gPSBrZXk7XG59KTtcblxuZXhwb3J0IGRlZmF1bHQgSHR0cFN0YXR1c0NvZGU7XG4iLCIndXNlIHN0cmljdCc7XG5cbmltcG9ydCB1dGlscyBmcm9tICcuL3V0aWxzLmpzJztcbmltcG9ydCBiaW5kIGZyb20gJy4vaGVscGVycy9iaW5kLmpzJztcbmltcG9ydCBBeGlvcyBmcm9tICcuL2NvcmUvQXhpb3MuanMnO1xuaW1wb3J0IG1lcmdlQ29uZmlnIGZyb20gJy4vY29yZS9tZXJnZUNvbmZpZy5qcyc7XG5pbXBvcnQgZGVmYXVsdHMgZnJvbSAnLi9kZWZhdWx0cy9pbmRleC5qcyc7XG5pbXBvcnQgZm9ybURhdGFUb0pTT04gZnJvbSAnLi9oZWxwZXJzL2Zvcm1EYXRhVG9KU09OLmpzJztcbmltcG9ydCBDYW5jZWxlZEVycm9yIGZyb20gJy4vY2FuY2VsL0NhbmNlbGVkRXJyb3IuanMnO1xuaW1wb3J0IENhbmNlbFRva2VuIGZyb20gJy4vY2FuY2VsL0NhbmNlbFRva2VuLmpzJztcbmltcG9ydCBpc0NhbmNlbCBmcm9tICcuL2NhbmNlbC9pc0NhbmNlbC5qcyc7XG5pbXBvcnQge1ZFUlNJT059IGZyb20gJy4vZW52L2RhdGEuanMnO1xuaW1wb3J0IHRvRm9ybURhdGEgZnJvbSAnLi9oZWxwZXJzL3RvRm9ybURhdGEuanMnO1xuaW1wb3J0IEF4aW9zRXJyb3IgZnJvbSAnLi9jb3JlL0F4aW9zRXJyb3IuanMnO1xuaW1wb3J0IHNwcmVhZCBmcm9tICcuL2hlbHBlcnMvc3ByZWFkLmpzJztcbmltcG9ydCBpc0F4aW9zRXJyb3IgZnJvbSAnLi9oZWxwZXJzL2lzQXhpb3NFcnJvci5qcyc7XG5pbXBvcnQgQXhpb3NIZWFkZXJzIGZyb20gXCIuL2NvcmUvQXhpb3NIZWFkZXJzLmpzXCI7XG5pbXBvcnQgSHR0cFN0YXR1c0NvZGUgZnJvbSAnLi9oZWxwZXJzL0h0dHBTdGF0dXNDb2RlLmpzJztcblxuLyoqXG4gKiBDcmVhdGUgYW4gaW5zdGFuY2Ugb2YgQXhpb3NcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gZGVmYXVsdENvbmZpZyBUaGUgZGVmYXVsdCBjb25maWcgZm9yIHRoZSBpbnN0YW5jZVxuICpcbiAqIEByZXR1cm5zIHtBeGlvc30gQSBuZXcgaW5zdGFuY2Ugb2YgQXhpb3NcbiAqL1xuZnVuY3Rpb24gY3JlYXRlSW5zdGFuY2UoZGVmYXVsdENvbmZpZykge1xuICBjb25zdCBjb250ZXh0ID0gbmV3IEF4aW9zKGRlZmF1bHRDb25maWcpO1xuICBjb25zdCBpbnN0YW5jZSA9IGJpbmQoQXhpb3MucHJvdG90eXBlLnJlcXVlc3QsIGNvbnRleHQpO1xuXG4gIC8vIENvcHkgYXhpb3MucHJvdG90eXBlIHRvIGluc3RhbmNlXG4gIHV0aWxzLmV4dGVuZChpbnN0YW5jZSwgQXhpb3MucHJvdG90eXBlLCBjb250ZXh0LCB7YWxsT3duS2V5czogdHJ1ZX0pO1xuXG4gIC8vIENvcHkgY29udGV4dCB0byBpbnN0YW5jZVxuICB1dGlscy5leHRlbmQoaW5zdGFuY2UsIGNvbnRleHQsIG51bGwsIHthbGxPd25LZXlzOiB0cnVlfSk7XG5cbiAgLy8gRmFjdG9yeSBmb3IgY3JlYXRpbmcgbmV3IGluc3RhbmNlc1xuICBpbnN0YW5jZS5jcmVhdGUgPSBmdW5jdGlvbiBjcmVhdGUoaW5zdGFuY2VDb25maWcpIHtcbiAgICByZXR1cm4gY3JlYXRlSW5zdGFuY2UobWVyZ2VDb25maWcoZGVmYXVsdENvbmZpZywgaW5zdGFuY2VDb25maWcpKTtcbiAgfTtcblxuICByZXR1cm4gaW5zdGFuY2U7XG59XG5cbi8vIENyZWF0ZSB0aGUgZGVmYXVsdCBpbnN0YW5jZSB0byBiZSBleHBvcnRlZFxuY29uc3QgYXhpb3MgPSBjcmVhdGVJbnN0YW5jZShkZWZhdWx0cyk7XG5cbi8vIEV4cG9zZSBBeGlvcyBjbGFzcyB0byBhbGxvdyBjbGFzcyBpbmhlcml0YW5jZVxuYXhpb3MuQXhpb3MgPSBBeGlvcztcblxuLy8gRXhwb3NlIENhbmNlbCAmIENhbmNlbFRva2VuXG5heGlvcy5DYW5jZWxlZEVycm9yID0gQ2FuY2VsZWRFcnJvcjtcbmF4aW9zLkNhbmNlbFRva2VuID0gQ2FuY2VsVG9rZW47XG5heGlvcy5pc0NhbmNlbCA9IGlzQ2FuY2VsO1xuYXhpb3MuVkVSU0lPTiA9IFZFUlNJT047XG5heGlvcy50b0Zvcm1EYXRhID0gdG9Gb3JtRGF0YTtcblxuLy8gRXhwb3NlIEF4aW9zRXJyb3IgY2xhc3NcbmF4aW9zLkF4aW9zRXJyb3IgPSBBeGlvc0Vycm9yO1xuXG4vLyBhbGlhcyBmb3IgQ2FuY2VsZWRFcnJvciBmb3IgYmFja3dhcmQgY29tcGF0aWJpbGl0eVxuYXhpb3MuQ2FuY2VsID0gYXhpb3MuQ2FuY2VsZWRFcnJvcjtcblxuLy8gRXhwb3NlIGFsbC9zcHJlYWRcbmF4aW9zLmFsbCA9IGZ1bmN0aW9uIGFsbChwcm9taXNlcykge1xuICByZXR1cm4gUHJvbWlzZS5hbGwocHJvbWlzZXMpO1xufTtcblxuYXhpb3Muc3ByZWFkID0gc3ByZWFkO1xuXG4vLyBFeHBvc2UgaXNBeGlvc0Vycm9yXG5heGlvcy5pc0F4aW9zRXJyb3IgPSBpc0F4aW9zRXJyb3I7XG5cbi8vIEV4cG9zZSBtZXJnZUNvbmZpZ1xuYXhpb3MubWVyZ2VDb25maWcgPSBtZXJnZUNvbmZpZztcblxuYXhpb3MuQXhpb3NIZWFkZXJzID0gQXhpb3NIZWFkZXJzO1xuXG5heGlvcy5mb3JtVG9KU09OID0gdGhpbmcgPT4gZm9ybURhdGFUb0pTT04odXRpbHMuaXNIVE1MRm9ybSh0aGluZykgPyBuZXcgRm9ybURhdGEodGhpbmcpIDogdGhpbmcpO1xuXG5heGlvcy5IdHRwU3RhdHVzQ29kZSA9IEh0dHBTdGF0dXNDb2RlO1xuXG5heGlvcy5kZWZhdWx0ID0gYXhpb3M7XG5cbi8vIHRoaXMgbW9kdWxlIHNob3VsZCBvbmx5IGhhdmUgYSBkZWZhdWx0IGV4cG9ydFxuZXhwb3J0IGRlZmF1bHQgYXhpb3NcbiIsIid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBTeW50YWN0aWMgc3VnYXIgZm9yIGludm9raW5nIGEgZnVuY3Rpb24gYW5kIGV4cGFuZGluZyBhbiBhcnJheSBmb3IgYXJndW1lbnRzLlxuICpcbiAqIENvbW1vbiB1c2UgY2FzZSB3b3VsZCBiZSB0byB1c2UgYEZ1bmN0aW9uLnByb3RvdHlwZS5hcHBseWAuXG4gKlxuICogIGBgYGpzXG4gKiAgZnVuY3Rpb24gZih4LCB5LCB6KSB7fVxuICogIHZhciBhcmdzID0gWzEsIDIsIDNdO1xuICogIGYuYXBwbHkobnVsbCwgYXJncyk7XG4gKiAgYGBgXG4gKlxuICogV2l0aCBgc3ByZWFkYCB0aGlzIGV4YW1wbGUgY2FuIGJlIHJlLXdyaXR0ZW4uXG4gKlxuICogIGBgYGpzXG4gKiAgc3ByZWFkKGZ1bmN0aW9uKHgsIHksIHopIHt9KShbMSwgMiwgM10pO1xuICogIGBgYFxuICpcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGNhbGxiYWNrXG4gKlxuICogQHJldHVybnMge0Z1bmN0aW9ufVxuICovXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBzcHJlYWQoY2FsbGJhY2spIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIHdyYXAoYXJyKSB7XG4gICAgcmV0dXJuIGNhbGxiYWNrLmFwcGx5KG51bGwsIGFycik7XG4gIH07XG59XG4iLCIndXNlIHN0cmljdCc7XG5cbmltcG9ydCB1dGlscyBmcm9tICcuLy4uL3V0aWxzLmpzJztcblxuLyoqXG4gKiBEZXRlcm1pbmVzIHdoZXRoZXIgdGhlIHBheWxvYWQgaXMgYW4gZXJyb3IgdGhyb3duIGJ5IEF4aW9zXG4gKlxuICogQHBhcmFtIHsqfSBwYXlsb2FkIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKlxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdGhlIHBheWxvYWQgaXMgYW4gZXJyb3IgdGhyb3duIGJ5IEF4aW9zLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gaXNBeGlvc0Vycm9yKHBheWxvYWQpIHtcbiAgcmV0dXJuIHV0aWxzLmlzT2JqZWN0KHBheWxvYWQpICYmIChwYXlsb2FkLmlzQXhpb3NFcnJvciA9PT0gdHJ1ZSk7XG59XG4iLCJpbXBvcnQgYXhpb3MgZnJvbSBcImF4aW9zXCI7XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBnZXRBcGkobGluaywgbG9jYXRpb24pIHtcbiAgICBjb25zdCByZXMgPSBhd2FpdCBheGlvcy5nZXQoYCR7bGlua30/a2V5PSR7cHJvY2Vzcy5lbnYuQVBJX0tFWX0mcT0ke2xvY2F0aW9ufSZhcWk9eWVzYClcbiAgICBpZihyZXMuc3RhdHVzID09IDIwMCkgcmV0dXJuIHJlcztcbiAgICByZXR1cm4gcmVzLnJlc3BvbnNlO1xufVxuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gZ2V0RGFpbHlBcGkobGluaywgbG9jYXRpb24sIGRheXMpIHtcbiAgICBjb25zdCByZXMgPSBhd2FpdCBheGlvcy5nZXQoYCR7bGlua30/a2V5PSR7cHJvY2Vzcy5lbnYuQVBJX0tFWX0mcT0ke2xvY2F0aW9ufSZkYXlzPSR7ZGF5c31gKVxuICAgIGlmKHJlcy5zdGF0dXMgPT0gMjAwKSByZXR1cm4gcmVzO1xuICAgIHJldHVybiByZXMucmVzcG9uc2U7XG59XG5cbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKGNsYXNzTmFtZSwgd2lkdGgsIGhlaWdodCkge1xuICAgIGNvbnN0IGltZ1N2ZyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ0ltZycpO1xuICAgIGltZ1N2Zy5zcmMgPSBgZGF0YTppbWFnZS9zdmcreG1sLCUzQ3N2ZyB4bWxucz1cImh0dHAlM0ElMkYlMkZ3d3cudzMub3JnJTJGMjAwMCUyRnN2Z1wiIHdpZHRoPScke3dpZHRofScgaGVpZ2h0PVwiJHtoZWlnaHR9XCIgdmlld0JveD1cIjAgMCAxNCAxNFwiJTNFJTNDZyBmaWxsPVwibm9uZVwiIHN0cm9rZT1cImN1cnJlbnRDb2xvclwiIHN0cm9rZS1saW5lY2FwPVwicm91bmRcIiBzdHJva2UtbGluZWpvaW49XCJyb3VuZFwiJTNFJTNDY2lyY2xlIGN4PVwiMlwiIGN5PVwiMlwiIHI9XCIxLjVcIiUyRiUzRSUzQ3BhdGggZD1cIk0xMy41IDEuODRhNiA2IDAgMSAwLTIgMTEuNjZhNiA2IDAgMCAwIDItLjM0XCIlMkYlM0UlM0MlMkZnJTNFJTNDJTJGc3ZnJTNFYDtcbiAgICBpbWdTdmcuY2xhc3NMaXN0LmFkZChjbGFzc05hbWUpO1xuICAgIHJldHVybiBpbWdTdmc7XG59XG5cblxuXG4iLCJpbXBvcnQgZGVncmVlU3ZnIGZyb20gXCIuL3N2Zy9kZWdyZWVfc3ZnXCI7XG5cbmV4cG9ydCBjb25zdCB3ZWF0aGVyRGl2T25lID0gKHR4dCwgY2xhc3NOYW1lLCBwb3NpdGlvbikgPT4ge1xuICAgIGNvbnN0IGVsZW0gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICBlbGVtLmNsYXNzTGlzdC5hZGQoY2xhc3NOYW1lLCBwb3NpdGlvbik7XG4gICAgZWxlbS50ZXh0Q29udGVudCA9IHR4dDtcbiAgICByZXR1cm4gZWxlbTtcbn1cbmV4cG9ydCBjb25zdCB3ZWF0aGVyRGl2VHdvID0gKFxuICAgIHBvc2l0aW9uLFxuICAgIHR4dDEsIGNsYXNzTmFtZTEsIFxuICAgIHR4dDIsIGNsYXNzTmFtZTJcbikgPT4ge1xuICAgIGNvbnN0IGJveCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgIGJveC5jbGFzc0xpc3QuYWRkKHBvc2l0aW9uKTtcbiAgICBib3guYXBwZW5kKFxuICAgICAgICB3ZWF0aGVyRGl2T25lKHR4dDEsIGNsYXNzTmFtZTEpLCBcbiAgICAgICAgd2VhdGhlckRpdk9uZSh0eHQyLCBjbGFzc05hbWUyKVxuICAgICk7XG4gICAgcmV0dXJuIGJveDtcbn1cblxuZXhwb3J0IGNvbnN0IGRlZ3JlZUZ1bmNMZWZ0ID0gKHR4dCwgY2xhc3NOYW1lLCBwb3NpdGlvbiwgc2l6ZSkgPT4ge1xuICAgIGNvbnN0IGJveCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgIGJveC5jbGFzc0xpc3QuYWRkKHBvc2l0aW9uKTtcbiAgICBib3guYXBwZW5kKFxuICAgICAgICB3ZWF0aGVyRGl2T25lKHR4dCwgY2xhc3NOYW1lLCAnbGVmdCcpLFxuICAgICAgICBkZWdyZWVTdmcoJ2ltZ1N2ZycsIHNpemUsIHNpemUpXG4gICAgKVxuICAgIHJldHVybiBib3g7XG59XG5cbmV4cG9ydCBjb25zdCBkZWdyZWVGdW5jUmlnaHQgPSAoXG4gICAgdHh0MSwgY2xhc3NOYW1lMSwgXG4gICAgdHh0MiwgY2xhc3NOYW1lMiwgXG4gICAgcG9zaXRpb24xLCBwb3NpdGlvbjIsIHNpemUpID0+IHtcbiAgICBjb25zdCBib3ggPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICBib3guY2xhc3NMaXN0LmFkZChwb3NpdGlvbjEpO1xuICAgIGJveC5hcHBlbmQoXG4gICAgICAgIHdlYXRoZXJEaXZPbmUodHh0MSwgY2xhc3NOYW1lMSwgJ3JpZ2h0JyksXG4gICAgICAgIGRlZ3JlZUZ1bmNMZWZ0KHR4dDIsIGNsYXNzTmFtZTIsIHBvc2l0aW9uMiwgc2l6ZSksXG4gICAgKVxuICAgIHJldHVybiBib3g7XG59XG5leHBvcnQgY29uc3QgZGVncmVlRnVuYyA9ICh0eHQsIGNsYXNzTmFtZSwgcG9zaXRpb24sIHNpemUpID0+IHtcbiAgICBjb25zdCBib3ggPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICBib3guY2xhc3NMaXN0LmFkZChwb3NpdGlvbik7XG4gICAgYm94LmFwcGVuZChcbiAgICAgICAgd2VhdGhlckRpdk9uZSh0eHQsIGNsYXNzTmFtZSwgJ2xlZnQnKSxcbiAgICAgICAgZGVncmVlU3ZnKCdpbWdTdmcnLCBzaXplLCBzaXplKVxuICAgIClcbiAgICByZXR1cm4gYm94O1xufSIsIlxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihjbGFzc05hbWUpIHtcbiAgICBjb25zdCBlbGVtID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgZWxlbS5jbGFzc0xpc3QuYWRkKGNsYXNzTmFtZSk7XG4gICAgcmV0dXJuIGVsZW07XG59IiwiaW1wb3J0IGNyZWF0ZURpdiBmcm9tIFwiLi9jcmVhdGVEaXZcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24obXNnKSB7XG4gICAgIGNvbnN0IGNvbnRhaW5lciA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5jb250YWluZXInKTtcbiAgICAgY29uc3QgZXJyb3JCb3ggPSBjcmVhdGVEaXYoJ2Vycm9yLWJveCcpO1xuICAgICBjb25zdCBlcnJvck1zZyA9IGNyZWF0ZURpdignZXJyb3ItbXNnJyk7XG4gICAgIGVycm9yTXNnLnRleHRDb250ZW50ID0gbXNnXG4gICAgIGVycm9yQm94LmFwcGVuZENoaWxkKGVycm9yTXNnKTtcbiAgICAgY29udGFpbmVyLmFwcGVuZENoaWxkKGVycm9yQm94KTtcbiAgICAgcmV0dXJuIGVycm9yQm94O1xufSIsImltcG9ydCB7IGdldEFwaSB9IGZyb20gJy4vYXBpL2ZldGNoQXBpJztcbmltcG9ydCB7IGRlZ3JlZUZ1bmNSaWdodCwgd2VhdGhlckRpdlR3byB9IGZyb20gJy4vd2VhdGhlckRpdic7XG5pbXBvcnQgZXJyb3JGdW5jIGZyb20gJy4vZXJyb3JGdW5jJztcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oKSB7XG4gICAgY29uc3QgbGluayA9ICdodHRwczovL2FwaS53ZWF0aGVyYXBpLmNvbS92MS9jdXJyZW50Lmpzb24nO1xuICAgIHZhciBjb3VudHJ5ID0gbG9jYWxTdG9yYWdlLmdldEl0ZW0oXCJjb3VudHJ5XCIpO1xuICAgIGNvbnN0IGVsZW0gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICBlbGVtLmNsYXNzTGlzdC5hZGQoJ3JpZ2h0LXdlYXRoZXInKTtcblxuICAgIGdldEFwaShsaW5rLCBjb3VudHJ5KS50aGVuKChyZXMpID0+IHtcbiAgICAgICAgZWxlbS5hcHBlbmQoXG4gICAgICAgICAgICBkZWdyZWVGdW5jUmlnaHQoXG4gICAgICAgICAgICAgICAgJ0ZlZWxzIGxpa2UnLCAnbW9yZS1tc2cnLFxuICAgICAgICAgICAgICAgIHJlcy5kYXRhLmN1cnJlbnQuZmVlbHNsaWtlX2MsICdpbi1kZWdyZWUnLCBcbiAgICAgICAgICAgICAgICAncmlnaHQnLCAncmlnaHREZWdyZWUnLCAnMzAnXG4gICAgICAgICAgICApLFxuXG4gICAgICAgICAgICB3ZWF0aGVyRGl2VHdvKFxuICAgICAgICAgICAgICAgICdyaWdodCcsICBcbiAgICAgICAgICAgICAgICAnSHVtaWRpdHknLCAnbW9yZS1tc2cnLFxuICAgICAgICAgICAgICAgIGAke3Jlcy5kYXRhLmN1cnJlbnQuaHVtaWRpdHl9JWAsICdpbi1kZWdyZWUnXG4gICAgICAgICAgICApLFxuICAgICAgICAgICAgd2VhdGhlckRpdlR3byhcbiAgICAgICAgICAgICAgICAncmlnaHQnLCAgXG4gICAgICAgICAgICAgICAgJ1dpbmQgU3BlZWQnLCAnbW9yZS1tc2cnLFxuICAgICAgICAgICAgICAgIGAke3Jlcy5kYXRhLmN1cnJlbnQud2luZF9rcGh9a20vaGAsICdpbi1kZWdyZWUnXG4gICAgICAgICAgICApLFxuICAgICAgICAgICAgZGVncmVlRnVuY1JpZ2h0KFxuICAgICAgICAgICAgICAgICdXaW5kIERlZ3JlZScsICdtb3JlLW1zZycsXG4gICAgICAgICAgICAgICAgcmVzLmRhdGEuY3VycmVudC53aW5kX2RlZ3JlZSwgJ2luLWRlZ3JlZScsIFxuICAgICAgICAgICAgICAgICdyaWdodCcsICdyaWdodERlZ3JlZScsICczMCdcbiAgICAgICAgICAgICksXG4gICAgICAgICk7XG4gICAgfSkuY2F0Y2goKGUpID0+IHtcbiAgICAgICAgY29uc3QgZWxlbSA9IGVycm9yRnVuYyhlLnJlc3BvbnNlLmRhdGEuZXJyb3IubWVzc2FnZSk7ICBcbiAgICAgICAgZWxlbS5jbGFzc0xpc3QucmVtb3ZlKCdhY3RpdmUnKTtcbiAgICAgICAgc2V0VGltZW91dCgoKSA9PiBlbGVtLmNsYXNzTGlzdC5hZGQoJ2FjdGl2ZScpLCA1MDAwKTsgXG4gICAgfSk7XG4gICAgcmV0dXJuIGVsZW07XG59IiwiXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihjbGFzc05hbWUsIGxpbmspIHtcbiAgICBjb25zdCBpbWcgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdJbWcnKTtcbiAgICBpbWcuc3JjID0gYGh0dHBzOiR7bGlua31gO1xuICAgIGltZy5jbGFzc0xpc3QuYWRkKGNsYXNzTmFtZSk7XG4gICAgcmV0dXJuIGltZztcbn0iLCJpbXBvcnQgZGF5anMgZnJvbSBcImRheWpzXCI7XG5pbXBvcnQgeyBnZXREYWlseUFwaSB9IGZyb20gXCIuL2FwaS9mZXRjaEFwaVwiO1xuaW1wb3J0IHsgZGVncmVlRnVuYyB9IGZyb20gXCIuL3dlYXRoZXJEaXZcIjtcbmltcG9ydCBjbG91ZEltZyBmcm9tIFwiLi9pbWFnZS9jbG91ZEltZ1wiO1xuaW1wb3J0IGVycm9yRnVuYyBmcm9tIFwiLi9lcnJvckZ1bmNcIjtcblxuZnVuY3Rpb24gd2VhdGhlcih0eHQsIGNsYXNzTmFtZSkge1xuICAgIGNvbnN0IGVsZW0gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICBlbGVtLmNsYXNzTGlzdC5hZGQoY2xhc3NOYW1lKTtcbiAgICBlbGVtLnRleHRDb250ZW50ID0gdHh0O1xuICAgIHJldHVybiBlbGVtO1xufVxuZnVuY3Rpb24gYWNjb3JkQ29udGFpbmVyKGZvcmVjYXN0ZGF5LCBpbmRleCwgY2xhc3NOYW1lKSB7XG4gICAgY29uc3QgZWxlbSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgIGVsZW0uY2xhc3NMaXN0LmFkZChjbGFzc05hbWUpO1xuICAgIGVsZW0uYXBwZW5kKFxuICAgICAgICB3ZWF0aGVyKFxuICAgICAgICAgICAgZGF5anMoZm9yZWNhc3RkYXlbaW5kZXhdLmRhdGUpLmZvcm1hdCgnZGRkZCcpLCAnZGF5JyxcbiAgICAgICAgKSxcbiAgICAgICAgZGVncmVlRnVuYyhcbiAgICAgICAgICAgIGZvcmVjYXN0ZGF5W2luZGV4XS5kYXkuYXZndGVtcF9jLCBcbiAgICAgICAgICAgICdhdmctZGVncmVlJywgXG4gICAgICAgICAgICAnYWNjb3JkJywgXG4gICAgICAgICAgICAnMTUnXG4gICAgICAgICksXG4gICAgICAgIGRlZ3JlZUZ1bmMoXG4gICAgICAgICAgICBmb3JlY2FzdGRheVtpbmRleF0uZGF5Lm1heHRlbXBfYywgXG4gICAgICAgICAgICAnbWF4LWRlZ3JlZScsIFxuICAgICAgICAgICAgJ2FjY29yZCcsIFxuICAgICAgICAgICAgJzIwJ1xuICAgICAgICApLFxuICAgICAgICBkZWdyZWVGdW5jKFxuICAgICAgICAgICAgZm9yZWNhc3RkYXlbaW5kZXhdLmRheS5taW50ZW1wX2MsIFxuICAgICAgICAgICAgJ21pbi1kZWdyZWUnLCBcbiAgICAgICAgICAgICdhY2NvcmQnLCBcbiAgICAgICAgICAgICcxMCdcbiAgICAgICAgKSwgXG4gICAgICAgIGNsb3VkSW1nKCdjbG91ZC1pbWcnLCBmb3JlY2FzdGRheVtpbmRleF0uZGF5LmNvbmRpdGlvbi5pY29uKVxuICAgIClcbiAgICByZXR1cm4gZWxlbTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oZWxlbSkge1xuICAgIGNvbnN0IGNvdW50cnkgPSBsb2NhbFN0b3JhZ2UuZ2V0SXRlbSgnY291bnRyeScpO1xuICAgIGNvbnN0IGxpbmsgPSAnaHR0cHM6Ly9hcGkud2VhdGhlcmFwaS5jb20vdjEvZm9yZWNhc3QuanNvbic7XG4gICAgY29uc3QgbGVmdEFycm93ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmxlZnQtYXJyb3cnKTtcbiAgICBjb25zdCByaWdodEFycm93ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLnJpZ2h0LWFycm93Jyk7XG4gICAgbGVmdEFycm93LmNsYXNzTGlzdC5yZW1vdmUoJ2Fycm93Jyk7XG4gICAgcmlnaHRBcnJvdy5jbGFzc0xpc3QucmVtb3ZlKCdhcnJvdycpO1xuXG4gICAgZ2V0RGFpbHlBcGkobGluaywgY291bnRyeSwgJzcnKS50aGVuKChyZXMpID0+IHtcbiAgICAgICAgY29uc3QgeyBmb3JlY2FzdGRheSB9ID0gcmVzLmRhdGEuZm9yZWNhc3Q7XG4gICAgICAgIGZvciAobGV0IGluZGV4ID0gMDsgaW5kZXggPCBmb3JlY2FzdGRheS5sZW5ndGg7IGluZGV4KyspIHtcbiAgICAgICAgICAgIGVsZW0uYXBwZW5kQ2hpbGQoXG4gICAgICAgICAgICAgICAgYWNjb3JkQ29udGFpbmVyKGZvcmVjYXN0ZGF5LCBpbmRleCwgJ2ZvcmNhc3QnKVxuICAgICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgIH0pLmNhdGNoKCgpID0+IHtcbiAgICAgICAgY29uc3QgZWxlbSA9IGVycm9yRnVuYyhlLnJlc3BvbnNlLmRhdGEuZXJyb3IubWVzc2FnZSk7ICBcbiAgICAgICAgZWxlbS5jbGFzc0xpc3QucmVtb3ZlKCdhY3RpdmUnKTtcbiAgICAgICAgc2V0VGltZW91dCgoKSA9PiBlbGVtLmNsYXNzTGlzdC5hZGQoJ2FjdGl2ZScpLCA1MDAwKTtcbiAgICB9KVxufSIsImltcG9ydCB7IGdldEFwaSB9IGZyb20gJy4vYXBpL2ZldGNoQXBpJztcbmltcG9ydCB7IHdlYXRoZXJEaXZPbmUsIGRlZ3JlZUZ1bmNMZWZ0IH0gZnJvbSAnLi93ZWF0aGVyRGl2JztcbmltcG9ydCBjbG91ZEltZyBmcm9tICcuL2ltYWdlL2Nsb3VkSW1nJztcbmltcG9ydCBkYXlqcyBmcm9tICdkYXlqcyc7XG5pbXBvcnQgY3JlYXRlRGl2IGZyb20gJy4vY3JlYXRlRGl2JztcbmltcG9ydCBzZWFyY2hfc3ZnIGZyb20gJy4vc3ZnL3NlYXJjaF9zdmcnO1xuaW1wb3J0IHNlYXJjaFN1Ym1pdCBmcm9tICcuL3NlYXJjaFN1Ym1pdCc7XG5pbXBvcnQgZXJyb3JGdW5jIGZyb20gJy4vZXJyb3JGdW5jJztcblxuXG5jb25zdCBzZWFyY2hXZXRoZXIgPSAoKSA9PiB7XG4gICAgY29uc3Qgc2VhY2hCb3ggPSBjcmVhdGVEaXYoJ3NlYXJjaC1ib3gnKTtcbiAgICBjb25zdCBzZWFyY2ggPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdpbnB1dCcpO1xuICAgIHNlYXJjaC50eXBlID0gJ3NlYXJjaCc7XG4gICAgc2VhcmNoLnBsYWNlaG9sZGVyID0gJ1NlYXJjaCBsb2NhdGlvbic7XG4gICAgc2VhcmNoLmNsYXNzTGlzdC5hZGQoJ3NlYXJjaC1sb2NhdGlvbicpO1xuICAgIHNlYWNoQm94LmFwcGVuZChzZWFyY2gsIHNlYXJjaF9zdmcoJ3NlYXJjaC1idG4nLCAnMjQnLCAnMjQnKSk7XG4gICAgcmV0dXJuIHNlYWNoQm94O1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbigpIHtcbiAgICBjb25zdCBsaW5rID0gJ2h0dHBzOi8vYXBpLndlYXRoZXJhcGkuY29tL3YxL2N1cnJlbnQuanNvbic7XG4gICAgdmFyIGNvdW50cnkgPSBsb2NhbFN0b3JhZ2UuZ2V0SXRlbShcImNvdW50cnlcIik7XG4gICAgY29uc3QgZWxlbSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgIGVsZW0uY2xhc3NMaXN0LmFkZCgnbGVmdC13ZWF0aGVyJyk7XG4gICAgZ2V0QXBpKGxpbmssIGNvdW50cnkpLnRoZW4oKHJlcykgPT4ge1xuICAgICAgICBlbGVtLmFwcGVuZChcbiAgICAgICAgICAgIHdlYXRoZXJEaXZPbmUoJ1JlbWVkeSBXZWF0aGVyJywgJ3RpdGxlJywgJ2xlZnQnKSxcbiAgICAgICAgICAgIHdlYXRoZXJEaXZPbmUoXG4gICAgICAgICAgICAgICAgZGF5anMocmVzLmRhdGEuY3VycmVudC5sYXN0X3VwZGF0ZWQpLmZvcm1hdCgnTU1NLCBkZGQgRCBoOm1tIEEnKSxcbiAgICAgICAgICAgICAgICAnZGF0ZScsICdsZWZ0JyksXG4gICAgICAgICAgICB3ZWF0aGVyRGl2T25lKHJlcy5kYXRhLmxvY2F0aW9uLmNvdW50cnksICdwbGFjZScsICdsZWZ0JyksXG4gICAgICAgICAgICBkZWdyZWVGdW5jTGVmdChyZXMuZGF0YS5jdXJyZW50LnRlbXBfYywgJ2RlZ3JlZScsICdsZWZ0RGVncmVlJywgJzQwJyksXG4gICAgICAgICAgICBjbG91ZEltZygnbGVmdENsb3VkJywgcmVzLmRhdGEuY3VycmVudC5jb25kaXRpb24uaWNvbiksXG4gICAgICAgICAgICBzZWFyY2hXZXRoZXIoKSxcbiAgICAgICAgKTtcbiAgICAgICAgc2VhcmNoU3VibWl0KCk7XG4gICAgfSkuY2F0Y2goKGUpID0+IHsgXG4gICAgICAgIGNvbnN0IGVsZW0gPSBlcnJvckZ1bmMoZS5yZXNwb25zZS5kYXRhLmVycm9yLm1lc3NhZ2UpOyAgXG4gICAgICAgIGVsZW0uY2xhc3NMaXN0LnJlbW92ZSgnYWN0aXZlJyk7XG4gICAgICAgIHNldFRpbWVvdXQoKCkgPT4gZWxlbS5jbGFzc0xpc3QuYWRkKCdhY3RpdmUnKSwgNTAwMCk7XG4gICAgfSk7XG4gICAgcmV0dXJuIGVsZW07XG59IiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oY2xhc3NOYW1lLCB3aWR0aCwgaGVpZ2h0KSB7XG4gICAgY29uc3QgaW1nU3ZnID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnSW1nJyk7XG4gICAgaW1nU3ZnLnNyYyA9IGBkYXRhOmltYWdlL3N2Zyt4bWwsJTNDc3ZnIHhtbG5zPVwiaHR0cCUzQSUyRiUyRnd3dy53My5vcmclMkYyMDAwJTJGc3ZnXCIgd2lkdGg9JyR7d2lkdGh9JyBoZWlnaHQ9XCIke2hlaWdodH1cIiB2aWV3Qm94PVwiMCAwIDI0IDI0XCIlM0UlM0NwYXRoIGZpbGw9XCJjdXJyZW50Q29sb3JcIiBkPVwibTE5LjYgMjFsLTYuMy02LjNxLS43NS42LTEuNzI1Ljk1VDkuNSAxNnEtMi43MjUgMC00LjYxMi0xLjg4OFQzIDkuNXEwLTIuNzI1IDEuODg4LTQuNjEyVDkuNSAzcTIuNzI1IDAgNC42MTIgMS44ODhUMTYgOS41cTAgMS4xLS4zNSAyLjA3NVQxNC43IDEzLjNsNi4zIDYuM2wtMS40IDEuNFpNOS41IDE0cTEuODc1IDAgMy4xODgtMS4zMTNUMTQgOS41cTAtMS44NzUtMS4zMTMtMy4xODhUOS41IDVRNy42MjUgNSA2LjMxMiA2LjMxM1Q1IDkuNXEwIDEuODc1IDEuMzEzIDMuMTg4VDkuNSAxNFpcIiUyRiUzRSUzQyUyRnN2ZyUzRWA7XG4gICAgaW1nU3ZnLmNsYXNzTGlzdC5hZGQoY2xhc3NOYW1lKTtcbiAgICByZXR1cm4gaW1nU3ZnO1xufSIsImltcG9ydCBjcmVhdGVEaXYgZnJvbSBcIi4vY3JlYXRlRGl2XCI7XG5pbXBvcnQgcmlnaHRXZWF0aGVyIGZyb20gXCIuL3JpZ2h0V2VhdGhlclwiO1xuaW1wb3J0IGxlZnRXZWF0aGVyIGZyb20gXCIuL2xlZnRXZWF0aGVyXCI7XG5pbXBvcnQgc2hvd1dlYXRoZXIgZnJvbSBcIi4vc2hvd1dlYXRoZXJcIjsgXG5pbXBvcnQgeyBnZXRBcGkgfSBmcm9tIFwiLi9hcGkvZmV0Y2hBcGlcIjtcbmltcG9ydCBlcnJvckZ1bmMgZnJvbSBcIi4vZXJyb3JGdW5jXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKCkge1xuICAgIGNvbnN0IHNlYXJjaElucHV0ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLnNlYXJjaC1sb2NhdGlvbicpO1xuICAgIGNvbnN0IHNlYXJjaEJ0biA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5zZWFyY2gtYnRuJyk7XG5cbiAgICBzZWFyY2hJbnB1dC5hZGRFdmVudExpc3RlbmVyKCdrZXlwcmVzcycsIChldmVudCkgPT4ge1xuICAgICAgICBpZiAoZXZlbnQua2V5ID09PSAnRW50ZXInKSB7XG4gICAgICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLnNlYXJjaC1idG4nKS5jbGljaygpO1xuICAgICAgICB9XG4gICAgfSk7XG4gICAgc2VhcmNoQnRuLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKGUpID0+IHtcbiAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICBjb25zdCBsaW5rID0gJ2h0dHBzOi8vYXBpLndlYXRoZXJhcGkuY29tL3YxL2N1cnJlbnQuanNvbic7XG4gICAgICAgIGNvbnN0IGNvbnRhaW5lciA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5jb250YWluZXInKTtcbiAgICAgICAgY29uc3Qgd2VhdGhlckRpc3BsYXkgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcud2VhdGhlckRpc3BsYXknKTtcbiAgICAgICAgY29uc3QgY29udGVudCA9IGNyZWF0ZURpdignY29udGVudCcpO1xuICAgICAgICBjb25zdCBzZWFyY2hJbnB1dCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5zZWFyY2gtbG9jYXRpb24nKTtcblxuICAgICAgICBpZihzZWFyY2hJbnB1dC52YWx1ZSA9PT0gJycpIHJldHVybiBhbGVydCgndW5kZWZpbmVkJyk7XG4gICAgICAgIGdldEFwaShsaW5rLCBzZWFyY2hJbnB1dC52YWx1ZSkudGhlbigocmVzKSA9PiB7XG4gICAgICAgICAgICBsb2NhbFN0b3JhZ2Uuc2V0SXRlbShcImNvdW50cnlcIiwgc2VhcmNoSW5wdXQudmFsdWUpO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICBpZiAocmVzLnN0YXR1cyA9PSAyMDApIHtcbiAgICAgICAgICAgICAgICBjb250YWluZXIucmVtb3ZlQ2hpbGQoY29udGFpbmVyLmZpcnN0RWxlbWVudENoaWxkKTtcbiAgICAgICAgICAgICAgICBjb250ZW50LmFwcGVuZChsZWZ0V2VhdGhlcigpLCByaWdodFdlYXRoZXIoKSk7XG4gICAgICAgICAgICAgICAgY29udGFpbmVyLmluc2VydEJlZm9yZShjb250ZW50LCBjb250YWluZXIuZmlyc3RFbGVtZW50Q2hpbGQpO1xuICAgICAgICAgICAgICAgIHdoaWxlICh3ZWF0aGVyRGlzcGxheS5oYXNDaGlsZE5vZGVzKCkpIHtcbiAgICAgICAgICAgICAgICAgICAgd2VhdGhlckRpc3BsYXkuZmlyc3RDaGlsZC5yZW1vdmUoKVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBzaG93V2VhdGhlcih3ZWF0aGVyRGlzcGxheSk7IFxuICAgICAgICAgICAgfVxuICAgICAgICB9KS5jYXRjaCgoZSk9PiB7ICAgICAgIFxuICAgICAgICAgICAgY29uc3QgZWxlbSA9IGVycm9yRnVuYyhlLnJlc3BvbnNlLmRhdGEuZXJyb3IubWVzc2FnZSk7ICBcbiAgICAgICAgICAgIGVsZW0uY2xhc3NMaXN0LnJlbW92ZSgnYWN0aXZlJyk7XG4gICAgICAgICAgICBzZXRUaW1lb3V0KCgpID0+IGVsZW0uY2xhc3NMaXN0LmFkZCgnYWN0aXZlJyksIDUwMDApO1xuICAgICAgICB9KVxuICAgIH0pXG59IiwiaW1wb3J0IGNyZWF0ZURpdiBmcm9tIFwiLi9jcmVhdGVEaXZcIjtcblxuZnVuY3Rpb24gYnV0dG9uKHR4dCwgY2xhc3NOYW1lKSB7XG4gICAgY29uc3QgYnV0dG9uID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnYnV0dG9uJyk7XG4gICAgYnV0dG9uLmNsYXNzTGlzdC5hZGQoY2xhc3NOYW1lKTtcbiAgICBidXR0b24udGV4dENvbnRlbnQgPSB0eHQ7XG4gICAgYnV0dG9uLm5hbWUgPSB0eHQudG9Mb3dlckNhc2UoKTtcbiAgICByZXR1cm4gYnV0dG9uO1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbigpIHtcbiAgICBjb25zdCBib3ggPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICBib3guY2xhc3NMaXN0LmFkZCgnYm94Jyk7XG4gICAgYm94LmFwcGVuZChcbiAgICAgICAgYnV0dG9uKCdEYWlseScsICdidXR0b24nKSwgXG4gICAgICAgIGJ1dHRvbignSG91cmx5JywgJ2J1dHRvbicpLCBcbiAgICAgICAgYnV0dG9uKCc8JywgJ2xlZnQtYXJyb3cnKSwgXG4gICAgICAgIGJ1dHRvbignPicsICdyaWdodC1hcnJvdycpLCBcbiAgICAgICAgY3JlYXRlRGl2KCd3ZWF0aGVyRGlzcGxheScpXG4gICAgKTtcbiAgICByZXR1cm4gYm94O1xufSIsImltcG9ydCBjbGljayBmcm9tIFwiLi9jbGlja1wiO1xuaW1wb3J0IGNyZWF0ZURpdiBmcm9tIFwiLi9jcmVhdGVEaXZcIjtcblxuXG5mdW5jdGlvbiBhZGRMb29wQ29udGFpbmVyKGVsZW0sIG5ld0FyciwgYWNjb3JkQ29udGFpbmVyKSB7XG4gICAgbGV0IGluZGV4ID0gMDtcbiAgICB3aGlsZSAoIGluZGV4IDwgbmV3QXJyLmxlbmd0aCkge1xuICAgICAgICBjb25zdCBjb250YWluZXIgPSBjcmVhdGVEaXYoJ2xvb3BDb250YWluZXInKTtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBuZXdBcnIubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGNvbnRhaW5lci5hcHBlbmRDaGlsZChcbiAgICAgICAgICAgICAgICBhY2NvcmRDb250YWluZXIobmV3QXJyW2ldLCBpbmRleCwgJ2RheS1mb3JjYXN0JylcbiAgICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICAgICAgZWxlbS5hcHBlbmRDaGlsZChjb250YWluZXIpO1xuICAgICAgICBpbmRleCsrXG4gICAgICAgIGVsZW0uZmlyc3RDaGlsZC5jbGFzc0xpc3QuYWRkKCdhY3RpdmUnKTtcbiAgICB9XG59XG5leHBvcnQgZnVuY3Rpb24gZGlzcGxheUhvdXIoZWxlbSwgYXJyLCBhY2NvcmRDb250YWluZXIpIHtcblxuICAgIGNvbnN0IG5ld0FyciA9IFtdO1xuICAgIGNvbnN0IG51bSA9IE1hdGguY2VpbChhcnIubGVuZ3RoLzQpO1xuXG4gICAgY2xpY2soKTtcbiAgICB3aGlsZSAobmV3QXJyLmxlbmd0aCA8IG51bSkge1xuICAgICAgICBsZXQgY291bnQgPSAwO1xuICAgICAgICBjb25zdCBsaXN0ID0gYXJyLnNwbGljZShjb3VudCwgNCk7XG4gICAgICAgIG5ld0Fyci5wdXNoKGxpc3QpO1xuICAgICAgICBjb3VudCs9NDtcbiAgICB9XG5cbiAgICBhZGRMb29wQ29udGFpbmVyKGVsZW0sIG5ld0FyciwgYWNjb3JkQ29udGFpbmVyKTtcbn0iLCJcbmV4cG9ydCBkZWZhdWx0ICgpID0+IHtcbiAgICBsZXQgbG9vcCA9IDA7XG4gICAgY29uc3QgcmlnaHQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcucmlnaHQtYXJyb3cnKTtcbiAgICBjb25zdCBsZWZ0ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmxlZnQtYXJyb3cnKTtcblxuICAgIGxlZnQuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoKT0+IHtcbiAgICAgICAgY29uc3QgbG9vcENvbnRhaW5lciA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJy5sb29wQ29udGFpbmVyJyk7XG5cbiAgICAgICAgaWYgKGxvb3AgPD0gMCkgbG9vcCA9IGxvb3BDb250YWluZXIubGVuZ3RoOyAgXG4gICAgICAgIGxvb3AtLTsgXG4gICAgICAgIGZvciAobGV0IGluZGV4ID0gMDsgaW5kZXggPCBsb29wQ29udGFpbmVyLmxlbmd0aDsgaW5kZXgrKykge1xuICAgICAgICBsb29wQ29udGFpbmVyW2luZGV4XS5jbGFzc0xpc3QucmVtb3ZlKCdhY3RpdmUnKTtcbiAgICAgICAgfVxuICAgICAgICBsb29wQ29udGFpbmVyW2xvb3BdLmNsYXNzTGlzdC5hZGQoJ2FjdGl2ZScpO1xuICAgIH0pO1xuXG4gICAgcmlnaHQuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoKT0+IHtcbiAgICAgICAgY29uc3QgbG9vcENvbnRhaW5lciA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJy5sb29wQ29udGFpbmVyJyk7XG5cbiAgICAgICAgaWYgKGxvb3AgPj0gbG9vcENvbnRhaW5lci5sZW5ndGgtMSkgbG9vcCA9IC0xOyBcbiAgICAgICAgbG9vcCsrO1xuICAgICAgICBmb3IgKGxldCBpbmRleCA9IDA7IGluZGV4IDwgbG9vcENvbnRhaW5lci5sZW5ndGg7IGluZGV4KyspIHtcbiAgICAgICAgICAgIGxvb3BDb250YWluZXJbaW5kZXhdLmNsYXNzTGlzdC5yZW1vdmUoJ2FjdGl2ZScpO1xuICAgICAgICB9XG4gICAgICAgIGxvb3BDb250YWluZXJbbG9vcF0uY2xhc3NMaXN0LmFkZCgnYWN0aXZlJyk7XG4gICAgfSk7XG59IiwiaW1wb3J0IGRheWpzIGZyb20gXCJkYXlqc1wiO1xuaW1wb3J0IHsgZ2V0RGFpbHlBcGkgfSBmcm9tIFwiLi9hcGkvZmV0Y2hBcGlcIjtcbmltcG9ydCB7IGRlZ3JlZUZ1bmMgfSBmcm9tIFwiLi93ZWF0aGVyRGl2XCI7XG5pbXBvcnQgY2xvdWRJbWcgZnJvbSBcIi4vaW1hZ2UvY2xvdWRJbWdcIjtcbmltcG9ydCB7IGRpc3BsYXlIb3VyIH0gZnJvbSBcIi4vdG9nZ2xlXCI7XG5pbXBvcnQgZXJyb3JGdW5jIGZyb20gXCIuL2Vycm9yRnVuY1wiO1xuXG5cbmZ1bmN0aW9uIHdlYXRoZXIodHh0LCBjbGFzc05hbWUpIHtcbiAgICBjb25zdCBlbGVtID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgZWxlbS5jbGFzc0xpc3QuYWRkKGNsYXNzTmFtZSk7XG4gICAgZWxlbS50ZXh0Q29udGVudCA9IHR4dDtcbiAgICByZXR1cm4gZWxlbTtcbn1cbmZ1bmN0aW9uIGFjY29yZENvbnRhaW5lcihob3VyLCBpbmRleCwgY2xhc3NOYW1lKSB7XG4gICAgY29uc3QgZWxlbSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgIGVsZW0uY2xhc3NMaXN0LmFkZChjbGFzc05hbWUpO1xuICAgIGVsZW0uYXBwZW5kKFxuICAgICAgICB3ZWF0aGVyKFxuICAgICAgICAgICAgZGF5anMoaG91cltpbmRleF0udGltZSkuZm9ybWF0KCdoOm1tIEEnKSwgJ2RheScsXG4gICAgICAgICksXG4gICAgICAgIGRlZ3JlZUZ1bmMoXG4gICAgICAgICAgICBob3VyW2luZGV4XS50ZW1wX2MsIFxuICAgICAgICAgICAgJ2F2Zy1kZWdyZWUnLCBcbiAgICAgICAgICAgICdhY2NvcmQnLCBcbiAgICAgICAgICAgICcxNSdcbiAgICAgICAgKSwgXG4gICAgICAgIGNsb3VkSW1nKCdjbG91ZC1pbWcnLCBob3VyW2luZGV4XS5jb25kaXRpb24uaWNvbilcbiAgICApXG4gICAgcmV0dXJuIGVsZW07XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKCkge1xuICAgIGNvbnN0IGNvdW50cnkgPSBsb2NhbFN0b3JhZ2UuZ2V0SXRlbSgnY291bnRyeScpO1xuICAgIGNvbnN0IGxpbmsgPSAnaHR0cHM6Ly9hcGkud2VhdGhlcmFwaS5jb20vdjEvZm9yZWNhc3QuanNvbic7XG4gICAgY29uc3QgZWxlbSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy53ZWF0aGVyRGlzcGxheScpO1xuICAgIGNvbnN0IGxlZnRBcnJvdyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5sZWZ0LWFycm93Jyk7XG4gICAgY29uc3QgcmlnaHRBcnJvdyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5yaWdodC1hcnJvdycpO1xuICAgIGxlZnRBcnJvdy5jbGFzc0xpc3QuYWRkKCdhcnJvdycpO1xuICAgIHJpZ2h0QXJyb3cuY2xhc3NMaXN0LmFkZCgnYXJyb3cnKTtcblxuICAgIGdldERhaWx5QXBpKGxpbmssIGNvdW50cnksICc3JykudGhlbigocmVzKSA9PiB7XG4gICAgICAgIGNvbnN0IHsgaG91ciB9ID0gcmVzLmRhdGEuZm9yZWNhc3QuZm9yZWNhc3RkYXlbMF07XG4gICAgICAgIGRpc3BsYXlIb3VyKGVsZW0sIGhvdXIsIGFjY29yZENvbnRhaW5lcik7XG4gICAgICAgIFxuICAgIH0pLmNhdGNoKCgpID0+IHtcbiAgICAgICAgY29uc3QgZWxlbSA9IGVycm9yRnVuYyhlLnJlc3BvbnNlLmRhdGEuZXJyb3IubWVzc2FnZSk7ICBcbiAgICAgICAgZWxlbS5jbGFzc0xpc3QucmVtb3ZlKCdhY3RpdmUnKTtcbiAgICAgICAgc2V0VGltZW91dCgoKSA9PiBlbGVtLmNsYXNzTGlzdC5hZGQoJ2FjdGl2ZScpLCA1MDAwKTtcbiAgICB9KVxufSIsImltcG9ydCBzaG93SG91ciBmcm9tIFwiLi9zaG93SG91clwiO1xuaW1wb3J0IHNob3dXZWF0aGVyIGZyb20gXCIuL3Nob3dXZWF0aGVyXCI7XG5cblxuY29uc3Qgd2VhdGhlciA9IFtzaG93V2VhdGhlciwgc2hvd0hvdXJdXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiAoKSB7XG4gICAgY29uc3QgZWxlbSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy53ZWF0aGVyRGlzcGxheScpO1xuICAgIGNvbnN0IGJ1dHRvbiA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJy5idXR0b24nKTtcbiAgICB3ZWF0aGVyWzBdKGVsZW0pO1xuICAgIGZvciAobGV0IGluZGV4ID0gMDsgaW5kZXggPCBidXR0b24ubGVuZ3RoOyBpbmRleCsrKSB7XG5cbiAgICAgICAgYnV0dG9uW2luZGV4XS5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsICgpID0+IHtcbiAgICAgICAgICAgIHdoaWxlIChlbGVtLmhhc0NoaWxkTm9kZXMoKSkge1xuICAgICAgICAgICAgICAgIGVsZW0uZmlyc3RDaGlsZC5yZW1vdmUoKVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHdlYXRoZXJbaW5kZXhdKGVsZW0pO1xuXG4gICAgICAgIH0pOyAgIFxuICAgIH1cbn0iLCJpbXBvcnQgJy4vc3R5bGUuY3NzJztcbmltcG9ydCAnLi9zdHlsZTIuY3NzJztcbmltcG9ydCAnLi9zdHlsZTMuY3NzJztcbmltcG9ydCByaWdodFdlYXRoZXIgZnJvbSAnLi9yaWdodFdlYXRoZXInO1xuaW1wb3J0IGxlZnRXZWF0aGVyIGZyb20gJy4vbGVmdFdlYXRoZXInO1xuaW1wb3J0IHdlYXRoZXJCdXR0b25zIGZyb20gJy4vd2VhdGhlckJ1dHRvbnMnO1xuaW1wb3J0IGNyZWF0ZURpdiBmcm9tICcuL2NyZWF0ZURpdic7XG5pbXBvcnQgd2VhdGhlckluZm8gZnJvbSAnLi93ZWF0aGVySW5mbyc7XG5cbmNsYXNzIENvbnRhaW5lciB7XG4gICAgd2VhdGhlckRpdiA9ICgpID0+IHtcbiAgICAgICAgY29uc3QgZWxlbSA9IGNyZWF0ZURpdignY29udGFpbmVyJyk7XG4gICAgICAgIGNvbnN0IGNvbnRlbnQgPSBjcmVhdGVEaXYoJ2NvbnRlbnQnKTtcbiAgICAgICAgY29udGVudC5hcHBlbmQobGVmdFdlYXRoZXIoKSwgcmlnaHRXZWF0aGVyKCkpO1xuICAgICAgICBlbGVtLmFwcGVuZChjb250ZW50LCB3ZWF0aGVyQnV0dG9ucygpKTtcbiAgICAgICAgcmV0dXJuIGVsZW07XG4gICAgfVxuICAgIHdlYXRoZXIoKSB7XG4gICAgICAgIHdpbmRvdy5vbmxvYWQgPSBmdW5jdGlvbiAoZSkge1xuICAgICAgICAgICAgY29uc3QgY291bnRyeSA9IGxvY2FsU3RvcmFnZS5nZXRJdGVtKCdjb3VudHJ5Jyk7XG4gICAgICAgICAgICBpZiAoY291bnRyeSA9PT0gJycgfHwgY291bnRyeSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAgICAgICBsb2NhbFN0b3JhZ2Uuc2V0SXRlbShcImNvdW50cnlcIiwgJ3VzYScpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICB3aW5kb3cub25zY3JvbGwgPSBmdW5jdGlvbiAoZSkge1xuICAgICAgICAgICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0oXCJzY3JvbGxwb3NcIiwgd2luZG93LnNjcm9sbFkpO1xuICAgICAgICB9O1xuICAgICAgICBkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKHRoaXMud2VhdGhlckRpdigpKTtcbiAgICAgICAgd2VhdGhlckluZm8oKTtcbiAgICB9XG59XG5cbmNvbnN0IGNvbnRhaW5lciA9IG5ldyBDb250YWluZXIoKTtcbmNvbnRhaW5lci53ZWF0aGVyKCk7XG5cbnZhciBzY3JvbGxwb3MgPSBsb2NhbFN0b3JhZ2UuZ2V0SXRlbShcInNjcm9sbHBvc1wiKTtcbmlmIChzY3JvbGxwb3MpIHdpbmRvdy5zY3JvbGxUbygwLCBzY3JvbGxwb3MpOyJdLCJuYW1lcyI6WyJfX19DU1NfTE9BREVSX1VSTF9JTVBPUlRfMF9fXyIsIlVSTCIsIl9fX0NTU19MT0FERVJfRVhQT1JUX19fIiwiX19fQ1NTX0xPQURFUl9VUkxfUkVQTEFDRU1FTlRfMF9fXyIsInB1c2giLCJtb2R1bGUiLCJpZCIsImV4cG9ydHMiLCJjc3NXaXRoTWFwcGluZ1RvU3RyaW5nIiwibGlzdCIsInRvU3RyaW5nIiwidGhpcyIsIm1hcCIsIml0ZW0iLCJjb250ZW50IiwibmVlZExheWVyIiwiY29uY2F0IiwibGVuZ3RoIiwiam9pbiIsImkiLCJtb2R1bGVzIiwibWVkaWEiLCJkZWR1cGUiLCJzdXBwb3J0cyIsImxheWVyIiwidW5kZWZpbmVkIiwiYWxyZWFkeUltcG9ydGVkTW9kdWxlcyIsImsiLCJfayIsInVybCIsIm9wdGlvbnMiLCJTdHJpbmciLCJfX2VzTW9kdWxlIiwiZGVmYXVsdCIsInRlc3QiLCJzbGljZSIsImhhc2giLCJuZWVkUXVvdGVzIiwicmVwbGFjZSIsImNzc01hcHBpbmciLCJidG9hIiwiYmFzZTY0IiwidW5lc2NhcGUiLCJlbmNvZGVVUklDb21wb25lbnQiLCJKU09OIiwic3RyaW5naWZ5IiwiZGF0YSIsInNvdXJjZU1hcHBpbmciLCJlIiwibiIsInIiLCJzIiwidSIsImEiLCJvIiwiZiIsImgiLCJjIiwiZCIsImwiLCIkIiwieSIsIk0iLCJuYW1lIiwid2Vla2RheXMiLCJzcGxpdCIsIm1vbnRocyIsIm9yZGluYWwiLCJ0IiwibSIsIkFycmF5IiwidiIsInoiLCJ1dGNPZmZzZXQiLCJNYXRoIiwiYWJzIiwiZmxvb3IiLCJkYXRlIiwieWVhciIsIm1vbnRoIiwiY2xvbmUiLCJhZGQiLCJjZWlsIiwicCIsInciLCJEIiwibXMiLCJRIiwidG9Mb3dlckNhc2UiLCJnIiwiXyIsIlMiLCJhcmdzIiwiYXJndW1lbnRzIiwiTyIsImxvY2FsZSIsIiRMIiwidXRjIiwiJHUiLCJ4IiwiJHgiLCIkb2Zmc2V0IiwicGFyc2UiLCJwcm90b3R5cGUiLCIkZCIsIkRhdGUiLCJOYU4iLCJtYXRjaCIsInN1YnN0cmluZyIsIlVUQyIsImluaXQiLCIkeSIsImdldEZ1bGxZZWFyIiwiJE0iLCJnZXRNb250aCIsIiREIiwiZ2V0RGF0ZSIsIiRXIiwiZ2V0RGF5IiwiJEgiLCJnZXRIb3VycyIsIiRtIiwiZ2V0TWludXRlcyIsIiRzIiwiZ2V0U2Vjb25kcyIsIiRtcyIsImdldE1pbGxpc2Vjb25kcyIsIiR1dGlscyIsImlzVmFsaWQiLCJpc1NhbWUiLCJzdGFydE9mIiwiZW5kT2YiLCJpc0FmdGVyIiwiaXNCZWZvcmUiLCIkZyIsInNldCIsInVuaXgiLCJ2YWx1ZU9mIiwiZ2V0VGltZSIsInRvRGF0ZSIsImFwcGx5IiwiJGxvY2FsZSIsIndlZWtTdGFydCIsIiRzZXQiLCJtaW4iLCJkYXlzSW5Nb250aCIsImdldCIsIk51bWJlciIsInJvdW5kIiwic3VidHJhY3QiLCJmb3JtYXQiLCJpbnZhbGlkRGF0ZSIsIm1lcmlkaWVtIiwiWVkiLCJZWVlZIiwiTU0iLCJNTU0iLCJtb250aHNTaG9ydCIsIk1NTU0iLCJERCIsImRkIiwid2Vla2RheXNNaW4iLCJkZGQiLCJ3ZWVrZGF5c1Nob3J0IiwiZGRkZCIsIkgiLCJISCIsImhoIiwiQSIsIm1tIiwic3MiLCJTU1MiLCJaIiwiZ2V0VGltZXpvbmVPZmZzZXQiLCJkaWZmIiwidG9KU09OIiwidG9JU09TdHJpbmciLCJ0b1VUQ1N0cmluZyIsIlQiLCJmb3JFYWNoIiwiZXh0ZW5kIiwiJGkiLCJpc0RheWpzIiwiZW4iLCJMcyIsInN0eWxlc0luRE9NIiwiZ2V0SW5kZXhCeUlkZW50aWZpZXIiLCJpZGVudGlmaWVyIiwicmVzdWx0IiwibW9kdWxlc1RvRG9tIiwiaWRDb3VudE1hcCIsImlkZW50aWZpZXJzIiwiYmFzZSIsImNvdW50IiwiaW5kZXhCeUlkZW50aWZpZXIiLCJvYmoiLCJjc3MiLCJzb3VyY2VNYXAiLCJyZWZlcmVuY2VzIiwidXBkYXRlciIsImFkZEVsZW1lbnRTdHlsZSIsImJ5SW5kZXgiLCJzcGxpY2UiLCJhcGkiLCJkb21BUEkiLCJ1cGRhdGUiLCJuZXdPYmoiLCJyZW1vdmUiLCJsYXN0SWRlbnRpZmllcnMiLCJuZXdMaXN0IiwiaW5kZXgiLCJuZXdMYXN0SWRlbnRpZmllcnMiLCJfaSIsIl9pbmRleCIsIm1lbW8iLCJpbnNlcnQiLCJzdHlsZSIsInRhcmdldCIsInN0eWxlVGFyZ2V0IiwiZG9jdW1lbnQiLCJxdWVyeVNlbGVjdG9yIiwid2luZG93IiwiSFRNTElGcmFtZUVsZW1lbnQiLCJjb250ZW50RG9jdW1lbnQiLCJoZWFkIiwiZ2V0VGFyZ2V0IiwiRXJyb3IiLCJhcHBlbmRDaGlsZCIsImVsZW1lbnQiLCJjcmVhdGVFbGVtZW50Iiwic2V0QXR0cmlidXRlcyIsImF0dHJpYnV0ZXMiLCJzdHlsZUVsZW1lbnQiLCJub25jZSIsInNldEF0dHJpYnV0ZSIsImluc2VydFN0eWxlRWxlbWVudCIsInN0eWxlVGFnVHJhbnNmb3JtIiwicGFyZW50Tm9kZSIsInJlbW92ZUNoaWxkIiwicmVtb3ZlU3R5bGVFbGVtZW50Iiwic3R5bGVTaGVldCIsImNzc1RleHQiLCJmaXJzdENoaWxkIiwiY3JlYXRlVGV4dE5vZGUiLCJfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX18iLCJfX3dlYnBhY2tfcmVxdWlyZV9fIiwibW9kdWxlSWQiLCJjYWNoZWRNb2R1bGUiLCJfX3dlYnBhY2tfbW9kdWxlc19fIiwiY2FsbCIsImdldHRlciIsImRlZmluaXRpb24iLCJrZXkiLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImVudW1lcmFibGUiLCJnbG9iYWxUaGlzIiwiRnVuY3Rpb24iLCJwcm9wIiwiaGFzT3duUHJvcGVydHkiLCJzY3JpcHRVcmwiLCJpbXBvcnRTY3JpcHRzIiwibG9jYXRpb24iLCJjdXJyZW50U2NyaXB0Iiwic3JjIiwic2NyaXB0cyIsImdldEVsZW1lbnRzQnlUYWdOYW1lIiwiYiIsImJhc2VVUkkiLCJzZWxmIiwiaHJlZiIsIm5jIiwiYmluZCIsImZuIiwidGhpc0FyZyIsImdldFByb3RvdHlwZU9mIiwia2luZE9mIiwiY2FjaGUiLCJjcmVhdGUiLCJ0aGluZyIsInN0ciIsImtpbmRPZlRlc3QiLCJ0eXBlIiwidHlwZU9mVGVzdCIsImlzQXJyYXkiLCJpc1VuZGVmaW5lZCIsImlzQXJyYXlCdWZmZXIiLCJpc1N0cmluZyIsImlzRnVuY3Rpb24iLCJpc051bWJlciIsImlzT2JqZWN0IiwiaXNQbGFpbk9iamVjdCIsInZhbCIsIlN5bWJvbCIsInRvU3RyaW5nVGFnIiwiaXRlcmF0b3IiLCJpc0RhdGUiLCJpc0ZpbGUiLCJpc0Jsb2IiLCJpc0ZpbGVMaXN0IiwiaXNVUkxTZWFyY2hQYXJhbXMiLCJhbGxPd25LZXlzIiwia2V5cyIsImdldE93blByb3BlcnR5TmFtZXMiLCJsZW4iLCJmaW5kS2V5IiwiX2tleSIsIl9nbG9iYWwiLCJnbG9iYWwiLCJpc0NvbnRleHREZWZpbmVkIiwiY29udGV4dCIsImlzVHlwZWRBcnJheSIsIlR5cGVkQXJyYXkiLCJVaW50OEFycmF5IiwiaXNIVE1MRm9ybSIsImlzUmVnRXhwIiwicmVkdWNlRGVzY3JpcHRvcnMiLCJyZWR1Y2VyIiwiZGVzY3JpcHRvcnMiLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzIiwicmVkdWNlZERlc2NyaXB0b3JzIiwiZGVzY3JpcHRvciIsImRlZmluZVByb3BlcnRpZXMiLCJBTFBIQSIsIkRJR0lUIiwiQUxQSEFCRVQiLCJBTFBIQV9ESUdJVCIsInRvVXBwZXJDYXNlIiwiaXNBc3luY0ZuIiwiaXNCdWZmZXIiLCJjb25zdHJ1Y3RvciIsImlzRm9ybURhdGEiLCJraW5kIiwiRm9ybURhdGEiLCJhcHBlbmQiLCJpc0FycmF5QnVmZmVyVmlldyIsIkFycmF5QnVmZmVyIiwiaXNWaWV3IiwiYnVmZmVyIiwiaXNCb29sZWFuIiwiaXNTdHJlYW0iLCJwaXBlIiwibWVyZ2UiLCJjYXNlbGVzcyIsImFzc2lnblZhbHVlIiwidGFyZ2V0S2V5IiwidHJpbSIsInN0cmlwQk9NIiwiY2hhckNvZGVBdCIsImluaGVyaXRzIiwic3VwZXJDb25zdHJ1Y3RvciIsInByb3BzIiwidmFsdWUiLCJhc3NpZ24iLCJ0b0ZsYXRPYmplY3QiLCJzb3VyY2VPYmoiLCJkZXN0T2JqIiwiZmlsdGVyIiwicHJvcEZpbHRlciIsIm1lcmdlZCIsImVuZHNXaXRoIiwic2VhcmNoU3RyaW5nIiwicG9zaXRpb24iLCJsYXN0SW5kZXgiLCJpbmRleE9mIiwidG9BcnJheSIsImFyciIsImZvckVhY2hFbnRyeSIsIm5leHQiLCJkb25lIiwicGFpciIsIm1hdGNoQWxsIiwicmVnRXhwIiwibWF0Y2hlcyIsImV4ZWMiLCJoYXNPd25Qcm9wIiwiZnJlZXplTWV0aG9kcyIsIndyaXRhYmxlIiwidG9PYmplY3RTZXQiLCJhcnJheU9yU3RyaW5nIiwiZGVsaW1pdGVyIiwiZGVmaW5lIiwidG9DYW1lbENhc2UiLCJwMSIsInAyIiwibm9vcCIsInRvRmluaXRlTnVtYmVyIiwiZGVmYXVsdFZhbHVlIiwiaXNGaW5pdGUiLCJnZW5lcmF0ZVN0cmluZyIsInNpemUiLCJhbHBoYWJldCIsInJhbmRvbSIsImlzU3BlY0NvbXBsaWFudEZvcm0iLCJ0b0pTT05PYmplY3QiLCJzdGFjayIsInZpc2l0Iiwic291cmNlIiwicmVkdWNlZFZhbHVlIiwiaXNUaGVuYWJsZSIsInRoZW4iLCJjYXRjaCIsIkF4aW9zRXJyb3IiLCJtZXNzYWdlIiwiY29kZSIsImNvbmZpZyIsInJlcXVlc3QiLCJyZXNwb25zZSIsImNhcHR1cmVTdGFja1RyYWNlIiwidXRpbHMiLCJkZXNjcmlwdGlvbiIsIm51bWJlciIsImZpbGVOYW1lIiwibGluZU51bWJlciIsImNvbHVtbk51bWJlciIsInN0YXR1cyIsImZyb20iLCJlcnJvciIsImN1c3RvbVByb3BzIiwiYXhpb3NFcnJvciIsImNhdXNlIiwiaXNWaXNpdGFibGUiLCJyZW1vdmVCcmFja2V0cyIsInJlbmRlcktleSIsInBhdGgiLCJkb3RzIiwidG9rZW4iLCJwcmVkaWNhdGVzIiwiZm9ybURhdGEiLCJUeXBlRXJyb3IiLCJtZXRhVG9rZW5zIiwiaW5kZXhlcyIsIm9wdGlvbiIsInZpc2l0b3IiLCJkZWZhdWx0VmlzaXRvciIsInVzZUJsb2IiLCJCbG9iIiwiY29udmVydFZhbHVlIiwiQnVmZmVyIiwic29tZSIsImlzRmxhdEFycmF5IiwiZWwiLCJleHBvc2VkSGVscGVycyIsImJ1aWxkIiwicG9wIiwiZW5jb2RlIiwiY2hhck1hcCIsIkF4aW9zVVJMU2VhcmNoUGFyYW1zIiwicGFyYW1zIiwiX3BhaXJzIiwiZW5jb2RlciIsIl9lbmNvZGUiLCJidWlsZFVSTCIsInNlcmlhbGl6ZUZuIiwic2VyaWFsaXplIiwic2VyaWFsaXplZFBhcmFtcyIsImhhc2htYXJrSW5kZXgiLCJoYW5kbGVycyIsInVzZSIsImZ1bGZpbGxlZCIsInJlamVjdGVkIiwic3luY2hyb25vdXMiLCJydW5XaGVuIiwiZWplY3QiLCJjbGVhciIsInNpbGVudEpTT05QYXJzaW5nIiwiZm9yY2VkSlNPTlBhcnNpbmciLCJjbGFyaWZ5VGltZW91dEVycm9yIiwiaXNCcm93c2VyIiwiY2xhc3NlcyIsIlVSTFNlYXJjaFBhcmFtcyIsImlzU3RhbmRhcmRCcm93c2VyRW52IiwicHJvZHVjdCIsIm5hdmlnYXRvciIsImlzU3RhbmRhcmRCcm93c2VyV2ViV29ya2VyRW52IiwiV29ya2VyR2xvYmFsU2NvcGUiLCJwcm90b2NvbHMiLCJidWlsZFBhdGgiLCJpc051bWVyaWNLZXkiLCJpc0xhc3QiLCJhcnJheVRvT2JqZWN0IiwiZW50cmllcyIsInBhcnNlUHJvcFBhdGgiLCJERUZBVUxUX0NPTlRFTlRfVFlQRSIsImRlZmF1bHRzIiwidHJhbnNpdGlvbmFsIiwiYWRhcHRlciIsInRyYW5zZm9ybVJlcXVlc3QiLCJoZWFkZXJzIiwiY29udGVudFR5cGUiLCJnZXRDb250ZW50VHlwZSIsImhhc0pTT05Db250ZW50VHlwZSIsImlzT2JqZWN0UGF5bG9hZCIsInNldENvbnRlbnRUeXBlIiwiaGVscGVycyIsInRvVVJMRW5jb2RlZEZvcm0iLCJmb3JtU2VyaWFsaXplciIsIl9Gb3JtRGF0YSIsImVudiIsInJhd1ZhbHVlIiwicGFyc2VyIiwic3RyaW5naWZ5U2FmZWx5IiwidHJhbnNmb3JtUmVzcG9uc2UiLCJKU09OUmVxdWVzdGVkIiwicmVzcG9uc2VUeXBlIiwic3RyaWN0SlNPTlBhcnNpbmciLCJ0aW1lb3V0IiwieHNyZkNvb2tpZU5hbWUiLCJ4c3JmSGVhZGVyTmFtZSIsIm1heENvbnRlbnRMZW5ndGgiLCJtYXhCb2R5TGVuZ3RoIiwidmFsaWRhdGVTdGF0dXMiLCJjb21tb24iLCJtZXRob2QiLCJpZ25vcmVEdXBsaWNhdGVPZiIsIiRpbnRlcm5hbHMiLCJub3JtYWxpemVIZWFkZXIiLCJoZWFkZXIiLCJub3JtYWxpemVWYWx1ZSIsIm1hdGNoSGVhZGVyVmFsdWUiLCJpc0hlYWRlck5hbWVGaWx0ZXIiLCJBeGlvc0hlYWRlcnMiLCJ2YWx1ZU9yUmV3cml0ZSIsInJld3JpdGUiLCJzZXRIZWFkZXIiLCJfdmFsdWUiLCJfaGVhZGVyIiwiX3Jld3JpdGUiLCJsSGVhZGVyIiwic2V0SGVhZGVycyIsInJhd0hlYWRlcnMiLCJwYXJzZWQiLCJsaW5lIiwicGFyc2VIZWFkZXJzIiwidG9rZW5zIiwidG9rZW5zUkUiLCJwYXJzZVRva2VucyIsImhhcyIsIm1hdGNoZXIiLCJkZWxldGUiLCJkZWxldGVkIiwiZGVsZXRlSGVhZGVyIiwibm9ybWFsaXplIiwibm9ybWFsaXplZCIsImNoYXIiLCJmb3JtYXRIZWFkZXIiLCJ0YXJnZXRzIiwiYXNTdHJpbmdzIiwic3RhdGljIiwiZmlyc3QiLCJjb21wdXRlZCIsImFjY2Vzc29ycyIsImRlZmluZUFjY2Vzc29yIiwiYWNjZXNzb3JOYW1lIiwibWV0aG9kTmFtZSIsImFyZzEiLCJhcmcyIiwiYXJnMyIsImNvbmZpZ3VyYWJsZSIsImJ1aWxkQWNjZXNzb3JzIiwiYWNjZXNzb3IiLCJ0cmFuc2Zvcm1EYXRhIiwiZm5zIiwiaXNDYW5jZWwiLCJfX0NBTkNFTF9fIiwiQ2FuY2VsZWRFcnJvciIsIndyaXRlIiwiZXhwaXJlcyIsImRvbWFpbiIsInNlY3VyZSIsImNvb2tpZSIsInRvR01UU3RyaW5nIiwicmVhZCIsIlJlZ0V4cCIsImRlY29kZVVSSUNvbXBvbmVudCIsIm5vdyIsImJ1aWxkRnVsbFBhdGgiLCJiYXNlVVJMIiwicmVxdWVzdGVkVVJMIiwicmVsYXRpdmVVUkwiLCJjb21iaW5lVVJMcyIsIm1zaWUiLCJ1c2VyQWdlbnQiLCJ1cmxQYXJzaW5nTm9kZSIsIm9yaWdpblVSTCIsInJlc29sdmVVUkwiLCJwcm90b2NvbCIsImhvc3QiLCJzZWFyY2giLCJob3N0bmFtZSIsInBvcnQiLCJwYXRobmFtZSIsImNoYXJBdCIsInJlcXVlc3RVUkwiLCJwcm9ncmVzc0V2ZW50UmVkdWNlciIsImxpc3RlbmVyIiwiaXNEb3dubG9hZFN0cmVhbSIsImJ5dGVzTm90aWZpZWQiLCJfc3BlZWRvbWV0ZXIiLCJzYW1wbGVzQ291bnQiLCJieXRlcyIsInRpbWVzdGFtcHMiLCJmaXJzdFNhbXBsZVRTIiwidGFpbCIsImNodW5rTGVuZ3RoIiwic3RhcnRlZEF0IiwiYnl0ZXNDb3VudCIsInBhc3NlZCIsImxvYWRlZCIsInRvdGFsIiwibGVuZ3RoQ29tcHV0YWJsZSIsInByb2dyZXNzQnl0ZXMiLCJyYXRlIiwicHJvZ3Jlc3MiLCJlc3RpbWF0ZWQiLCJldmVudCIsImtub3duQWRhcHRlcnMiLCJodHRwIiwieGhyIiwiWE1MSHR0cFJlcXVlc3QiLCJQcm9taXNlIiwicmVzb2x2ZSIsInJlamVjdCIsInJlcXVlc3REYXRhIiwicmVxdWVzdEhlYWRlcnMiLCJvbkNhbmNlbGVkIiwiY2FuY2VsVG9rZW4iLCJ1bnN1YnNjcmliZSIsInNpZ25hbCIsInJlbW92ZUV2ZW50TGlzdGVuZXIiLCJhdXRoIiwidXNlcm5hbWUiLCJwYXNzd29yZCIsImZ1bGxQYXRoIiwib25sb2FkZW5kIiwicmVzcG9uc2VIZWFkZXJzIiwiZ2V0QWxsUmVzcG9uc2VIZWFkZXJzIiwic2V0dGxlIiwiZXJyIiwicmVzcG9uc2VUZXh0Iiwic3RhdHVzVGV4dCIsIm9wZW4iLCJwYXJhbXNTZXJpYWxpemVyIiwib25yZWFkeXN0YXRlY2hhbmdlIiwicmVhZHlTdGF0ZSIsInJlc3BvbnNlVVJMIiwic2V0VGltZW91dCIsIm9uYWJvcnQiLCJvbmVycm9yIiwib250aW1lb3V0IiwidGltZW91dEVycm9yTWVzc2FnZSIsInhzcmZWYWx1ZSIsIndpdGhDcmVkZW50aWFscyIsImlzVVJMU2FtZU9yaWdpbiIsImNvb2tpZXMiLCJzZXRSZXF1ZXN0SGVhZGVyIiwib25Eb3dubG9hZFByb2dyZXNzIiwiYWRkRXZlbnRMaXN0ZW5lciIsIm9uVXBsb2FkUHJvZ3Jlc3MiLCJ1cGxvYWQiLCJjYW5jZWwiLCJhYm9ydCIsInN1YnNjcmliZSIsImFib3J0ZWQiLCJwYXJzZVByb3RvY29sIiwic2VuZCIsInRocm93SWZDYW5jZWxsYXRpb25SZXF1ZXN0ZWQiLCJ0aHJvd0lmUmVxdWVzdGVkIiwiZGlzcGF0Y2hSZXF1ZXN0IiwiYWRhcHRlcnMiLCJuYW1lT3JBZGFwdGVyIiwicmVhc29uIiwiaGVhZGVyc1RvT2JqZWN0IiwibWVyZ2VDb25maWciLCJjb25maWcxIiwiY29uZmlnMiIsImdldE1lcmdlZFZhbHVlIiwibWVyZ2VEZWVwUHJvcGVydGllcyIsInZhbHVlRnJvbUNvbmZpZzIiLCJkZWZhdWx0VG9Db25maWcyIiwibWVyZ2VEaXJlY3RLZXlzIiwibWVyZ2VNYXAiLCJ0aW1lb3V0TWVzc2FnZSIsImRlY29tcHJlc3MiLCJiZWZvcmVSZWRpcmVjdCIsInRyYW5zcG9ydCIsImh0dHBBZ2VudCIsImh0dHBzQWdlbnQiLCJzb2NrZXRQYXRoIiwicmVzcG9uc2VFbmNvZGluZyIsImNvbmZpZ1ZhbHVlIiwidmFsaWRhdG9ycyIsImRlcHJlY2F0ZWRXYXJuaW5ncyIsInZhbGlkYXRvciIsInZlcnNpb24iLCJmb3JtYXRNZXNzYWdlIiwib3B0IiwiZGVzYyIsIm9wdHMiLCJjb25zb2xlIiwid2FybiIsImFzc2VydE9wdGlvbnMiLCJzY2hlbWEiLCJhbGxvd1Vua25vd24iLCJBeGlvcyIsImluc3RhbmNlQ29uZmlnIiwiaW50ZXJjZXB0b3JzIiwiY29uZmlnT3JVcmwiLCJjb250ZXh0SGVhZGVycyIsImJvb2xlYW4iLCJmdW5jdGlvbiIsInJlcXVlc3RJbnRlcmNlcHRvckNoYWluIiwic3luY2hyb25vdXNSZXF1ZXN0SW50ZXJjZXB0b3JzIiwiaW50ZXJjZXB0b3IiLCJ1bnNoaWZ0IiwicmVzcG9uc2VJbnRlcmNlcHRvckNoYWluIiwicHJvbWlzZSIsImNoYWluIiwibmV3Q29uZmlnIiwib25GdWxmaWxsZWQiLCJvblJlamVjdGVkIiwiZ2V0VXJpIiwiZ2VuZXJhdGVIVFRQTWV0aG9kIiwiaXNGb3JtIiwiQ2FuY2VsVG9rZW4iLCJleGVjdXRvciIsInJlc29sdmVQcm9taXNlIiwiX2xpc3RlbmVycyIsIm9uZnVsZmlsbGVkIiwiX3Jlc29sdmUiLCJIdHRwU3RhdHVzQ29kZSIsIkNvbnRpbnVlIiwiU3dpdGNoaW5nUHJvdG9jb2xzIiwiUHJvY2Vzc2luZyIsIkVhcmx5SGludHMiLCJPayIsIkNyZWF0ZWQiLCJBY2NlcHRlZCIsIk5vbkF1dGhvcml0YXRpdmVJbmZvcm1hdGlvbiIsIk5vQ29udGVudCIsIlJlc2V0Q29udGVudCIsIlBhcnRpYWxDb250ZW50IiwiTXVsdGlTdGF0dXMiLCJBbHJlYWR5UmVwb3J0ZWQiLCJJbVVzZWQiLCJNdWx0aXBsZUNob2ljZXMiLCJNb3ZlZFBlcm1hbmVudGx5IiwiRm91bmQiLCJTZWVPdGhlciIsIk5vdE1vZGlmaWVkIiwiVXNlUHJveHkiLCJVbnVzZWQiLCJUZW1wb3JhcnlSZWRpcmVjdCIsIlBlcm1hbmVudFJlZGlyZWN0IiwiQmFkUmVxdWVzdCIsIlVuYXV0aG9yaXplZCIsIlBheW1lbnRSZXF1aXJlZCIsIkZvcmJpZGRlbiIsIk5vdEZvdW5kIiwiTWV0aG9kTm90QWxsb3dlZCIsIk5vdEFjY2VwdGFibGUiLCJQcm94eUF1dGhlbnRpY2F0aW9uUmVxdWlyZWQiLCJSZXF1ZXN0VGltZW91dCIsIkNvbmZsaWN0IiwiR29uZSIsIkxlbmd0aFJlcXVpcmVkIiwiUHJlY29uZGl0aW9uRmFpbGVkIiwiUGF5bG9hZFRvb0xhcmdlIiwiVXJpVG9vTG9uZyIsIlVuc3VwcG9ydGVkTWVkaWFUeXBlIiwiUmFuZ2VOb3RTYXRpc2ZpYWJsZSIsIkV4cGVjdGF0aW9uRmFpbGVkIiwiSW1BVGVhcG90IiwiTWlzZGlyZWN0ZWRSZXF1ZXN0IiwiVW5wcm9jZXNzYWJsZUVudGl0eSIsIkxvY2tlZCIsIkZhaWxlZERlcGVuZGVuY3kiLCJUb29FYXJseSIsIlVwZ3JhZGVSZXF1aXJlZCIsIlByZWNvbmRpdGlvblJlcXVpcmVkIiwiVG9vTWFueVJlcXVlc3RzIiwiUmVxdWVzdEhlYWRlckZpZWxkc1Rvb0xhcmdlIiwiVW5hdmFpbGFibGVGb3JMZWdhbFJlYXNvbnMiLCJJbnRlcm5hbFNlcnZlckVycm9yIiwiTm90SW1wbGVtZW50ZWQiLCJCYWRHYXRld2F5IiwiU2VydmljZVVuYXZhaWxhYmxlIiwiR2F0ZXdheVRpbWVvdXQiLCJIdHRwVmVyc2lvbk5vdFN1cHBvcnRlZCIsIlZhcmlhbnRBbHNvTmVnb3RpYXRlcyIsIkluc3VmZmljaWVudFN0b3JhZ2UiLCJMb29wRGV0ZWN0ZWQiLCJOb3RFeHRlbmRlZCIsIk5ldHdvcmtBdXRoZW50aWNhdGlvblJlcXVpcmVkIiwiYXhpb3MiLCJjcmVhdGVJbnN0YW5jZSIsImRlZmF1bHRDb25maWciLCJpbnN0YW5jZSIsIlZFUlNJT04iLCJ0b0Zvcm1EYXRhIiwiQ2FuY2VsIiwiYWxsIiwicHJvbWlzZXMiLCJzcHJlYWQiLCJjYWxsYmFjayIsImlzQXhpb3NFcnJvciIsInBheWxvYWQiLCJmb3JtVG9KU09OIiwiYXN5bmMiLCJnZXRBcGkiLCJsaW5rIiwicmVzIiwiZ2V0RGFpbHlBcGkiLCJkYXlzIiwiY2xhc3NOYW1lIiwid2lkdGgiLCJoZWlnaHQiLCJpbWdTdmciLCJjbGFzc0xpc3QiLCJ3ZWF0aGVyRGl2T25lIiwidHh0IiwiZWxlbSIsInRleHRDb250ZW50Iiwid2VhdGhlckRpdlR3byIsInR4dDEiLCJjbGFzc05hbWUxIiwidHh0MiIsImNsYXNzTmFtZTIiLCJib3giLCJkZWdyZWVGdW5jTGVmdCIsImRlZ3JlZUZ1bmNSaWdodCIsInBvc2l0aW9uMSIsInBvc2l0aW9uMiIsImRlZ3JlZUZ1bmMiLCJtc2ciLCJjb250YWluZXIiLCJlcnJvckJveCIsImNyZWF0ZURpdiIsImVycm9yTXNnIiwiY291bnRyeSIsImxvY2FsU3RvcmFnZSIsImdldEl0ZW0iLCJjdXJyZW50IiwiZmVlbHNsaWtlX2MiLCJodW1pZGl0eSIsIndpbmRfa3BoIiwid2luZF9kZWdyZWUiLCJlcnJvckZ1bmMiLCJpbWciLCJhY2NvcmRDb250YWluZXIiLCJmb3JlY2FzdGRheSIsIndlYXRoZXIiLCJkYXkiLCJhdmd0ZW1wX2MiLCJtYXh0ZW1wX2MiLCJtaW50ZW1wX2MiLCJjbG91ZEltZyIsImNvbmRpdGlvbiIsImljb24iLCJsZWZ0QXJyb3ciLCJyaWdodEFycm93IiwiZm9yZWNhc3QiLCJsYXN0X3VwZGF0ZWQiLCJ0ZW1wX2MiLCJzZWFjaEJveCIsInBsYWNlaG9sZGVyIiwic2VhcmNoX3N2ZyIsInNlYXJjaFdldGhlciIsInNlYXJjaElucHV0Iiwic2VhcmNoQnRuIiwicHJldmVudERlZmF1bHQiLCJjbGljayIsIndlYXRoZXJEaXNwbGF5IiwiYWxlcnQiLCJzZXRJdGVtIiwiZmlyc3RFbGVtZW50Q2hpbGQiLCJsZWZ0V2VhdGhlciIsInJpZ2h0V2VhdGhlciIsImluc2VydEJlZm9yZSIsImhhc0NoaWxkTm9kZXMiLCJzaG93V2VhdGhlciIsInNlYXJjaFN1Ym1pdCIsImJ1dHRvbiIsImRpc3BsYXlIb3VyIiwibmV3QXJyIiwibnVtIiwibG9vcCIsInJpZ2h0IiwibG9vcENvbnRhaW5lciIsInF1ZXJ5U2VsZWN0b3JBbGwiLCJhZGRMb29wQ29udGFpbmVyIiwiaG91ciIsInRpbWUiLCJ3ZWF0aGVyRGl2Iiwid2VhdGhlckJ1dHRvbnMiLCJvbmxvYWQiLCJvbnNjcm9sbCIsInNjcm9sbFkiLCJib2R5Iiwid2VhdGhlckluZm8iLCJzY3JvbGxwb3MiLCJzY3JvbGxUbyJdLCJzb3VyY2VSb290IjoiIn0=